function arrayGet(a,b,c){if(null==b)a.throwNewException("Ljava/lang/NullPointerException;","");else{var d=b.array;if(!(0>c||c>=d.length))return d[c];a.throwNewException("Ljava/lang/ArrayIndexOutOfBoundsException;","Tried to access an illegal index in an array.")}}function isNotNull(a,b){return null==b?(a.throwNewException("Ljava/lang/NullPointerException;",""),!1):!0}function verifyArray(a,b){return b.getClass()instanceof ArrayClassData?!0:(a.throwNewException("Ljava/lang/IllegalArgumentException;","Object is not an array."),!1)}function initializeMemberName(a,b,c){var d,e=b["java/lang/invoke/MemberName/flags"],f=b["java/lang/invoke/MemberName/type"],g=b["java/lang/invoke/MemberName/name"],h=e>>>MemberNameConstants.REFERENCE_KIND_SHIFT;c instanceof Method?(e=MemberNameConstants.IS_METHOD,c.cls.accessFlags.isInterface()?d=MethodHandleReferenceKind.INVOKEINTERFACE:c.accessFlags.isStatic()?d=MethodHandleReferenceKind.INVOKESTATIC:"<"===c.name[0]?(e=MemberNameConstants.IS_CONSTRUCTOR,d=MethodHandleReferenceKind.INVOKESPECIAL):d=MethodHandleReferenceKind.INVOKEVIRTUAL,b.vmtarget=c.getVMTargetBridgeMethod(a,h?h:d),(d===MethodHandleReferenceKind.INVOKEINTERFACE||d===MethodHandleReferenceKind.INVOKEVIRTUAL)&&(b.vmindex=c.cls.getVMIndexForMethod(c)),e|=d<<MemberNameConstants.REFERENCE_KIND_SHIFT|methodFlags(c)):(e=MemberNameConstants.IS_FIELD,d=c.accessFlags.isStatic()?MethodHandleReferenceKind.GETSTATIC:MethodHandleReferenceKind.GETFIELD,b.vmindex=c.cls.getVMIndexForField(c),e|=d<<MemberNameConstants.REFERENCE_KIND_SHIFT|c.accessFlags.getRawByte()),null===f&&(f=a.getJVM().internString(c.rawDescriptor)),null===g&&(g=a.getJVM().internString(c.name)),b["java/lang/invoke/MemberName/clazz"]=c.cls.getClassObject(a),b["java/lang/invoke/MemberName/flags"]=e,b["java/lang/invoke/MemberName/type"]=f,b["java/lang/invoke/MemberName/name"]=g}function methodFlags(a){var b=a.accessFlags.getRawByte();return a.isCallerSensitive()&&(b|=MemberNameConstants.CALLER_SENSITIVE),b}var Doppio=require("../doppiojvm"),ReferenceClassData=Doppio.VM.ClassFile.ReferenceClassData,logging=Doppio.Debug.Logging,util=Doppio.VM.Util,ArrayClassData=Doppio.VM.ClassFile.ArrayClassData,ThreadStatus=Doppio.VM.Enums.ThreadStatus,Method=Doppio.VM.ClassFile.Method,Long=Doppio.VM.Long,assert=Doppio.Debug.Assert,PrimitiveClassData=Doppio.VM.ClassFile.PrimitiveClassData,MethodHandleReferenceKind=Doppio.VM.Enums.MethodHandleReferenceKind,debug=logging.debug,java_lang_Class=function(){function a(){}return a["forName0(Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class;"]=function(a,b,c,d,e){var f=util.int_classname(b.toString());if(util.verify_int_classname(f)){var g=util.getLoader(a,d);a.setStatus(ThreadStatus.ASYNC_WAITING),c?g.initializeClass(a,f,function(b){null!=b&&a.asyncReturn(b.getClassObject(a))}):g.resolveClass(a,f,function(b){null!=b&&a.asyncReturn(b.getClassObject(a))})}else a.throwNewException("Ljava/lang/ClassNotFoundException;",f)},a["isInstance(Ljava/lang/Object;)Z"]=function(a,b,c){return null!==c?c.getClass().isCastable(b.$cls):!1},a["isAssignableFrom(Ljava/lang/Class;)Z"]=function(a,b,c){return c.$cls.isCastable(b.$cls)},a["isInterface()Z"]=function(a,b){return b.$cls instanceof ReferenceClassData?b.$cls.accessFlags.isInterface():!1},a["isArray()Z"]=function(a,b){return b.$cls instanceof ArrayClassData},a["isPrimitive()Z"]=function(a,b){return b.$cls instanceof PrimitiveClassData},a["getName0()Ljava/lang/String;"]=function(a,b){return util.initString(a.getBsCl(),b.$cls.getExternalName())},a["getSuperclass()Ljava/lang/Class;"]=function(a,b){if(b.$cls instanceof PrimitiveClassData)return null;var c=b.$cls;return c.accessFlags.isInterface()||null==c.getSuperClass()?null:c.getSuperClass().getClassObject(a)},a["getInterfaces0()[Ljava/lang/Class;"]=function(a,b){return util.newArrayFromData(a,a.getBsCl(),"[Ljava/lang/Class;",b.$cls.getInterfaces().map(function(b){return b.getClassObject(a)}))},a["getComponentType()Ljava/lang/Class;"]=function(a,b){return b.$cls instanceof ArrayClassData?b.$cls.getComponentClass().getClassObject(a):null},a["getModifiers()I"]=function(a,b){return b.$cls.accessFlags.getRawByte()},a["getSigners()[Ljava/lang/Object;"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["setSigners([Ljava/lang/Object;)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["getEnclosingMethod0()[Ljava/lang/Object;"]=function(a,b){var c=a.getBsCl();if(b.$cls instanceof ReferenceClassData){var d=b.$cls,e=d.getAttribute("EnclosingMethod");if(null==e)return null;var f=util.newArray(a,c,"[Ljava/lang/Object;",3),g=e.encClass;if(null!=e.encMethod&&(f.array[1]=util.initString(c,e.encMethod.name),f.array[2]=util.initString(c,e.encMethod.descriptor)),g.isResolved())return f.array[0]=g.cls.getClassObject(a),f;a.setStatus(ThreadStatus.ASYNC_WAITING),g.resolve(a,d.getLoader(),d,function(b){b&&(f.array[0]=g.cls.getClassObject(a),a.asyncReturn(f))})}return null},a["getDeclaringClass0()Ljava/lang/Class;"]=function(a,b){var c,d,e,f,g;if(b.$cls instanceof ReferenceClassData){var h=b.$cls,i=h.getAttribute("InnerClasses");if(null==i)return null;var j=h.getInternalName(),k=i.classes;for(f=0,g=k.length;g>f;f++)if(d=k[f],!(d.outerInfoIndex<=0)&&(e=h.constantPool.get(d.innerInfoIndex).name,e===j)){if(c=h.constantPool.get(d.outerInfoIndex),c.isResolved())return c.cls.getClassObject(a);a.setStatus(ThreadStatus.ASYNC_WAITING),c.resolve(a,h.getLoader(),h,function(b){b&&a.asyncReturn(c.cls.getClassObject(a))})}}return null},a["getProtectionDomain0()Ljava/security/ProtectionDomain;"]=function(a,b){return b.$cls.getProtectionDomain()},a["getPrimitiveClass(Ljava/lang/String;)Ljava/lang/Class;"]=function(a,b){var c=util.typestr2descriptor(b.toString()),d=a.getBsCl().getInitializedClass(a,c);return d.getClassObject(a)},a["getGenericSignature0()Ljava/lang/String;"]=function(a,b){var c=b.$cls;if(!util.is_primitive_type(c.getInternalName())){var d=c.getAttribute("Signature");if(null!=d&&null!=d.sig)return util.initString(a.getBsCl(),d.sig)}return null},a["getRawAnnotations()[B"]=function(a,b){var c,d=b.$cls,e=d.getAttribute("RuntimeVisibleAnnotations");if(null!==e){for(var f=e.rawBytes,g=new Array(f.length),c=0;c<f.length;c++)g[c]=f.readInt8(c);return util.newArrayFromData(a,a.getBsCl(),"[B",g)}return null},a["getConstantPool()Lsun/reflect/ConstantPool;"]=function(a,b){var c=b.$cls,d=util.newObject(a,a.getBsCl(),"Lsun/reflect/ConstantPool;");return d["sun/reflect/ConstantPool/constantPoolOop"]=c.constantPool,d},a["getDeclaredFields0(Z)[Ljava/lang/reflect/Field;"]=function(a,b,c){var d=b.$cls.getFields();c&&(d=d.filter(function(a){return a.accessFlags.isPublic()}));var e=util.newArray(a,a.getBsCl(),"[Ljava/lang/reflect/Field;",d.length),f=0;a.setStatus(ThreadStatus.ASYNC_WAITING),util.asyncForEach(d,function(b,c){b.reflector(a,function(a){null!==a&&(e.array[f++]=a,c())})},function(){a.asyncReturn(e)})},a["getDeclaredMethods0(Z)[Ljava/lang/reflect/Method;"]=function(a,b,c){var d=b.$cls.getMethods().filter(function(a){return"<"!==a.name[0]&&(a.accessFlags.isPublic()||!c)}),e=util.newArray(a,a.getBsCl(),"[Ljava/lang/reflect/Method;",d.length),f=0;a.setStatus(ThreadStatus.ASYNC_WAITING),util.asyncForEach(d,function(b,c){b.reflector(a,function(a){null!==a&&(e.array[f++]=a,c())})},function(){a.asyncReturn(e)})},a["getDeclaredConstructors0(Z)[Ljava/lang/reflect/Constructor;"]=function(a,b,c){var d=b.$cls.getMethods().filter(function(a){return"<init>"===a.name&&(!c||a.accessFlags.isPublic())}),e=util.newArray(a,a.getBsCl(),"[Ljava/lang/reflect/Constructor;",d.length),f=0;a.setStatus(ThreadStatus.ASYNC_WAITING),util.asyncForEach(d,function(b,c){b.reflector(a,function(a){null!==a&&(e.array[f++]=a,c())})},function(){a.asyncReturn(e)})},a["getDeclaredClasses0()[Ljava/lang/Class;"]=function(a,b){var c=util.newArray(a,a.getBsCl(),"[Ljava/lang/Class;",0),d=b.$cls;if(!(d instanceof ReferenceClassData))return c;var e=d.getInternalName(),f=d.getAttributes("InnerClasses"),g=[];if(0===f.length)return c;for(var h=0;h<f.length;h++)g=g.concat(f[h].classes.filter(function(a){return a.outerInfoIndex>0&&d.constantPool.get(a.outerInfoIndex).name===e}).map(function(a){return d.constantPool.get(a.innerInfoIndex)}));a.setStatus(ThreadStatus.ASYNC_WAITING),util.asyncForEach(g,function(e,f){e.isResolved()?(c.array.push(e.cls.getClassObject(a)),f()):e.resolve(a,d.getLoader(),b.getClass(),function(b){b&&(c.array.push(e.cls.getClassObject(a)),f())})},function(){return a.asyncReturn(c)})},a["desiredAssertionStatus0(Ljava/lang/Class;)Z"]=function(a,b){return null===b.$cls.getLoader().getLoaderObject()?a.getJVM().areSystemAssertionsEnabled():!1},a}(),java_lang_ClassLoader$NativeLibrary=function(){function a(){}return a["load(Ljava/lang/String;Z)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["find(Ljava/lang/String;)J"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["unload(Ljava/lang/String;Z)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),java_lang_ClassLoader=function(){function a(){}return a["defineClass0(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;"]=function(a,b,c,d,e,f,g){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["defineClass1(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;"]=function(a,b,c,d,e,f,g,h){var i=util.getLoader(a,b),j=util.int_classname(c.toString()),k=i.defineClass(a,j,util.byteArray2Buffer(d.array,e,f),g);return null==k?null:(a.setStatus(ThreadStatus.ASYNC_WAITING),void k.resolve(a,function(b){null!==b&&a.asyncReturn(k.getClassObject(a))},!0))},a["defineClass2(Ljava/lang/String;Ljava/nio/ByteBuffer;IILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;"]=function(a,b,c,d,e,f,g,h){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["resolveClass0(Ljava/lang/Class;)V"]=function(a,b,c){util.getLoader(a,b);c.$cls.isResolved()||(a.setStatus(ThreadStatus.ASYNC_WAITING),c.$cls.resolve(a,function(b){null!==b&&a.asyncReturn()},!0))},a["findBootstrapClass(Ljava/lang/String;)Ljava/lang/Class;"]=function(a,b,c){var d=util.int_classname(c.toString());a.setStatus(ThreadStatus.ASYNC_WAITING),a.getBsCl().resolveClass(a,d,function(b){null!=b&&a.asyncReturn(b.getClassObject(a))},!0)},a["findLoadedClass0(Ljava/lang/String;)Ljava/lang/Class;"]=function(a,b,c){var d=util.getLoader(a,b),e=util.int_classname(c.toString()),f=d.getResolvedClass(e);return null!=f?f.getClassObject(a):null},a["retrieveDirectives()Ljava/lang/AssertionStatusDirectives;"]=function(a){var b=a.getJVM(),c=a.getBsCl();a["import"]("Ljava/lang/AssertionStatusDirectives;",function(d){var e=new d,f=b.getEnabledAssertions(),g=[],h=[],i=[],j=[],k=!1,l=function(a){return function(b){var c=b.indexOf("...");-1===c?(g.push(b),h.push(a)):(i.push(b.slice(0,c)),j.push(a))}};if(b.getDisabledAssertions().forEach(l(0)),"boolean"==typeof f)k=f;else{if(!Array.isArray(f))return a.throwNewException("Ljava/lang/InternalError;","Expected enableAssertions option to be a boolean or an array of strings.");f.forEach(l(1))}e["java/lang/AssertionStatusDirectives/classes"]=util.newArrayFromData(a,c,"[Ljava/lang/String;",g.map(function(a){return util.initString(c,a)})),e["java/lang/AssertionStatusDirectives/classEnabled"]=util.newArrayFromData(a,c,"[Z",h),e["java/lang/AssertionStatusDirectives/packages"]=util.newArrayFromData(a,c,"[Ljava/lang/String;",i.map(function(a){return util.initString(c,a)})),e["java/lang/AssertionStatusDirectives/packageEnabled"]=util.newArrayFromData(a,c,"[Z",j),e["java/lang/AssertionStatusDirectives/deflt"]=f?1:0,a.asyncReturn(e)})},a}(),java_lang_Compiler=function(){function a(){}return a["initialize()V"]=function(a){},a["registerNatives()V"]=function(a){},a["compileClass(Ljava/lang/Class;)Z"]=function(a,b){return 0},a["compileClasses(Ljava/lang/String;)Z"]=function(a,b){return 0},a["command(Ljava/lang/Object;)Ljava/lang/Object;"]=function(a,b){return null},a["enable()V"]=function(a){},a["disable()V"]=function(a){},a}(),conversionBuffer=new Buffer(8),java_lang_Double=function(){function a(){}return a["doubleToRawLongBits(D)J"]=function(a,b){return conversionBuffer.writeDoubleLE(b,0),Long.fromBits(conversionBuffer.readUInt32LE(0),conversionBuffer.readUInt32LE(4))},a["longBitsToDouble(J)D"]=function(a,b){return conversionBuffer.writeInt32LE(b.getLowBits(),0),conversionBuffer.writeInt32LE(b.getHighBits(),4),conversionBuffer.readDoubleLE(0)},a}(),java_lang_Float=function(){function a(){}return a["floatToRawIntBits(F)I"]=function(a,b){return conversionBuffer.writeFloatLE(b,0),conversionBuffer.readInt32LE(0)},a["intBitsToFloat(I)F"]=function(a,b){return conversionBuffer.writeInt32LE(b,0),conversionBuffer.readFloatLE(0)},a}(),java_lang_Object=function(){function a(){}return a["getClass()Ljava/lang/Class;"]=function(a,b){return b.getClass().getClassObject(a)},a["hashCode()I"]=function(a,b){return b.ref},a["clone()Ljava/lang/Object;"]=function(a,b){var c=b.getClass();if("["===c.getInternalName()[0])return b.slice(0);var d=util.newObjectFromClass(a,b.getClass());return Object.keys(b).forEach(function(a){d[a]=b[a]}),d},a["notify()V"]=function(a,b){b.getMonitor().notify(a)},a["notifyAll()V"]=function(a,b){b.getMonitor().notifyAll(a)},a["wait(J)V"]=function(a,b,c){b.getMonitor().wait(a,function(b){a.asyncReturn()},c.toNumber())},a}(),java_lang_Package=function(){function a(){}return a["getSystemPackage0(Ljava/lang/String;)Ljava/lang/String;"]=function(a,b){var c=b.toString();c=c.slice(0,c.length-1);for(var d=a.getBsCl().getPackages(),e=0;e<d.length;e++)if(d[e][0]===c)return util.initString(a.getBsCl(),d[e][1][0]);return null},a["getSystemPackages0()[Ljava/lang/String;"]=function(a){var b=a.getBsCl().getPackages();return util.newArrayFromData(a,a.getBsCl(),"[Ljava/lang/String;",b.map(function(b){return util.initString(a.getBsCl(),b[0]+"/")}))},a}(),java_lang_ProcessEnvironment=function(){function a(){}return a["environ()[[B"]=function(a){var b,c,d,e=util.newArray(a,a.getBsCl(),"[[B",0),f=process.env;for(b in f)c=f[b],d=util.newArray(a,a.getBsCl(),"[B",0),d.array=util.bytestr2Array(b),e.array.push(d),d=util.newArray(a,a.getBsCl(),"[B",0),d.array=util.bytestr2Array(c),e.array.push(d);return e},a}(),java_lang_reflect_Array=function(){function a(){}return a["getLength(Ljava/lang/Object;)I"]=function(a,b){return verifyArray(a,b)&&isNotNull(a,b)?b.array.length:void 0},a["get(Ljava/lang/Object;I)Ljava/lang/Object;"]=function(a,b,c){var d=arrayGet(a,b,c);if(null!=d){var e=b.getClass().getComponentClass();if(util.is_primitive_type(e.getInternalName()))return e.createWrapperObject(a,d)}return d},a["set(Ljava/lang/Object;ILjava/lang/Object;)V"]=function(a,b,c,d){if(verifyArray(a,b)&&isNotNull(a,b))if(0>c||c>=b.array.length)a.throwNewException("Ljava/lang/ArrayIndexOutOfBoundsException;","Tried to write to an illegal index in an array.");else{var e=b.getClass().getComponentClass();if(e instanceof PrimitiveClassData)if(d.getClass().isSubclass(a.getBsCl().getInitializedClass(a,e.boxClassName()))){var f=e.getInternalName();d[util.internal2external[f]+"Value()"+f](a,null,function(d,e){d?a.throwException(d):(b.array[c]=e,a.asyncReturn())})}else a.throwNewException("Ljava/lang/IllegalArgumentException;","argument type mismatch");else d.getClass().isSubclass(e)?b.array[c]=d:a.throwNewException("Ljava/lang/IllegalArgumentException;","argument type mismatch")}},a["setBoolean(Ljava/lang/Object;IZ)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["setByte(Ljava/lang/Object;IB)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["setChar(Ljava/lang/Object;IC)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["setShort(Ljava/lang/Object;IS)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["setInt(Ljava/lang/Object;II)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["setLong(Ljava/lang/Object;IJ)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["setFloat(Ljava/lang/Object;IF)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["setDouble(Ljava/lang/Object;ID)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["newArray(Ljava/lang/Class;I)Ljava/lang/Object;"]=function(a,b,c){return util.newArray(a,b.$cls.getLoader(),"["+b.$cls.getInternalName(),c)},a["multiNewArray(Ljava/lang/Class;[I)Ljava/lang/Object;"]=function(a,b,c){var d=new Array(c.array.length+1).join("[")+b.$cls.getInternalName();return b.$cls.isInitialized(a)?util.multiNewArray(a,b.$cls.getLoader(),d,c.array):(a.setStatus(ThreadStatus.ASYNC_WAITING),void b.$cls.initialize(a,function(e){a.asyncReturn(util.multiNewArray(a,b.$cls.getLoader(),d,c.array))}))},a["getBoolean(Ljava/lang/Object;I)Z"]=arrayGet,a["getByte(Ljava/lang/Object;I)B"]=arrayGet,a["getChar(Ljava/lang/Object;I)C"]=arrayGet,a["getShort(Ljava/lang/Object;I)S"]=arrayGet,a["getInt(Ljava/lang/Object;I)I"]=arrayGet,a["getLong(Ljava/lang/Object;I)J"]=arrayGet,a["getFloat(Ljava/lang/Object;I)F"]=arrayGet,a["getDouble(Ljava/lang/Object;I)D"]=arrayGet,a}(),java_lang_reflect_Proxy=function(){function a(){}return a["defineClass0(Ljava/lang/ClassLoader;Ljava/lang/String;[BII)Ljava/lang/Class;"]=function(a,b,c,d,e,f){var g=util.getLoader(a,b),h=g.defineClass(a,util.int_classname(c.toString()),util.byteArray2Buffer(d.array,e,f),null);return null!=h?h.getClassObject(a):void 0},a}(),java_lang_Runtime=function(){function a(){}return a["availableProcessors()I"]=function(a,b){return 1},a["freeMemory()J"]=function(a,b){return Long.MAX_VALUE},a["totalMemory()J"]=function(a,b){return Long.MAX_VALUE},a["maxMemory()J"]=function(a,b){return Long.MAX_VALUE},a["gc()V"]=function(a,b){a.setStatus(ThreadStatus.ASYNC_WAITING),setImmediate(function(){a.asyncReturn()})},a["runFinalization0()V"]=function(a){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["traceInstructions(Z)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["traceMethodCalls(Z)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),java_lang_SecurityManager=function(){function a(){}return a["getClassContext()[Ljava/lang/Class;"]=function(a,b){return util.newArrayFromData(a,a.getBsCl(),"[Ljava/lang/Class;",a.getStackTrace().map(function(b){return b.method.cls.getClassObject(a)}))},a["currentClassLoader0()Ljava/lang/ClassLoader;"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["classDepth(Ljava/lang/String;)I"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["classLoaderDepth0()I"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["currentLoadedClass0()Ljava/lang/Class;"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a}(),java_lang_Shutdown=function(){function a(){}return a["halt0(I)V"]=function(a,b){a.getJVM().halt(b)},a["runAllFinalizers()V"]=function(a){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),java_lang_StrictMath=function(){function a(){}return a["sin(D)D"]=function(a,b){return Math.sin(b)},a["cos(D)D"]=function(a,b){return Math.cos(b)},a["tan(D)D"]=function(a,b){return Math.tan(b)},a["asin(D)D"]=function(a,b){return Math.asin(b)},a["acos(D)D"]=function(a,b){return Math.acos(b)},a["atan(D)D"]=function(a,b){return Math.atan(b)},a["exp(D)D"]=function(a,b){return Math.exp(b)},a["log(D)D"]=function(a,b){return Math.log(b)},a["log10(D)D"]=function(a,b){return Math.log(b)/Math.LN10},a["sqrt(D)D"]=function(a,b){return Math.sqrt(b)},a["cbrt(D)D"]=function(a,b){var c=0>b;return c?-Math.pow(-b,1/3):Math.pow(b,1/3)},a["IEEEremainder(DD)D"]=function(a,b,c){if(b==Number.NEGATIVE_INFINITY||!(b<Number.POSITIVE_INFINITY)||0==c||c!=c)return Number.NaN;var d=8.98846567431158e307,e=0>b;return b=Math.abs(b),c=Math.abs(c),b==c||0==b?0*b:(d>c&&(b%=c+c),4/d>c?b+b>c&&(b-=c,b+b>=c&&(b-=c)):(c*=.5,b>c&&(b-=c,b>=c&&(b-=c))),e?-b:b)},a["atan2(DD)D"]=function(a,b,c){return Math.atan2(b,c)},a["pow(DD)D"]=function(a,b,c){return Math.pow(b,c)},a["sinh(D)D"]=function(a,b){return Math.sinh(b)},a["cosh(D)D"]=function(a,b){var c=Math.exp(b);return(c+1/c)/2},a["tanh(D)D"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["hypot(DD)D"]=function(a,b,c){return Math.sqrt(Math.pow(b,2)+Math.pow(c,2))},a["expm1(D)D"]=function(a,b){return Math.expm1(b)},a["log1p(D)D"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a}(),java_lang_String=function(){function a(){}return a["intern()Ljava/lang/String;"]=function(a,b){return a.getJVM().internString(b.toString(),b)},a}(),java_lang_System=function(){function a(){}return a["setIn0(Ljava/io/InputStream;)V"]=function(a,b){var c=util.getStaticFields(a,a.getBsCl(),"Ljava/lang/System;");c["java/lang/System/in"]=b},a["setOut0(Ljava/io/PrintStream;)V"]=function(a,b){var c=util.getStaticFields(a,a.getBsCl(),"Ljava/lang/System;");c["java/lang/System/out"]=b},a["setErr0(Ljava/io/PrintStream;)V"]=function(a,b){var c=util.getStaticFields(a,a.getBsCl(),"Ljava/lang/System;");c["java/lang/System/err"]=b},a["currentTimeMillis()J"]=function(a){return Long.fromNumber((new Date).getTime())},a["nanoTime()J"]=function(a){return Long.fromNumber((new Date).getTime()).multiply(Long.fromNumber(1e6))},a["arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V"]=function(a,b,c,d,e,f){if(null==b||null==d)a.throwNewException("Ljava/lang/NullPointerException;","Cannot copy to/from a null array.");else if(b.getClass()instanceof ArrayClassData&&d.getClass()instanceof ArrayClassData)if(0>c||c+f>b.array.length||0>e||e+f>d.array.length||0>f)a.throwNewException("Ljava/lang/ArrayIndexOutOfBoundsException;","Tried to write to an illegal index in an array.");else{var g=b.getClass(),h=d.getClass();if(b===d&&(b=d.slice(c,c+f),c=0),g.isCastable(h))util.arraycopyNoCheck(b,c,d,e,f);else{var i=b.getClass().getComponentClass(),j=d.getClass().getComponentClass();i instanceof PrimitiveClassData||j instanceof PrimitiveClassData?a.throwNewException("Ljava/lang/ArrayStoreException;","If calling arraycopy with a primitive array, both src and dest must be of the same primitive type."):util.arraycopyCheck(a,b,c,d,e,f)}}else a.throwNewException("Ljava/lang/ArrayStoreException;","src and dest arguments must be of array type.")},a["identityHashCode(Ljava/lang/Object;)I"]=function(a,b){return null!=b&&null!=b.ref?b.ref:0},a["initProperties(Ljava/util/Properties;)Ljava/util/Properties;"]=function(a,b){var c=a.getJVM(),d=c.getSystemPropertyNames();a.setStatus(ThreadStatus.ASYNC_WAITING),util.asyncForEach(d,function(d,e){var f=c.getSystemProperty(d);b["setProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;"](a,[c.internString(d),c.internString(f)],e)},function(c){c?a.throwException(c):a.asyncReturn(b)})},a["mapLibraryName(Ljava/lang/String;)Ljava/lang/String;"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a}(),java_lang_Thread=function(){function a(){}return a["currentThread()Ljava/lang/Thread;"]=function(a){return a.getJVMObject()},a["yield()V"]=function(a){a.setStatus(ThreadStatus.ASYNC_WAITING),setImmediate(function(){a.setStatus(ThreadStatus.RUNNABLE),a.asyncReturn()})},a["sleep(J)V"]=function(a,b){var c=a.currentMethod();a.setStatus(ThreadStatus.ASYNC_WAITING),setTimeout(function(){c===a.currentMethod()&&(a.setStatus(ThreadStatus.RUNNABLE),a.asyncReturn())},b.toNumber())},a["start0()V"]=function(a,b){b["run()V"](b.$thread,null)},a["setNativeName(Ljava/lang/String;)V"]=function(a,b,c){},a["isInterrupted(Z)Z"]=function(a,b,c){var d=b.$thread.isInterrupted();return c&&b.$thread.setInterrupted(!1),d},a["isAlive()Z"]=function(a,b){var c=b.$thread.getStatus();return c!==ThreadStatus.TERMINATED&&c!==ThreadStatus.NEW},a["countStackFrames()I"]=function(a,b){return b.$thread.getStackTrace().length},a["holdsLock(Ljava/lang/Object;)Z"]=function(a,b){var c=b.getMonitor();return c.getOwner()===a},a["dumpThreads([Ljava/lang/Thread;)[[Ljava/lang/StackTraceElement;"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getThreads()[Ljava/lang/Thread;"]=function(a){return util.newArrayFromData(a,a.getBsCl(),"[Ljava/lang/Thread;",a.getThreadPool().getThreads().map(function(a){return a.getJVMObject()}))},a["setPriority0(I)V"]=function(a,b,c){a.signalPriorityChange()},a["stop0(Ljava/lang/Object;)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["suspend0()V"]=function(a,b){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["resume0()V"]=function(a,b){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["interrupt0()V"]=function(a,b){function c(){b.$thread.throwNewException("Ljava/lang/InterruptedException;","interrupt0 called")}var d=b.$thread;b["checkAccess()V"](a,null,function(b){if(b)a.throwException(b);else{var e=d.getStatus();switch(e){case ThreadStatus.NEW:case ThreadStatus.TERMINATED:return a.asyncReturn();case ThreadStatus.BLOCKED:case ThreadStatus.WAITING:case ThreadStatus.TIMED_WAITING:d.setInterrupted(!1);var f=d.getMonitorBlock();return e===ThreadStatus.BLOCKED?(f.unblock(d,!0),c()):f.unwait(d,!1,!0,c),a.asyncReturn();case ThreadStatus.PARKED:a.getJVM().getParker().completelyUnpark(d);default:var g=a.getBsCl().getInitializedClass(a,"Ljava/lang/Thread;"),h=[g.methodLookup("join()V"),g.methodLookup("join(J)V"),g.methodLookup("join(JI)V"),g.methodLookup("sleep(J)V"),g.methodLookup("sleep(JI)V")],i=d.getStackTrace(),j=i[i.length-1].method;return-1!==h.indexOf(j)?(d.setInterrupted(!1),d.throwNewException("Ljava/lang/InterruptedException;","interrupt0 called")):d.setInterrupted(!0),a.asyncReturn()}}})},a}(),java_lang_Throwable=function(){function a(){}return a["fillInStackTrace(I)Ljava/lang/Throwable;"]=function(a,b,c){var d,e=a.getBsCl().getInitializedClass(a,"Ljava/lang/StackTraceElement;"),f=util.newArray(a,a.getBsCl(),"[Ljava/lang/StackTraceElement;",0),g=a.getStackTrace(),h=a.getBsCl();for(g.pop();g.length>0&&!g[g.length-1].method.accessFlags.isNative()&&g[g.length-1].locals[0]===b;)g.pop();for(d=g.length-1;d>=0;d--){var i,j=g[d],k=j.method.cls,l=-1;if(!j.method.isHidden()){if(j.method.accessFlags.isNative())i="Native Method";else{var m=k.getAttribute("SourceFile"),n=j.method.getCodeAttribute(),o=n.getAttribute("LineNumberTable");i=null!=m?m.filename:"unknown",l=null!=o?o.getLineNumber(j.pc):-1}var p=util.newObjectFromClass(a,e);p["java/lang/StackTraceElement/declaringClass"]=util.initString(h,util.ext_classname(k.getInternalName())),p["java/lang/StackTraceElement/methodName"]=util.initString(h,null!=j.method.name?j.method.name:"unknown"),p["java/lang/StackTraceElement/fileName"]=util.initString(h,i),p["java/lang/StackTraceElement/lineNumber"]=l,f.array.push(p)}}return b["java/lang/Throwable/backtrace"]=f,b},a["getStackTraceDepth()I"]=function(a,b){return b["java/lang/Throwable/backtrace"].array.length},a["getStackTraceElement(I)Ljava/lang/StackTraceElement;"]=function(a,b,c){return b["java/lang/Throwable/backtrace"].array[c]},a}(),java_lang_UNIXProcess=function(){function a(){}return a["waitForProcessExit(I)I"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["forkAndExec(I[B[B[BI[BI[B[IZ)I"]=function(a,b){a.throwNewException("Ljava/lang/Error;","Doppio doesn't support forking processes.")},a["destroyProcess(IZ)V"]=function(a,b){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["init()V"]=function(a){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),MemberNameConstants;!function(a){a[a.IS_METHOD=65536]="IS_METHOD",a[a.IS_CONSTRUCTOR=131072]="IS_CONSTRUCTOR",a[a.IS_FIELD=262144]="IS_FIELD",a[a.IS_TYPE=524288]="IS_TYPE",a[a.CALLER_SENSITIVE=1048576]="CALLER_SENSITIVE",a[a.SEARCH_SUPERCLASSES=1048576]="SEARCH_SUPERCLASSES",a[a.SEARCH_INTERFACES=2097152]="SEARCH_INTERFACES",a[a.REFERENCE_KIND_SHIFT=24]="REFERENCE_KIND_SHIFT",a[a.ALL_KINDS=983040]="ALL_KINDS"}(MemberNameConstants||(MemberNameConstants={}));var java_lang_invoke_MethodHandleNatives=function(){function a(){}return a["init(Ljava/lang/invoke/MemberName;Ljava/lang/Object;)V"]=function(a,b,c){var d,e,f,g,h;switch(c.getClass().getInternalName()){case"Ljava/lang/reflect/Method;":var i,j=c;d=j["java/lang/reflect/Method/clazz"],e=d.$cls,g=e.getMethodFromSlot(j["java/lang/reflect/Method/slot"]),f=methodFlags(g)|MemberNameConstants.IS_METHOD,i=g.accessFlags.isStatic()?MethodHandleReferenceKind.INVOKESTATIC:e.accessFlags.isInterface()?MethodHandleReferenceKind.INVOKEINTERFACE:MethodHandleReferenceKind.INVOKEVIRTUAL,f|=i<<MemberNameConstants.REFERENCE_KIND_SHIFT,b["java/lang/invoke/MemberName/clazz"]=d,b["java/lang/invoke/MemberName/flags"]=f,b.vmtarget=g.getVMTargetBridgeMethod(a,i),(i===MethodHandleReferenceKind.INVOKEVIRTUAL||i===MethodHandleReferenceKind.INVOKEINTERFACE)&&(b.vmindex=e.getVMIndexForMethod(g));break;case"Ljava/lang/reflect/Constructor;":var k=c;d=k["java/lang/reflect/Constructor/clazz"],e=d.$cls,g=e.getMethodFromSlot(k["java/lang/reflect/Constructor/slot"]),f=methodFlags(g)|MemberNameConstants.IS_CONSTRUCTOR|MethodHandleReferenceKind.INVOKESPECIAL<<MemberNameConstants.REFERENCE_KIND_SHIFT,b["java/lang/invoke/MemberName/clazz"]=d,b["java/lang/invoke/MemberName/flags"]=f,b.vmtarget=g.getVMTargetBridgeMethod(a,i);break;case"Ljava/lang/reflect/Field;":var l=c;d=l["java/lang/reflect/Field/clazz"],e=d.$cls,h=e.getFieldFromSlot(l["java/lang/reflect/Field/slot"]),f=h.accessFlags.getRawByte()|MemberNameConstants.IS_FIELD,f|=(h.accessFlags.isStatic()?MethodHandleReferenceKind.GETSTATIC:MethodHandleReferenceKind.GETFIELD)<<MemberNameConstants.REFERENCE_KIND_SHIFT,b["java/lang/invoke/MemberName/clazz"]=d,b["java/lang/invoke/MemberName/flags"]=f,b.vmindex=e.getVMIndexForField(h);break;default:a.throwNewException("Ljava/lang/InternalError;","init: Invalid target.")}},a["getConstant(I)I"]=function(a,b){return 0},a["resolve(Ljava/lang/invoke/MemberName;Ljava/lang/Class;)Ljava/lang/invoke/MemberName;"]=function(a,b,c){var d=b["java/lang/invoke/MemberName/type"],e=b["java/lang/invoke/MemberName/name"].toString(),f=b["java/lang/invoke/MemberName/clazz"].$cls,g=b["java/lang/invoke/MemberName/flags"],h=g>>>MemberNameConstants.REFERENCE_KIND_SHIFT;if(null==f||null==e||null==d)return void a.throwNewException("Ljava/lang/IllegalArgumentException;","Invalid MemberName.");switch(g&MemberNameConstants.ALL_KINDS){case MemberNameConstants.IS_CONSTRUCTOR:case MemberNameConstants.IS_METHOD:var i=f.signaturePolymorphicAwareMethodLookup(e+d.toString());if(null!==i)return g|=methodFlags(i),b["java/lang/invoke/MemberName/flags"]=g,b.vmtarget=i.getVMTargetBridgeMethod(a,g>>>MemberNameConstants.REFERENCE_KIND_SHIFT),(h===MethodHandleReferenceKind.INVOKEINTERFACE||h===MethodHandleReferenceKind.INVOKEVIRTUAL)&&(b.vmindex=f.getVMIndexForMethod(i)),
b;a.throwNewException("Ljava/lang/NoSuchMethodError;","Invalid method "+(e+d.toString())+" in class "+f.getExternalName()+".");break;case MemberNameConstants.IS_FIELD:var j=f.fieldLookup(e);if(null!==j)return g|=j.accessFlags.getRawByte(),b["java/lang/invoke/MemberName/flags"]=g,b.vmindex=f.getVMIndexForField(j),b;a.throwNewException("Ljava/lang/NoSuchFieldError;","Invalid method "+e+" in class "+f.getExternalName()+".");break;default:a.throwNewException("Ljava/lang/LinkageError;","resolve member name")}},a["objectFieldOffset(Ljava/lang/invoke/MemberName;)J"]=function(a,b){return-1!==b.vmindex?Long.fromNumber(b.vmindex):void a.throwNewException("Ljava/lang/IllegalStateException;","Attempted to retrieve the object offset for an unresolved or non-object MemberName.")},a["staticFieldOffset(Ljava/lang/invoke/MemberName;)J"]=function(a,b){return-1!==b.vmindex?Long.fromNumber(b.vmindex):void a.throwNewException("Ljava/lang/IllegalStateException;","Attempted to retrieve the object offset for an unresolved or non-object MemberName.")},a["staticFieldBase(Ljava/lang/invoke/MemberName;)Ljava/lang/Object;"]=function(a,b){var c=new(a.getBsCl().getInitializedClass(a,"Ljava/lang/Object;").getConstructor(a))(a);return c.$staticFieldBase=b["java/lang/invoke/MemberName/clazz"].$cls,c},a["getMembers(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Class;I[Ljava/lang/invoke/MemberName;)I"]=function(a,b,c,d,e,f,g,h){function i(b){g>=0?(l<n.length&&initializeMemberName(a,n[l],b),l++):g--}var j,k,l=(0!==(e&MemberNameConstants.SEARCH_SUPERCLASSES),0!==(e&MemberNameConstants.SEARCH_INTERFACES),0),m=b.$cls,n=h.array,o=null!==c?c.toString():null,p=null!==d?d.toString():null;return 0===(e&MemberNameConstants.IS_CONSTRUCTOR)||null!==o&&"<init>"!==o||(j=m.getMethods(),j.forEach(function(a){"<init>"!==a.name||null!==p&&p!==a.rawDescriptor||i(a)})),0!==(e&MemberNameConstants.IS_METHOD)&&(j=m.getMethods(),j.forEach(function(a){"<init>"===a.name||null!==o&&o!==a.name||null!==p&&p!==a.rawDescriptor||i(a)})),0!==(e&MemberNameConstants.IS_FIELD)&&null===p&&(k=m.getFields(),k.forEach(function(a){(null===o||o===a.name)&&i(a)})),l},a["getNamedCon(I[Ljava/lang/Object;)I"]=function(a,b,c){a.setStatus(ThreadStatus.ASYNC_WAITING),a.getBsCl().initializeClass(a,"Ljava/lang/invoke/MethodHandleNatives$Constants;",function(d){if(null!==d){var e=d.getFields().filter(function(a){return a.accessFlags.isStatic()&&a.accessFlags.isFinal()});if(b<e.length){var f=e[b];c.array[0]=util.initString(a.getBsCl(),f.name),a.asyncReturn(d.getConstructor(a)[f.fullName])}else a.asyncReturn(-1)}})},a["getMemberVMInfo(Ljava/lang/invoke/MemberName;)Ljava/lang/Object;"]=function(a,b){var c=util.newArray(a,a.getBsCl(),"[Ljava/lang/Object;",2),d=b["java/lang/invoke/MemberName/flags"],e=(d>>>MemberNameConstants.REFERENCE_KIND_SHIFT,a.getBsCl().getInitializedClass(a,"J"));return c.array[0]=e.createWrapperObject(a,Long.fromNumber(b.vmindex)),c.array[1]=(d&MemberNameConstants.ALL_KINDS&MemberNameConstants.IS_FIELD)>0?b["java/lang/invoke/MemberName/clazz"]:b,c},a["setCallSiteTargetNormal(Ljava/lang/invoke/CallSite;Ljava/lang/invoke/MethodHandle;)V"]=function(a,b,c){b["java/lang/invoke/CallSite/target"]=c},a}(),java_lang_invoke_MethodHandle=function(){function a(){}return a["invokeExact([Ljava/lang/Object;)Ljava/lang/Object;"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsupportedOperationException;","MethodHandle.invokeExact cannot be invoked reflectively")},a["invoke([Ljava/lang/Object;)Ljava/lang/Object;"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsupportedOperationException;","MethodHandle.invoke cannot be invoked reflectively")},a["invokeBasic([Ljava/lang/Object;)Ljava/lang/Object;"]=function(a,b,c){var d,e,f=b["java/lang/invoke/MethodHandle/form"],g=f["java/lang/invoke/LambdaForm/vmentry"];d=g["java/lang/invoke/MemberName/type"].toString(),e=util.getTypes(d),e.pop(),e.shift(),a.setStatus(ThreadStatus.ASYNC_WAITING),g.vmtarget(a,d,[b].concat(util.unboxArguments(a,e,c.array)),function(b,c){b?a.throwException(b):a.asyncReturn(c)})},a}();registerNatives({"java/lang/Class":java_lang_Class,"java/lang/ClassLoader$NativeLibrary":java_lang_ClassLoader$NativeLibrary,"java/lang/ClassLoader":java_lang_ClassLoader,"java/lang/Compiler":java_lang_Compiler,"java/lang/Double":java_lang_Double,"java/lang/Float":java_lang_Float,"java/lang/Object":java_lang_Object,"java/lang/Package":java_lang_Package,"java/lang/ProcessEnvironment":java_lang_ProcessEnvironment,"java/lang/reflect/Array":java_lang_reflect_Array,"java/lang/reflect/Proxy":java_lang_reflect_Proxy,"java/lang/Runtime":java_lang_Runtime,"java/lang/SecurityManager":java_lang_SecurityManager,"java/lang/Shutdown":java_lang_Shutdown,"java/lang/StrictMath":java_lang_StrictMath,"java/lang/String":java_lang_String,"java/lang/System":java_lang_System,"java/lang/Thread":java_lang_Thread,"java/lang/Throwable":java_lang_Throwable,"java/lang/UNIXProcess":java_lang_UNIXProcess,"java/lang/invoke/MethodHandleNatives":java_lang_invoke_MethodHandleNatives,"java/lang/invoke/MethodHandle":java_lang_invoke_MethodHandle});
//# sourceMappingURL=data:application/json;base64,