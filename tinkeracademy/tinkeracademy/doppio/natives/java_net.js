function websocket_status_to_message(a){switch(a){case 1e3:return"Normal closure";case 1001:return"Endpoint is going away";case 1002:return"WebSocket protocol error";case 1003:return"Server received invalid data"}return"Unknown status code or error"}function next_address(){return next_host_address++,next_host_address>4194304e3&&(logging.error("Out of addresses"),next_host_address=4026531840),next_host_address}function pack_address(a){var b,c=0;for(b=3;b>=0;b--)c|=255&a[b],c<<=8;return c}function host_allocate_address(a){var b=next_address();return host_lookup[b]=a,host_reverse_lookup[a]=b,b}function socket_read_async(a,b,c,d,e){var f,g=a.$ws.rQlen(),h=d>g?g:d,i=a.$ws.rQshiftBytes(h);for(f=0;h>f;f++)b.array[c++]=i[f];e(h)}var Doppio=require("../doppiojvm"),logging=Doppio.Debug.Logging,util=Doppio.VM.Util,ThreadStatus=Doppio.VM.Enums.ThreadStatus,debug=logging.debug,host_lookup={},host_reverse_lookup={},next_host_address=4026531840,java_net_Inet4Address=function(){function a(){}return a["init()V"]=function(a){},a}(),java_net_Inet4AddressImpl=function(){function a(){}return a["getLocalHostName()Ljava/lang/String;"]=function(a,b){return a.getJVM().internString("localhost")},a["lookupAllHostAddr(Ljava/lang/String;)[Ljava/net/InetAddress;"]=function(a,b,c){var d=util.newObject(a,a.getBsCl(),"Ljava/net/Inet4Address;");d["<init>(Ljava/lang/String;I)V"](a,[c,host_allocate_address(c.toString())],function(b){b?a.throwException(b):a.asyncReturn(util.newArrayFromData(a,a.getBsCl(),"[Ljava/net/InetAddress;",[d]))})},a["getHostByAddr([B)Ljava/lang/String;"]=function(a,b,c){var d=host_reverse_lookup[pack_address(c.array)];return null==d?null:util.initString(a.getBsCl(),""+d)},a["isReachable0([BI[BI)Z"]=function(a,b,c,d,e,f){return!1},a}(),java_net_Inet6Address=function(){function a(){}return a["init()V"]=function(a){},a}(),java_net_InetAddress=function(){function a(){}return a["init()V"]=function(a){},a}(),java_net_InetAddressImplFactory=function(){function a(){}return a["isIPv6Supported()Z"]=function(a){return!1},a}(),java_net_PlainSocketImpl=function(){function a(){}return a["socketCreate(Z)V"]=function(a,b,c){if(util.are_in_browser()){var d=b["java/net/SocketImpl/fd"];d["java/io/FileDescriptor/fd"]=8374,b.$ws=new Websock,b.$is_shutdown=!1}else a.throwNewException("Ljava/io/IOException;","WebSockets are disabled")},a["socketConnect(Ljava/net/InetAddress;II)V"]=function(a,b,c,d,e){var f,g=c["java/net/InetAddress/holder"],h=g["java/net/InetAddress$InetAddressHolder/address"],i="ws://";if(null==host_lookup[h]){for(f=3;f>=0;f--){var j=8*f;i+=""+((h&255<<j)>>>j)+"."}i=i.substring(0,i.length-1)}else i+=host_lookup[h];i+=":"+d,a.setStatus(ThreadStatus.ASYNC_WAITING);var k=0,l=function(){window.clearTimeout(k),b.$ws.on("open",function(){}),b.$ws.on("close",function(){}),b.$ws.on("error",function(){})},m=function(b){return function(c){l(),a.throwNewException("Ljava/io/IOException;",b+": "+c)}},n=function(b){return function(c){l(),a.throwNewException("Ljava/io/IOException;",b+": "+websocket_status_to_message(c.status))}};b.$ws.on("open",function(){l(),a.asyncReturn()}),b.$ws.on("close",n("Connection failed! (Closed)")),0===e&&(e=1e4),k=setTimeout(m("Connection timeout!"),e);try{b.$ws.open(i)}catch(o){m("Connection failed! (exception)")(o.message)}},a["socketBind(Ljava/net/InetAddress;I)V"]=function(a,b,c,d){a.throwNewException("Ljava/io/IOException;","WebSockets doesn't know how to bind")},a["socketListen(I)V"]=function(a,b,c){a.throwNewException("Ljava/io/IOException;","WebSockets doesn't know how to listen")},a["socketAccept(Ljava/net/SocketImpl;)V"]=function(a,b,c){a.throwNewException("Ljava/io/IOException;","WebSockets doesn't know how to accept")},a["socketAvailable()I"]=function(a,b){a.setStatus(ThreadStatus.ASYNC_WAITING),setImmediate(function(){a.asyncReturn(b.$ws.rQlen())})},a["socketClose0(Z)V"]=function(a,b,c){b.$ws.close()},a["socketShutdown(I)V"]=function(a,b,c){b.$is_shutdown=!0},a["initProto()V"]=function(a){},a["socketSetOption0(IZLjava/lang/Object;)V"]=function(a,b,c,d,e){},a["socketGetOption(ILjava/lang/Object;)I"]=function(a,b,c,d){return 0},a["socketSendUrgentData(I)V"]=function(a,b,c){b.$ws.send(c)},a}(),java_net_SocketInputStream=function(){function a(){}return a["socketRead0(Ljava/io/FileDescriptor;[BIII)I"]=function(a,b,c,d,e,f,g){var h=b["java/net/SocketInputStream/impl"];h.$is_shutdown===!0?a.throwNewException("Ljava/io/IOException;","Socket is shutdown."):(a.setStatus(ThreadStatus.ASYNC_WAITING),setTimeout(function(){socket_read_async(h,d,e,f,function(b){a.asyncReturn(b)})},g))},a["init()V"]=function(a){},a}(),java_net_SocketOutputStream=function(){function a(){}return a["socketWrite0(Ljava/io/FileDescriptor;[BII)V"]=function(a,b,c,d,e,f){var g=b["java/net/SocketOutputStream/impl"];g.$is_shutdown===!0?a.throwNewException("Ljava/io/IOException;","Socket is shutdown."):g.$ws.get_raw_state()!==WebSocket.OPEN?a.throwNewException("Ljava/io/IOException;","Connection isn't open"):(g.$ws.send(d.array.slice(e,e+f)),a.setStatus(ThreadStatus.ASYNC_WAITING),setImmediate(function(){a.asyncReturn()}))},a["init()V"]=function(a){},a}(),java_net_NetworkInterface=function(){function a(){}return a["init()V"]=function(a){},a["getAll()[Ljava/net/NetworkInterface;"]=function(a){var b=a.getBsCl();a["import"](["Ljava/net/NetworkInterface;","Ljava/net/InetAddress;"],function(c){var d=c[0],e=c[1],f=a.getJVM().internString("doppio1");e["getByAddress(Ljava/lang/String;[B)Ljava/net/InetAddress;"](a,[f,util.newArrayFromData(a,a.getBsCl(),"[B",[127,1,1,1])],function(c,e){if(c)a.throwException(c);else{var g=new d(a);g["<init>(Ljava/lang/String;I[Ljava/net/InetAddress;)V"](a,[f,0,util.newArrayFromData(a,b,"[Ljava/net/InetAddress;",[e])],function(c){c?a.throwException(c):a.asyncReturn(util.newArrayFromData(a,b,"[Ljava/net/NetworkInterface;",[g]))})}})})},a["getMacAddr0([BLjava/lang/String;I)[B"]=function(a,b,c,d){return util.newArrayFromData(a,a.getBsCl(),"[B",[1,1,1,1,1,1])},a}();registerNatives({"java/net/Inet4Address":java_net_Inet4Address,"java/net/Inet4AddressImpl":java_net_Inet4AddressImpl,"java/net/Inet6Address":java_net_Inet6Address,"java/net/InetAddress":java_net_InetAddress,"java/net/InetAddressImplFactory":java_net_InetAddressImplFactory,"java/net/PlainSocketImpl":java_net_PlainSocketImpl,"java/net/SocketInputStream":java_net_SocketInputStream,"java/net/SocketOutputStream":java_net_SocketOutputStream,"java/net/NetworkInterface":java_net_NetworkInterface});
//# sourceMappingURL=data:application/json;base64,