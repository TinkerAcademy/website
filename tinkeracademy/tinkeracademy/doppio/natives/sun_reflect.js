function getCallerClass(a,b){for(var c=a.getStackTrace(),d=c.length-1-b,e=c[d];0===e.method.fullSignature.indexOf("java/lang/reflect/Method/invoke");){if(0===d)return null;e=c[--d]}return e.method.cls.getClassObject(a)}var Doppio=require("../doppiojvm"),util=Doppio.VM.Util,ThreadStatus=Doppio.VM.Enums.ThreadStatus,assert=Doppio.Debug.Assert,sun_reflect_ConstantPool=function(){function a(){}return a["getSize0(Ljava/lang/Object;)I"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["getClassAt0(Ljava/lang/Object;I)Ljava/lang/Class;"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getClassAtIfLoaded0(Ljava/lang/Object;I)Ljava/lang/Class;"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getMethodAt0(Ljava/lang/Object;I)Ljava/lang/reflect/Member;"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getMethodAtIfLoaded0(Ljava/lang/Object;I)Ljava/lang/reflect/Member;"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getFieldAt0(Ljava/lang/Object;I)Ljava/lang/reflect/Field;"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getFieldAtIfLoaded0(Ljava/lang/Object;I)Ljava/lang/reflect/Field;"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getMemberRefInfoAt0(Ljava/lang/Object;I)[Ljava/lang/String;"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getIntAt0(Ljava/lang/Object;I)I"]=function(a,b,c,d){return c.get(d).value},a["getLongAt0(Ljava/lang/Object;I)J"]=function(a,b,c,d){return c.get(d).value},a["getFloatAt0(Ljava/lang/Object;I)F"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["getDoubleAt0(Ljava/lang/Object;I)D"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["getStringAt0(Ljava/lang/Object;I)Ljava/lang/String;"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getUTF8At0(Ljava/lang/Object;I)Ljava/lang/String;"]=function(a,b,c,d){return util.initString(a.getBsCl(),c.get(d).value)},a}(),sun_reflect_NativeConstructorAccessorImpl=function(){function a(){}return a["newInstance0(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)Ljava/lang/Object;"]=function(a,b,c){var d=b["java/lang/reflect/Constructor/clazz"],e=b["java/lang/reflect/Constructor/slot"];a.setStatus(ThreadStatus.ASYNC_WAITING),d.$cls.initialize(a,function(b){if(null!==b){var d=b.getMethodFromSlot(e),f=new(b.getConstructor(a))(a),g=function(b){b?a.getBsCl().initializeClass(a,"Ljava/lang/reflect/InvocationTargetException;",function(c){if(null!==c){var d=new(c.getConstructor(a))(a);d["<init>(Ljava/lang/Throwable;)V"](a,[b],function(b){a.throwException(b?b:d)})}}):a.asyncReturn(f)};f[d.signature](a,c?c.array:null,g)}},!0)},a}(),sun_reflect_NativeMethodAccessorImpl=function(){function a(){}return a["invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;"]=function(a,b,c,d){var e=b["java/lang/reflect/Method/clazz"].$cls,f=b["java/lang/reflect/Method/slot"],g=b["java/lang/reflect/Method/returnType"],h=e.getMethodFromSlot(f),i=[],j=function(b,c){b?a.getBsCl().initializeClass(a,"Ljava/lang/reflect/InvocationTargetException;",function(c){if(null!==c){var d=new(c.getConstructor(a))(a);d["<init>(Ljava/lang/Throwable;)V"](a,[b],function(b){a.throwException(b?b:d)})}}):util.is_primitive_type(h.returnType)?"V"===h.returnType?a.asyncReturn(null):a.asyncReturn(g.$cls.createWrapperObject(a,c)):a.asyncReturn(c)};null!==d&&(i=util.unboxArguments(a,h.parameterTypes,d.array)),a.setStatus(ThreadStatus.ASYNC_WAITING),h.accessFlags.isStatic()?e.getConstructor(a)[h.fullSignature](a,i,j):c[h.signature](a,i,j)},a}(),sun_reflect_Reflection=function(){function a(){}return a["getCallerClass()Ljava/lang/Class;"]=function(a){return getCallerClass(a,2)},a["getClassAccessFlags(Ljava/lang/Class;)I"]=function(a,b){return b.$cls.accessFlags.getRawByte()},a["getCallerClass(I)Ljava/lang/Class;"]=getCallerClass,a}();registerNatives({"sun/reflect/ConstantPool":sun_reflect_ConstantPool,"sun/reflect/NativeConstructorAccessorImpl":sun_reflect_NativeConstructorAccessorImpl,"sun/reflect/NativeMethodAccessorImpl":sun_reflect_NativeMethodAccessorImpl,"sun/reflect/Reflection":sun_reflect_Reflection});
//# sourceMappingURL=data:application/json;base64,