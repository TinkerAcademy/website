function doPrivileged(a,b,c){a.setStatus(ThreadStatus.ASYNC_WAITING),b["run()Ljava/lang/Object;"](a,null,function(b,c){if(b){var d=b.getClass(),e=a.getBsCl(),f=e.getInitializedClass(a,"Ljava/lang/Error;"),g=e.getInitializedClass(a,"Ljava/lang/RuntimeException;");null!==f&&d.isCastable(f)||null!==g&&d.isCastable(g)?a.throwException(b):a["import"]("Ljava/security/PrivilegedActionException;",function(c){var d=new c(a);a.setStatus(ThreadStatus.ASYNC_WAITING),d["<init>(Ljava/lang/Exception;)V"](a,[b],function(b){b?a.throwException(b):a.throwException(d)})},!1)}else a.asyncReturn(c)})}var Doppio=require("../doppiojvm"),ThreadStatus=Doppio.VM.Enums.ThreadStatus,java_security_AccessController=function(){function a(){}return a["getStackAccessControlContext()Ljava/security/AccessControlContext;"]=function(a){return null},a["getInheritedAccessControlContext()Ljava/security/AccessControlContext;"]=function(a){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;"]=doPrivileged,a["doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;"]=doPrivileged,a["doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;"]=doPrivileged,a["doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;"]=doPrivileged,a}();registerNatives({"java/security/AccessController":java_security_AccessController});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9uYXRpdmVzL2phdmFfc2VjdXJpdHkudHMiXSwibmFtZXMiOlsiZG9Qcml2aWxlZ2VkIiwiamF2YV9zZWN1cml0eV9BY2Nlc3NDb250cm9sbGVyIiwiamF2YV9zZWN1cml0eV9BY2Nlc3NDb250cm9sbGVyLmdldFN0YWNrQWNjZXNzQ29udHJvbENvbnRleHQoKUxqYXZhL3NlY3VyaXR5L0FjY2Vzc0NvbnRyb2xDb250ZXh0OyIsImphdmFfc2VjdXJpdHlfQWNjZXNzQ29udHJvbGxlci5nZXRJbmhlcml0ZWRBY2Nlc3NDb250cm9sQ29udGV4dCgpTGphdmEvc2VjdXJpdHkvQWNjZXNzQ29udHJvbENvbnRleHQ7Il0sIm1hcHBpbmdzIjoiQUFVQSxRQUFBLGNBQXNCLEVBQW1CLEVBQWlELEdBQ3hGQSxFQUFPQSxVQUFVQSxhQUFhQSxlQUM5QkEsRUFBT0EsMkJBQTJCQSxFQUFRQSxLQUFNQSxTQUFDQSxFQUFrQ0EsR0FDakZBLEdBQUlBLEVBQUdBLENBR0xBLEdBQUlBLEdBQU9BLEVBQUVBLFdBQ1RBLEVBQU9BLEVBQU9BLFVBQ2RBLEVBQVNBLEVBQUtBLG9CQUFvQkEsRUFBUUEscUJBQzFDQSxFQUFRQSxFQUFLQSxvQkFBb0JBLEVBQVFBLCtCQUM3QkEsUUFBWEEsR0FBbUJBLEVBQUtBLFdBQVdBLElBQXVCQSxPQUFWQSxHQUFrQkEsRUFBS0EsV0FBV0EsR0FDckZBLEVBQU9BLGVBQWVBLEdBR3RCQSxFQUFBQSxVQUFjQSw0Q0FBNkNBLFNBQUNBLEdBQzFEQSxHQUFJQSxHQUFPQSxHQUFJQSxHQUFRQSxFQUN2QkEsR0FBT0EsVUFBVUEsYUFBYUEsZUFDOUJBLEVBQUtBLGtDQUFrQ0EsR0FBd0NBLEdBQUlBLFNBQUNBLEdBQzlFQSxFQUVGQSxFQUFPQSxlQUFlQSxHQUV0QkEsRUFBT0EsZUFBZUEsT0FHekJBLE9BSUxBLEdBQU9BLFlBQVlBLEtBdEN6QixHQUFZLFFBQU0sUUFBTSxnQkFNakIsYUFBZSxPQUFPLEdBQUcsTUFBTSxhQXFDdEMsK0JBQUEsV0FBQUMsUUFBQUEsTUFpQkFBLE1BVmdCQSxHQUFBQSxzRUFBZEEsU0FBbUZBLEdBQ2pGQyxNQUFPQSxPQUdLRCxFQUFBQSwwRUFBZEEsU0FBdUZBLEdBR3JGRSxNQUZBQSxHQUFPQSxrQkFBa0JBLG1DQUFvQ0Esa0NBRXREQSxNQVpLRixFQUFBQSxvRUFBbUpBLGFBQ25KQSxFQUFBQSx3R0FBeU9BLGFBQ3pPQSxFQUFBQSw2RUFBcUtBLGFBQ3JLQSxFQUFBQSxpSEFBMlBBLGFBWTNRQSxJQUVBLGtCQUNFLGlDQUFrQyIsImZpbGUiOiJqYXZhX3NlY3VyaXR5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpWTVR5cGVzID0gcmVxdWlyZSgnLi4vLi4vaW5jbHVkZXMvSlZNVHlwZXMnKTtcbmltcG9ydCAqIGFzIERvcHBpbyBmcm9tICcuLi9kb3BwaW9qdm0nO1xuaW1wb3J0IEpWTVRocmVhZCA9IERvcHBpby5WTS5UaHJlYWRpbmcuSlZNVGhyZWFkO1xuaW1wb3J0IFJlZmVyZW5jZUNsYXNzRGF0YSA9IERvcHBpby5WTS5DbGFzc0ZpbGUuUmVmZXJlbmNlQ2xhc3NEYXRhO1xuaW1wb3J0IElKVk1Db25zdHJ1Y3RvciA9IERvcHBpby5WTS5DbGFzc0ZpbGUuSUpWTUNvbnN0cnVjdG9yO1xuaW1wb3J0IGxvZ2dpbmcgPSBEb3BwaW8uRGVidWcuTG9nZ2luZztcbmltcG9ydCB1dGlsID0gRG9wcGlvLlZNLlV0aWw7XG5pbXBvcnQgVGhyZWFkU3RhdHVzID0gRG9wcGlvLlZNLkVudW1zLlRocmVhZFN0YXR1cztcbmRlY2xhcmUgdmFyIHJlZ2lzdGVyTmF0aXZlczogKGRlZnM6IGFueSkgPT4gdm9pZDtcblxuZnVuY3Rpb24gZG9Qcml2aWxlZ2VkKHRocmVhZDogSlZNVGhyZWFkLCBhY3Rpb246IEpWTVR5cGVzLmphdmFfc2VjdXJpdHlfUHJpdmlsZWdlZEFjdGlvbiwgY3R4PzogSlZNVHlwZXMuamF2YV9zZWN1cml0eV9BY2Nlc3NDb250cm9sQ29udGV4dCk6IHZvaWQge1xuICB0aHJlYWQuc2V0U3RhdHVzKFRocmVhZFN0YXR1cy5BU1lOQ19XQUlUSU5HKTtcbiAgYWN0aW9uWydydW4oKUxqYXZhL2xhbmcvT2JqZWN0OyddKHRocmVhZCwgbnVsbCwgKGU/OiBKVk1UeXBlcy5qYXZhX2xhbmdfVGhyb3dhYmxlLCBydj86IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QpOiB2b2lkID0+IHtcbiAgICBpZiAoZSkge1xuICAgICAgLy8gSWYgZSBpcyBhbiBVTkNIRUNLRUQgZXhjZXB0aW9uLCByZS10aHJvdyBpdC5cbiAgICAgIC8vIGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2phdmFzZS90dXRvcmlhbC9lc3NlbnRpYWwvZXhjZXB0aW9ucy9ydW50aW1lLmh0bWxcbiAgICAgIGxldCBlQ2xzID0gZS5nZXRDbGFzcygpO1xuICAgICAgbGV0IGJzQ2wgPSB0aHJlYWQuZ2V0QnNDbCgpO1xuICAgICAgbGV0IGVyckNscyA9IGJzQ2wuZ2V0SW5pdGlhbGl6ZWRDbGFzcyh0aHJlYWQsICdMamF2YS9sYW5nL0Vycm9yOycpO1xuICAgICAgbGV0IHJlQ2xzID0gYnNDbC5nZXRJbml0aWFsaXplZENsYXNzKHRocmVhZCwgJ0xqYXZhL2xhbmcvUnVudGltZUV4Y2VwdGlvbjsnKTtcbiAgICAgIGlmICgoZXJyQ2xzICE9PSBudWxsICYmIGVDbHMuaXNDYXN0YWJsZShlcnJDbHMpKSB8fCAocmVDbHMgIT09IG51bGwgJiYgZUNscy5pc0Nhc3RhYmxlKHJlQ2xzKSkpIHtcbiAgICAgICAgdGhyZWFkLnRocm93RXhjZXB0aW9uKGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSXQgaXMgYSBjaGVja2VkIGV4Y2VwdGlvbi4gV3JhcCBleGNlcHRpb24gaW4gYSBQcml2aWxlZ2VkQWN0aW9uRXhjZXB0aW9uLCBhbmQgdGhyb3cgaXQuXG4gICAgICAgIHRocmVhZC5pbXBvcnQoJ0xqYXZhL3NlY3VyaXR5L1ByaXZpbGVnZWRBY3Rpb25FeGNlcHRpb247JywgKHBhZUNvbnM6IElKVk1Db25zdHJ1Y3RvcjxKVk1UeXBlcy5qYXZhX3NlY3VyaXR5X1ByaXZpbGVnZWRBY3Rpb25FeGNlcHRpb24+KSA9PiB7XG4gICAgICAgICAgdmFyIGVvYmogPSBuZXcgcGFlQ29ucyh0aHJlYWQpO1xuICAgICAgICAgIHRocmVhZC5zZXRTdGF0dXMoVGhyZWFkU3RhdHVzLkFTWU5DX1dBSVRJTkcpO1xuICAgICAgICAgIGVvYmpbJzxpbml0PihMamF2YS9sYW5nL0V4Y2VwdGlvbjspViddKHRocmVhZCwgWzxKVk1UeXBlcy5qYXZhX2xhbmdfRXhjZXB0aW9uPiBlXSwgKGU/OiBKVk1UeXBlcy5qYXZhX2xhbmdfVGhyb3dhYmxlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICAvLyBGYWlsZWQgdG8gY29uc3RydWN0IGEgUHJpdmlsZWdlZEFjdGlvbkV4Y2VwdGlvbj8gRGFuZy5cbiAgICAgICAgICAgICAgdGhyZWFkLnRocm93RXhjZXB0aW9uKGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyZWFkLnRocm93RXhjZXB0aW9uKGVvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZvcndhcmQgcmV0dXJuIHZhbHVlLlxuICAgICAgdGhyZWFkLmFzeW5jUmV0dXJuKHJ2KTtcbiAgICB9XG4gIH0pO1xufVxuXG5jbGFzcyBqYXZhX3NlY3VyaXR5X0FjY2Vzc0NvbnRyb2xsZXIge1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2RvUHJpdmlsZWdlZChMamF2YS9zZWN1cml0eS9Qcml2aWxlZ2VkQWN0aW9uOylMamF2YS9sYW5nL09iamVjdDsnOiAodGhyZWFkOiBKVk1UaHJlYWQsIGFjdGlvbjogSlZNVHlwZXMuamF2YV9zZWN1cml0eV9Qcml2aWxlZ2VkQWN0aW9uKSA9PiB2b2lkID0gZG9Qcml2aWxlZ2VkO1xuICBwdWJsaWMgc3RhdGljICdkb1ByaXZpbGVnZWQoTGphdmEvc2VjdXJpdHkvUHJpdmlsZWdlZEFjdGlvbjtMamF2YS9zZWN1cml0eS9BY2Nlc3NDb250cm9sQ29udGV4dDspTGphdmEvbGFuZy9PYmplY3Q7JzogKHRocmVhZDogSlZNVGhyZWFkLCBhY3Rpb246IEpWTVR5cGVzLmphdmFfc2VjdXJpdHlfUHJpdmlsZWdlZEFjdGlvbiwgY3R4OiBKVk1UeXBlcy5qYXZhX3NlY3VyaXR5X0FjY2Vzc0NvbnRyb2xDb250ZXh0KSA9PiB2b2lkID0gZG9Qcml2aWxlZ2VkO1xuICBwdWJsaWMgc3RhdGljICdkb1ByaXZpbGVnZWQoTGphdmEvc2VjdXJpdHkvUHJpdmlsZWdlZEV4Y2VwdGlvbkFjdGlvbjspTGphdmEvbGFuZy9PYmplY3Q7JzogKHRocmVhZDogSlZNVGhyZWFkLCBhY3Rpb246IEpWTVR5cGVzLmphdmFfc2VjdXJpdHlfUHJpdmlsZWdlZEV4Y2VwdGlvbkFjdGlvbikgPT4gdm9pZCA9IGRvUHJpdmlsZWdlZDtcbiAgcHVibGljIHN0YXRpYyAnZG9Qcml2aWxlZ2VkKExqYXZhL3NlY3VyaXR5L1ByaXZpbGVnZWRFeGNlcHRpb25BY3Rpb247TGphdmEvc2VjdXJpdHkvQWNjZXNzQ29udHJvbENvbnRleHQ7KUxqYXZhL2xhbmcvT2JqZWN0Oyc6ICh0aHJlYWQ6IEpWTVRocmVhZCwgYWN0aW9uOiBKVk1UeXBlcy5qYXZhX3NlY3VyaXR5X1ByaXZpbGVnZWRFeGNlcHRpb25BY3Rpb24sIGN0eDogSlZNVHlwZXMuamF2YV9zZWN1cml0eV9BY2Nlc3NDb250cm9sQ29udGV4dCkgPT4gdm9pZCA9IGRvUHJpdmlsZWdlZDtcblxuICBwdWJsaWMgc3RhdGljICdnZXRTdGFja0FjY2Vzc0NvbnRyb2xDb250ZXh0KClMamF2YS9zZWN1cml0eS9BY2Nlc3NDb250cm9sQ29udGV4dDsnKHRocmVhZDogSlZNVGhyZWFkKTogSlZNVHlwZXMuamF2YV9zZWN1cml0eV9BY2Nlc3NDb250cm9sQ29udGV4dCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdnZXRJbmhlcml0ZWRBY2Nlc3NDb250cm9sQ29udGV4dCgpTGphdmEvc2VjdXJpdHkvQWNjZXNzQ29udHJvbENvbnRleHQ7Jyh0aHJlYWQ6IEpWTVRocmVhZCk6IEpWTVR5cGVzLmphdmFfc2VjdXJpdHlfQWNjZXNzQ29udHJvbENvbnRleHQge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgLy8gU2F0aXNmeSBUeXBlU2NyaXB0IHJldHVybiB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbn1cblxucmVnaXN0ZXJOYXRpdmVzKHtcbiAgJ2phdmEvc2VjdXJpdHkvQWNjZXNzQ29udHJvbGxlcic6IGphdmFfc2VjdXJpdHlfQWNjZXNzQ29udHJvbGxlclxufSk7XG4iXX0=