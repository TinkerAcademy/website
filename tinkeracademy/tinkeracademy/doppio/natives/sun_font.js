var Doppio=require("../doppiojvm"),Long=Doppio.VM.Long,sun_font_FreetypeFontScaler=function(){function a(){}return a["initIDs(Ljava/lang/Class;)V"]=function(a,b){},a["initNativeScaler(Lsun/font/Font2D;IIZI)J"]=function(a,b,c,d,e,f,g){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getFontMetricsNative(Lsun/font/Font2D;JJ)Lsun/font/StrikeMetrics;"]=function(a,b,c,d,e){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getGlyphAdvanceNative(Lsun/font/Font2D;JJI)F"]=function(a,b,c,d,e,f){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["getGlyphMetricsNative(Lsun/font/Font2D;JJILjava/awt/geom/Point2D$Float;)V"]=function(a,b,c,d,e,f,g){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["getGlyphImageNative(Lsun/font/Font2D;JJI)J"]=function(a,b,c,d,e,f){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getGlyphOutlineBoundsNative(Lsun/font/Font2D;JJI)Ljava/awt/geom/Rectangle2D$Float;"]=function(a,b,c,d,e,f){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getGlyphOutlineNative(Lsun/font/Font2D;JJIFF)Ljava/awt/geom/GeneralPath;"]=function(a,b,c,d,e,f,g,h){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getGlyphVectorOutlineNative(Lsun/font/Font2D;JJ[IIFF)Ljava/awt/geom/GeneralPath;"]=function(a,b,c,d,e,f,g,h,i){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getGlyphPointNative(Lsun/font/Font2D;JJII)Ljava/awt/geom/Point2D$Float;"]=function(a,b,c,d,e,f,g){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getLayoutTableCacheNative(J)J"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["disposeNativeScaler(Lsun/font/Font2D;J)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["getNumGlyphsNative(J)I"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["getMissingGlyphCodeNative(J)I"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["getUnitsPerEMNative(J)J"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["createScalerContextNative(J[DIIFF)J"]=function(a,b,c,d,e,f,g,h,i){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a}(),sun_font_StrikeCache=function(){function a(){}return a["getGlyphCacheDescription([J)V"]=function(a,b){b.array[0]=Long.fromInt(8),b.array[1]=Long.fromInt(8)},a["freeIntPointer(I)V"]=function(a,b){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["freeLongPointer(J)V"]=function(a,b){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["freeIntMemory([IJ)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["freeLongMemory([JJ)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}();registerNatives({"sun/font/FreetypeFontScaler":sun_font_FreetypeFontScaler,"sun/font/StrikeCache":sun_font_StrikeCache});
//# sourceMappingURL=data:application/json;base64,