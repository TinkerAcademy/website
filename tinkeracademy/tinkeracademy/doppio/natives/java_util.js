function OpenItem(a,b){var c=NextId++;return b[c]=a,c}function GetItem(a,b,c,d){var e=c[b];return e?e:(a.throwNewException("Ljava/lang/IllegalStateException;",d),null)}function CloseItem(a,b){delete b[a]}function OpenZipFile(a){return OpenItem(a,ZipFiles)}function CloseZipFile(a){CloseItem(a,ZipFiles)}function GetZipFile(a,b){return GetItem(a,b,ZipFiles,"ZipFile not found.")}function OpenZipEntry(a){return OpenItem(a,ZipEntries)}function CloseZipEntry(a){CloseItem(a,ZipEntries)}function GetZipEntry(a,b){return GetItem(a,b,ZipEntries,"Invalid ZipEntry.")}function OpenZStream(a){return OpenItem(a,ZStreams)}function CloseZStream(a){CloseItem(a,ZStreams)}function GetZStream(a,b){return GetItem(a,b,ZStreams,"Inflater not found.")}function isUint8Array(a){return a&&"undefined"!=typeof Uint8Array&&a instanceof Uint8Array?!0:!1}function isInt8Array(a){return a&&"undefined"!=typeof Int8Array&&a instanceof Int8Array?!0:!1}function i82u8(a,b,c){if(isInt8Array(a))return new Uint8Array(a.buffer,a.byteOffset+b,c);if(Array.isArray(a)){if("undefined"!=typeof Uint8Array){var d=new Int8Array(c);return 0===b&&c===a.length?d.set(a,0):d.set(a.slice(b,b+c),0),new Uint8Array(d.buffer)}for(var e=new Array(c),f=0;c>f;f++)e[f]=255&a[b+f];return e}throw new TypeError("Invalid array.")}function u82i8(a,b,c){if(isUint8Array(a))return new Int8Array(a.buffer,a.byteOffset+b,c);if(Array.isArray(a)){if("undefined"!=typeof Int8Array){var d=new Uint8Array(c);return 0===b&&c===a.length?d.set(a,0):d.set(a.slice(b,b+c),0),new Int8Array(d.buffer)}for(var e=new Array(c),f=0;c>f;f++)e[f]=a[b+f],e[f]>127&&(e[f]|=4294967168);return e}throw new TypeError("Invalid array.")}function buff2i8(a){var b=BFSUtils.buffer2Arrayish(a);return u82i8(b,0,b.length)}var DoppioJVM=require("../doppiojvm"),util=DoppioJVM.VM.Util,Long=DoppioJVM.VM.Long,AbstractClasspathJar=DoppioJVM.VM.ClassFile.AbstractClasspathJar,BrowserFS=require("browserfs"),path=require("path"),fs=require("fs"),ThreadStatus=DoppioJVM.VM.Enums.ThreadStatus,inflate=require("pako/lib/zlib/inflate"),crc32=require("pako/lib/zlib/crc32"),adler32=require("pako/lib/zlib/adler32"),ZStreamCons=require("pako/lib/zlib/zstream"),BFSUtils=BrowserFS.BFSRequire("bfs_utils"),MAX_WBITS=15,ZipFiles={},ZipEntries={},ZStreams={},NextId=1,CanUseCopyFastPath=!1;if("undefined"!=typeof Int8Array){var i8arr=new Int8Array(1),b=new Buffer(i8arr.buffer);i8arr[0]=100,CanUseCopyFastPath=i8arr[0]==b.readInt8(0)}var java_util_concurrent_atomic_AtomicLong=function(){function a(){}return a["VMSupportsCS8()Z"]=function(a){return!0},a}(),java_util_jar_JarFile=function(){function a(){}return a["getMetaInfEntryNames()[Ljava/lang/String;"]=function(a,b){var c=GetZipFile(a,b["java/util/zip/ZipFile/jzfile"].toNumber());if(c){if(!c.existsSync("/META-INF"))return null;for(var d=["/META-INF"],e=a.getBsCl(),f=[util.initString(e,"META-INF/")];d.length>0;){for(var g=d.pop(),h=c.readdirSync(g),i=0;i<h.length;i++){var j=g+"/"+h[i];c.statSync(j,!1).isDirectory()?(d.push(j),f.push(util.initString(e,j.slice(1)+"/"))):f.push(util.initString(e,j.slice(1)))}return util.newArrayFromData(a,e,"[Ljava/lang/String;",f)}}},a}(),java_util_logging_FileHandler=function(){function a(){}return a["isSetUID()Z"]=function(a){return!1},a}(),java_util_TimeZone=function(){function a(){}return a["getSystemTimeZoneID(Ljava/lang/String;)Ljava/lang/String;"]=function(a,b){var c=(new Date).getTimezoneOffset()/60;return a.getJVM().internString("GMT"+(c>0?"-":"+")+c)},a["getSystemGMTOffsetID()Ljava/lang/String;"]=function(a){return null},a}(),java_util_zip_Adler32=function(){function a(){}return a["update(II)I"]=function(a,b,c){return adler32(b,[255&c],1,0)},a["updateBytes(I[BII)I"]=function(a,b,c,d,e){return adler32(b,i82u8(c.array,d,e),e,0)},a["updateByteBuffer(IJII)I"]=function(a,b,c,d,e){var f=a.getJVM().getHeap(),g=BFSUtils.buffer2Arrayish(f.get_buffer(c.toNumber()+d,e));return adler32(b,g,g.length,0)},a}(),java_util_zip_CRC32=function(){function a(){}return a["update(II)I"]=function(a,b,c){return crc32(b,[255&c],1,0)},a["updateBytes(I[BII)I"]=function(a,b,c,d,e){return crc32(b,i82u8(c.array,d,e),e,0)},a["updateByteBuffer(IJII)I"]=function(a,b,c,d,e){var f=a.getJVM().getHeap(),g=BFSUtils.buffer2Arrayish(f.get_buffer(c.toNumber()+d,e));return crc32(b,g,g.length,0)},a}(),java_util_zip_Deflater=function(){function a(){}return a["initIDs()V"]=function(a){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["init(IIZ)J"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["setDictionary(J[BII)V"]=function(a,b,c,d,e){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["deflateBytes(J[BIII)I"]=function(a,b,c,d,e,f,g){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["getAdler(J)I"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["reset(J)V"]=function(a,b){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["end(J)V"]=function(a,b){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),java_util_zip_Inflater=function(){function a(){}return a["initIDs()V"]=function(a){},a["init(Z)J"]=function(a,b){var c=new ZStreamCons,d=inflate.inflateInit2(c,b?-MAX_WBITS:MAX_WBITS);switch(d){case 0:var e=OpenZStream(c);return Long.fromNumber(e);default:var f=null!==c.msg?c.msg:-2==d?"inflateInit2 returned Z_STREAM_ERROR":"unknown error initializing zlib library";a.throwNewException("Ljava/lang/InternalError;",f)}},a["setDictionary(J[BII)V"]=function(a,b,c,d,e){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["inflateBytes(J[BII)I"]=function(a,b,c,d,e,f){var g=GetZStream(a,c.toNumber());if(null!=g){var h=b["java/util/zip/Inflater/buf"],i=b["java/util/zip/Inflater/off"],j=b["java/util/zip/Inflater/len"];if(0===j||0===f)return 0;var k=h.array,l=d.array;g.input=i82u8(k,0,k.length),g.next_in=i,g.avail_in=j,g.output=i82u8(l,0,l.length),g.next_out=e,g.avail_out=f;var m=inflate.inflate(g,2),n=f-g.avail_out;if(!isInt8Array(l))for(var o=g.output,p=0;n>p;p++){var q=o[p+e];q>127&&(q|=4294967168),l[p+e]=q}switch(m){case 1:b["java/util/zip/Inflater/finished"]=1;case 0:return i+=j-g.avail_in,b["java/util/zip/Inflater/off"]=i,b["java/util/zip/Inflater/len"]=g.avail_in,n;case 2:return b["java/util/zip/Inflater/needDict"]=1,i+=j-g.avail_in,b["java/util/zip/Inflater/off"]=i,b["java/util/zip/Inflater/len"]=g.avail_in,0;case-5:return 0;case-3:return void a.throwNewException("Ljava/util/zip/DataFormatException;",g.msg);default:return void a.throwNewException("Ljava/lang/InternalError;",g.msg)}}},a["getAdler(J)I"]=function(a,b){var c=GetZStream(a,b.toNumber());return c?c.adler:void 0},a["reset(J)V"]=function(a,b){var c=b.toNumber(),d=GetZStream(a,c);if(d){var e=new ZStreamCons;inflate.inflateInit2(e,d.state.wrap?MAX_WBITS:-MAX_WBITS);ZStreams[c]=e}},a["end(J)V"]=function(a,b){var c=GetZStream(a,b.toNumber());c&&(-2===inflate.inflateEnd(c)?a.throwNewException("Ljava/lang/InternalError;",c.msg):CloseZStream(b.toNumber()))},a}(),java_util_zip_ZipFile=function(){function a(){}return a["initIDs()V"]=function(a){},a["getEntry(J[BZ)J"]=function(a,b,c,d){var e=GetZipFile(a,b.toNumber());if(e){var f=new Buffer(c.array).toString("utf8");"/"!==f[0]&&(f="/"+f),f=path.resolve(f);try{return Long.fromNumber(OpenZipEntry(e.getCentralDirectoryEntry(f)))}catch(g){return Long.ZERO}}},a["freeEntry(JJ)V"]=function(a,b,c){CloseZipEntry(c.toNumber())},a["getNextEntry(JI)J"]=function(a,b,c){var d=GetZipFile(a,b.toNumber());if(d)try{return Long.fromNumber(OpenZipEntry(d.getCentralDirectoryEntryAt(c)))}catch(e){return Long.ZERO}},a["close(J)V"]=function(a,b){CloseZipFile(b.toNumber())},a["open(Ljava/lang/String;IJZ)J"]=function(a,b,c,d,e){for(var f=b.toString(),g=a.getBsCl().getClassPathItems(),h=0;h<g.length;h++){var i=g[h];if(i instanceof AbstractClasspathJar&&path.resolve(i.getPath())===path.resolve(f))return Long.fromNumber(OpenZipFile(i.getFS()))}a.setStatus(ThreadStatus.ASYNC_WAITING),fs.readFile(f,function(b,c){b?a.throwNewException("Ljava/io/IOException;",b.message):a.asyncReturn(Long.fromNumber(OpenZipFile(new BrowserFS.FileSystem.ZipFS(c,f))),null)})},a["getTotal(J)I"]=function(a,b){var c=GetZipFile(a,b.toNumber());return c?c.getNumberOfCentralDirectoryEntries():void 0},a["startsWithLOC(J)Z"]=function(a,b){return 1},a["read(JJJ[BII)I"]=function(a,b,c,d,e,f,g){var h=GetZipEntry(a,c.toNumber()),i=d.toNumber();if(h){if(0>=g)return 0;var j=h.getRawData();if(i>=j.length)return void a.throwNewException("Ljava/io/IOException;","End of zip file.");i+g>j.length&&(g=j.length-i);var k=e.array;if(CanUseCopyFastPath){var l=k,m=new Buffer(l.buffer);return j.copy(m,f+l.byteOffset,i,i+g)}for(var n=0;g>n;n++)k[f+n]=j.readInt8(i+n);return g}},a["getEntryTime(J)J"]=function(a,b){var c=GetZipEntry(a,b.toNumber());return c?Long.fromNumber(c.rawLastModFileTime()):void 0},a["getEntryCrc(J)J"]=function(a,b){var c=GetZipEntry(a,b.toNumber());return c?Long.fromNumber(c.crc32()):void 0},a["getEntryCSize(J)J"]=function(a,b){var c=GetZipEntry(a,b.toNumber());return c?Long.fromNumber(c.compressedSize()):void 0},a["getEntrySize(J)J"]=function(a,b){var c=GetZipEntry(a,b.toNumber());return c?Long.fromNumber(c.uncompressedSize()):void 0},a["getEntryMethod(J)I"]=function(a,b){var c=GetZipEntry(a,b.toNumber());return c?c.compressionMethod():void 0},a["getEntryFlag(J)I"]=function(a,b){var c=GetZipEntry(a,b.toNumber());return c?c.flag():void 0},a["getCommentBytes(J)[B"]=function(a,b){var c=GetZipFile(a,b.toNumber());if(c){var d=c.getEndOfCentralDirectory(),e=d.rawCdZipComment();return util.newArrayFromDataWithClass(a,a.getBsCl().getInitializedClass(a,"[B"),buff2i8(e))}},a["getEntryBytes(JI)[B"]=function(a,b,c){var d=GetZipEntry(a,b.toNumber());if(d)switch(c){case 2:return util.newArrayFromDataWithClass(a,a.getBsCl().getInitializedClass(a,"[B"),buff2i8(d.rawFileComment()));case 1:return util.newArrayFromDataWithClass(a,a.getBsCl().getInitializedClass(a,"[B"),buff2i8(d.extraField()));case 0:return util.newArrayFromDataWithClass(a,a.getBsCl().getInitializedClass(a,"[B"),buff2i8(d.rawFileName()));default:return null}},a["getZipMessage(J)Ljava/lang/String;"]=function(a,b){return util.initString(a.getBsCl(),"Something bad happened.")},a}();registerNatives({"java/util/concurrent/atomic/AtomicLong":java_util_concurrent_atomic_AtomicLong,"java/util/jar/JarFile":java_util_jar_JarFile,"java/util/logging/FileHandler":java_util_logging_FileHandler,"java/util/TimeZone":java_util_TimeZone,"java/util/zip/Adler32":java_util_zip_Adler32,"java/util/zip/CRC32":java_util_zip_CRC32,"java/util/zip/Deflater":java_util_zip_Deflater,"java/util/zip/Inflater":java_util_zip_Inflater,"java/util/zip/ZipFile":java_util_zip_ZipFile});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9uYXRpdmVzL2phdmFfdXRpbC50cyJdLCJuYW1lcyI6WyJPcGVuSXRlbSIsIkdldEl0ZW0iLCJDbG9zZUl0ZW0iLCJPcGVuWmlwRmlsZSIsIkNsb3NlWmlwRmlsZSIsIkdldFppcEZpbGUiLCJPcGVuWmlwRW50cnkiLCJDbG9zZVppcEVudHJ5IiwiR2V0WmlwRW50cnkiLCJPcGVuWlN0cmVhbSIsIkNsb3NlWlN0cmVhbSIsIkdldFpTdHJlYW0iLCJpc1VpbnQ4QXJyYXkiLCJpc0ludDhBcnJheSIsImk4MnU4IiwidTgyaTgiLCJidWZmMmk4IiwiamF2YV91dGlsX2NvbmN1cnJlbnRfYXRvbWljX0F0b21pY0xvbmciLCJqYXZhX3V0aWxfY29uY3VycmVudF9hdG9taWNfQXRvbWljTG9uZy5WTVN1cHBvcnRzQ1M4KClaIiwiamF2YV91dGlsX2phcl9KYXJGaWxlIiwiamF2YV91dGlsX2phcl9KYXJGaWxlLmdldE1ldGFJbmZFbnRyeU5hbWVzKClbTGphdmEvbGFuZy9TdHJpbmc7IiwiamF2YV91dGlsX2xvZ2dpbmdfRmlsZUhhbmRsZXIiLCJqYXZhX3V0aWxfbG9nZ2luZ19GaWxlSGFuZGxlci5pc1NldFVJRCgpWiIsImphdmFfdXRpbF9UaW1lWm9uZSIsImphdmFfdXRpbF9UaW1lWm9uZS5nZXRTeXN0ZW1UaW1lWm9uZUlEKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsiLCJqYXZhX3V0aWxfVGltZVpvbmUuZ2V0U3lzdGVtR01UT2Zmc2V0SUQoKUxqYXZhL2xhbmcvU3RyaW5nOyIsImphdmFfdXRpbF96aXBfQWRsZXIzMiIsImphdmFfdXRpbF96aXBfQWRsZXIzMi51cGRhdGUoSUkpSSIsImphdmFfdXRpbF96aXBfQWRsZXIzMi51cGRhdGVCeXRlcyhJW0JJSSlJIiwiamF2YV91dGlsX3ppcF9BZGxlcjMyLnVwZGF0ZUJ5dGVCdWZmZXIoSUpJSSlJIiwiamF2YV91dGlsX3ppcF9DUkMzMiIsImphdmFfdXRpbF96aXBfQ1JDMzIudXBkYXRlKElJKUkiLCJqYXZhX3V0aWxfemlwX0NSQzMyLnVwZGF0ZUJ5dGVzKElbQklJKUkiLCJqYXZhX3V0aWxfemlwX0NSQzMyLnVwZGF0ZUJ5dGVCdWZmZXIoSUpJSSlJIiwiamF2YV91dGlsX3ppcF9EZWZsYXRlciIsImphdmFfdXRpbF96aXBfRGVmbGF0ZXIuaW5pdElEcygpViIsImphdmFfdXRpbF96aXBfRGVmbGF0ZXIuaW5pdChJSVopSiIsImphdmFfdXRpbF96aXBfRGVmbGF0ZXIuc2V0RGljdGlvbmFyeShKW0JJSSlWIiwiamF2YV91dGlsX3ppcF9EZWZsYXRlci5kZWZsYXRlQnl0ZXMoSltCSUlJKUkiLCJqYXZhX3V0aWxfemlwX0RlZmxhdGVyLmdldEFkbGVyKEopSSIsImphdmFfdXRpbF96aXBfRGVmbGF0ZXIucmVzZXQoSilWIiwiamF2YV91dGlsX3ppcF9EZWZsYXRlci5lbmQoSilWIiwiamF2YV91dGlsX3ppcF9JbmZsYXRlciIsImphdmFfdXRpbF96aXBfSW5mbGF0ZXIuaW5pdChaKUoiLCJqYXZhX3V0aWxfemlwX0luZmxhdGVyLnNldERpY3Rpb25hcnkoSltCSUkpViIsImphdmFfdXRpbF96aXBfSW5mbGF0ZXIuaW5mbGF0ZUJ5dGVzKEpbQklJKUkiLCJqYXZhX3V0aWxfemlwX0luZmxhdGVyLmdldEFkbGVyKEopSSIsImphdmFfdXRpbF96aXBfSW5mbGF0ZXIucmVzZXQoSilWIiwiamF2YV91dGlsX3ppcF9JbmZsYXRlci5lbmQoSilWIiwiamF2YV91dGlsX3ppcF9aaXBGaWxlIiwiamF2YV91dGlsX3ppcF9aaXBGaWxlLmdldEVudHJ5KEpbQlopSiIsImphdmFfdXRpbF96aXBfWmlwRmlsZS5mcmVlRW50cnkoSkopViIsImphdmFfdXRpbF96aXBfWmlwRmlsZS5nZXROZXh0RW50cnkoSkkpSiIsImphdmFfdXRpbF96aXBfWmlwRmlsZS5jbG9zZShKKVYiLCJqYXZhX3V0aWxfemlwX1ppcEZpbGUub3BlbihMamF2YS9sYW5nL1N0cmluZztJSlopSiIsImphdmFfdXRpbF96aXBfWmlwRmlsZS5nZXRUb3RhbChKKUkiLCJqYXZhX3V0aWxfemlwX1ppcEZpbGUuc3RhcnRzV2l0aExPQyhKKVoiLCJqYXZhX3V0aWxfemlwX1ppcEZpbGUucmVhZChKSkpbQklJKUkiLCJqYXZhX3V0aWxfemlwX1ppcEZpbGUuZ2V0RW50cnlUaW1lKEopSiIsImphdmFfdXRpbF96aXBfWmlwRmlsZS5nZXRFbnRyeUNyYyhKKUoiLCJqYXZhX3V0aWxfemlwX1ppcEZpbGUuZ2V0RW50cnlDU2l6ZShKKUoiLCJqYXZhX3V0aWxfemlwX1ppcEZpbGUuZ2V0RW50cnlTaXplKEopSiIsImphdmFfdXRpbF96aXBfWmlwRmlsZS5nZXRFbnRyeU1ldGhvZChKKUkiLCJqYXZhX3V0aWxfemlwX1ppcEZpbGUuZ2V0RW50cnlGbGFnKEopSSIsImphdmFfdXRpbF96aXBfWmlwRmlsZS5nZXRDb21tZW50Qnl0ZXMoSilbQiIsImphdmFfdXRpbF96aXBfWmlwRmlsZS5nZXRFbnRyeUJ5dGVzKEpJKVtCIiwiamF2YV91dGlsX3ppcF9aaXBGaWxlLmdldFppcE1lc3NhZ2UoSilMamF2YS9sYW5nL1N0cmluZzsiXSwibWFwcGluZ3MiOiJBQXNDQSxRQUFBLFVBQXFCLEVBQVMsR0FDNUJBLEdBQUlBLEdBQUtBLFFBRVRBLE9BREFBLEdBQUlBLEdBQU1BLEVBQ0hBLEVBRVQsUUFBQSxTQUFvQixFQUFtQixFQUFZLEVBQXdCLEdBQ3pFQyxHQUFJQSxHQUFPQSxFQUFJQSxFQUNmQSxPQUFLQSxHQUlJQSxHQUhQQSxFQUFPQSxrQkFBa0JBLG9DQUFxQ0EsR0FDdkRBLE1BS1gsUUFBQSxXQUFzQixFQUFZLFNBQ3pCQyxHQUFJQSxHQUdiLFFBQUEsYUFBcUIsR0FDbkJDLE1BQU9BLFVBQVNBLEVBQU9BLFVBRXpCLFFBQUEsY0FBc0IsR0FDcEJDLFVBQVVBLEVBQUlBLFVBTWhCLFFBQUEsWUFBb0IsRUFBbUIsR0FDckNDLE1BQU9BLFNBQVFBLEVBQVFBLEVBQUlBLFNBQVVBLHNCQUV2QyxRQUFBLGNBQXNCLEdB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QUFPQSxVQUFVQSxvQkFBb0JBLEVBQVFBLE1BQWtCQSxRQUFRQSxFQUFTQSxrQkFDekpBLEtBQUtBLEdBQ0hBLE1BQU9BLE1BQUtBLDBCQUEwQkEsRUFBaUNBLEVBQU9BLFVBQVVBLG9CQUFvQkEsRUFBUUEsTUFBa0JBLFFBQVFBLEVBQVNBLGNBQ3pKQSxLQUFLQSxHQUNIQSxNQUFPQSxNQUFLQSwwQkFBMEJBLEVBQWlDQSxFQUFPQSxVQUFVQSxvQkFBb0JBLEVBQVFBLE1BQWtCQSxRQUFRQSxFQUFTQSxlQUN6SkEsU0FDRUEsTUFBT0EsUUFRRGhCLEVBQUFBLHNDQUFkQSxTQUFtREEsRUFBbUJBLEdBQ3BFaUIsTUFBT0EsTUFBS0EsV0FBV0EsRUFBT0EsVUFBV0EsNEJBRzdDakIsSUFFQSxrQkFDRSx5Q0FBMEMsdUNBQzFDLHdCQUF5QixzQkFDekIsZ0NBQWlDLDhCQUNqQyxxQkFBc0IsbUJBQ3RCLHdCQUF5QixzQkFDekIsc0JBQXVCLG9CQUN2Qix5QkFBMEIsdUJBQzFCLHlCQUEwQix1QkFDMUIsd0JBQXlCIiwiZmlsZSI6ImphdmFfdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi92ZW5kb3IvcGFrby5kLnRzXCIgLz5cbmltcG9ydCBKVk1UeXBlcyA9IHJlcXVpcmUoJy4uLy4uL2luY2x1ZGVzL0pWTVR5cGVzJyk7XG5pbXBvcnQgKiBhcyBEb3BwaW9KVk0gZnJvbSAnLi4vZG9wcGlvanZtJztcbmltcG9ydCBKVk1UaHJlYWQgPSBEb3BwaW9KVk0uVk0uVGhyZWFkaW5nLkpWTVRocmVhZDtcbmltcG9ydCBSZWZlcmVuY2VDbGFzc0RhdGEgPSBEb3BwaW9KVk0uVk0uQ2xhc3NGaWxlLlJlZmVyZW5jZUNsYXNzRGF0YTtcbmltcG9ydCBsb2dnaW5nID0gRG9wcGlvSlZNLkRlYnVnLkxvZ2dpbmc7XG5pbXBvcnQgdXRpbCA9IERvcHBpb0pWTS5WTS5VdGlsO1xuaW1wb3J0IExvbmcgPSBEb3BwaW9KVk0uVk0uTG9uZztcbmltcG9ydCBBYnN0cmFjdENsYXNzcGF0aEphciA9IERvcHBpb0pWTS5WTS5DbGFzc0ZpbGUuQWJzdHJhY3RDbGFzc3BhdGhKYXI7XG5pbXBvcnQgQnJvd3NlckZTID0gcmVxdWlyZSgnYnJvd3NlcmZzJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5pbXBvcnQgVGhyZWFkU3RhdHVzID0gRG9wcGlvSlZNLlZNLkVudW1zLlRocmVhZFN0YXR1cztcbmltcG9ydCBBcnJheUNsYXNzRGF0YSA9IERvcHBpb0pWTS5WTS5DbGFzc0ZpbGUuQXJyYXlDbGFzc0RhdGE7XG5pbXBvcnQgUHJpbWl0aXZlQ2xhc3NEYXRhID0gRG9wcGlvSlZNLlZNLkNsYXNzRmlsZS5QcmltaXRpdmVDbGFzc0RhdGE7XG5pbXBvcnQgYXNzZXJ0ID0gRG9wcGlvSlZNLkRlYnVnLkFzc2VydDtcbmltcG9ydCBkZWZsYXRlID0gcmVxdWlyZSgncGFrby9saWIvemxpYi9kZWZsYXRlJyk7XG5pbXBvcnQgaW5mbGF0ZSA9IHJlcXVpcmUoJ3Bha28vbGliL3psaWIvaW5mbGF0ZScpO1xuaW1wb3J0IGNyYzMyID0gcmVxdWlyZSgncGFrby9saWIvemxpYi9jcmMzMicpO1xuaW1wb3J0IGFkbGVyMzIgPSByZXF1aXJlKCdwYWtvL2xpYi96bGliL2FkbGVyMzInKTtcbmltcG9ydCBaU3RyZWFtQ29ucyA9IHJlcXVpcmUoJ3Bha28vbGliL3psaWIvenN0cmVhbScpO1xuaW1wb3J0IEdaSGVhZGVyID0gcmVxdWlyZSgncGFrby9saWIvemxpYi9nemhlYWRlcicpO1xuXG5pbXBvcnQgWlN0cmVhbSA9IFBha28uWlN0cmVhbTtcbmltcG9ydCBabGliUmV0dXJuQ29kZSA9IFBha28uWmxpYlJldHVybkNvZGU7XG5pbXBvcnQgWmxpYkZsdXNoVmFsdWUgPSBQYWtvLlpsaWJGbHVzaFZhbHVlO1xubGV0IEJGU1V0aWxzID0gQnJvd3NlckZTLkJGU1JlcXVpcmUoJ2Jmc191dGlscycpO1xuY29uc3QgTUFYX1dCSVRTID0gMTU7XG5cbi8vIEZvciB0eXBlIGluZm9ybWF0aW9uIG9ubHkuXG5pbXBvcnQge2RlZmF1bHQgYXMgVFppcEZTLCBDZW50cmFsRGlyZWN0b3J5IGFzIFRDZW50cmFsRGlyZWN0b3J5fSBmcm9tICdicm93c2VyZnMvZGlzdC9ub2RlL2JhY2tlbmQvWmlwRlMnO1xuZGVjbGFyZSB2YXIgcmVnaXN0ZXJOYXRpdmVzOiAoZGVmczogYW55KSA9PiB2b2lkO1xuXG5sZXQgWmlwRmlsZXM6IHtbaWQ6IG51bWJlcl06IFRaaXBGU30gPSB7fTtcbmxldCBaaXBFbnRyaWVzOiB7W2lkOiBudW1iZXJdOiBUQ2VudHJhbERpcmVjdG9yeX0gPSB7fTtcbmxldCBaU3RyZWFtczoge1tpZDogbnVtYmVyXTogWlN0cmVhbX0gPSB7fTtcbi8vIFN0YXJ0IGF0IDEsIGFzIDAgaXMgaW50ZXJwcmV0ZWQgYXMgYW4gZXJyb3IuXG5sZXQgTmV4dElkOiBudW1iZXIgPSAxO1xuZnVuY3Rpb24gT3Blbkl0ZW08VD4oaXRlbTogVCwgbWFwOiB7W2lkOiBudW1iZXJdOiBUfSk6IG51bWJlciB7XG4gIGxldCBpZCA9IE5leHRJZCsrO1xuICBtYXBbaWRdID0gaXRlbTtcbiAgcmV0dXJuIGlkO1xufVxuZnVuY3Rpb24gR2V0SXRlbTxUPih0aHJlYWQ6IEpWTVRocmVhZCwgaWQ6IG51bWJlciwgbWFwOiB7W2lkOiBudW1iZXJdOiBUfSwgZXJyTXNnOiBzdHJpbmcpOiBUIHtcbiAgbGV0IGl0ZW0gPSBtYXBbaWRdO1xuICBpZiAoIWl0ZW0pIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oXCJMamF2YS9sYW5nL0lsbGVnYWxTdGF0ZUV4Y2VwdGlvbjtcIiwgZXJyTXNnKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxufVxuZnVuY3Rpb24gQ2xvc2VJdGVtPFQ+KGlkOiBudW1iZXIsIG1hcDoge1tpZDogbnVtYmVyXTogVH0pOiB2b2lkIHtcbiAgZGVsZXRlIG1hcFtpZF07XG59XG5cbmZ1bmN0aW9uIE9wZW5aaXBGaWxlKHpmaWxlOiBUWmlwRlMpOiBudW1iZXIge1xuICByZXR1cm4gT3Blbkl0ZW0oemZpbGUsIFppcEZpbGVzKTtcbn1cbmZ1bmN0aW9uIENsb3NlWmlwRmlsZShpZDogbnVtYmVyKTogdm9pZCB7XG4gIENsb3NlSXRlbShpZCwgWmlwRmlsZXMpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSB6aXAgZmlsZSwgaWYgaXQgZXhpc3RzLlxuICogT3RoZXJ3aXNlLCB0aHJvd3MgYW4gSWxsZWdhbFN0YXRlRXhjZXB0aW9uLlxuICovXG5mdW5jdGlvbiBHZXRaaXBGaWxlKHRocmVhZDogSlZNVGhyZWFkLCBpZDogbnVtYmVyKTogVFppcEZTIHtcbiAgcmV0dXJuIEdldEl0ZW0odGhyZWFkLCBpZCwgWmlwRmlsZXMsIGBaaXBGaWxlIG5vdCBmb3VuZC5gKTtcbn1cbmZ1bmN0aW9uIE9wZW5aaXBFbnRyeSh6ZW50cnk6IFRDZW50cmFsRGlyZWN0b3J5KTogbnVtYmVyIHtcbiAgcmV0dXJuIE9wZW5JdGVtKHplbnRyeSwgWmlwRW50cmllcyk7XG59XG5mdW5jdGlvbiBDbG9zZVppcEVudHJ5KGlkOiBudW1iZXIpOiB2b2lkIHtcbiAgQ2xvc2VJdGVtKGlkLCBaaXBFbnRyaWVzKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgemlwIGVudHJ5LCBpZiBpdCBleGlzdHMuXG4gKiBPdGhlcndpc2UsIHRocm93cyBhbiBJbGxlZ2FsU3RhdGVFeGNlcHRpb24uXG4gKi9cbmZ1bmN0aW9uIEdldFppcEVudHJ5KHRocmVhZDogSlZNVGhyZWFkLCBpZDogbnVtYmVyKTogVENlbnRyYWxEaXJlY3Rvcnkge1xuICByZXR1cm4gR2V0SXRlbSh0aHJlYWQsIGlkLCBaaXBFbnRyaWVzLCBgSW52YWxpZCBaaXBFbnRyeS5gKTtcbn1cbmZ1bmN0aW9uIE9wZW5aU3RyZWFtKGluZmxhdGVyU3RhdGU6IFpTdHJlYW0pOiBudW1iZXIge1xuICByZXR1cm4gT3Blbkl0ZW0oaW5mbGF0ZXJTdGF0ZSwgWlN0cmVhbXMpO1xufVxuZnVuY3Rpb24gQ2xvc2VaU3RyZWFtKGlkOiBudW1iZXIpOiB2b2lkIHtcbiAgQ2xvc2VJdGVtKGlkLCBaU3RyZWFtcyk7XG59XG5mdW5jdGlvbiBHZXRaU3RyZWFtKHRocmVhZDogSlZNVGhyZWFkLCBpZDogbnVtYmVyKTogWlN0cmVhbSB7XG4gIHJldHVybiBHZXRJdGVtKHRocmVhZCwgaWQsIFpTdHJlYW1zLCBgSW5mbGF0ZXIgbm90IGZvdW5kLmApO1xufVxuXG5sZXQgQ2FuVXNlQ29weUZhc3RQYXRoID0gZmFsc2U7XG5pZiAodHlwZW9mIEludDhBcnJheSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBsZXQgaThhcnIgPSBuZXcgSW50OEFycmF5KDEpO1xuICBsZXQgYiA9IG5ldyBCdWZmZXIoPGFueT4gaThhcnIuYnVmZmVyKTtcbiAgaThhcnJbMF0gPSAxMDA7XG4gIENhblVzZUNvcHlGYXN0UGF0aCA9IGk4YXJyWzBdID09IGIucmVhZEludDgoMCk7XG59XG5cbmludGVyZmFjZSBBcnJheWlzaCB7XG4gIFtpZHg6IG51bWJlcl06IG51bWJlcjtcbn1cblxuZnVuY3Rpb24gaXNVaW50OEFycmF5KGFycjogQXJyYXlpc2gpOiBhcnIgaXMgVWludDhBcnJheSB7XG4gIGlmIChhcnIgJiYgdHlwZW9mKFVpbnQ4QXJyYXkpICE9PSBcInVuZGVmaW5lZFwiICYmIGFyciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzSW50OEFycmF5KGFycjogQXJyYXlpc2gpOiBhcnIgaXMgSW50OEFycmF5IHtcbiAgaWYgKGFyciAmJiB0eXBlb2YoSW50OEFycmF5KSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnIgaW5zdGFuY2VvZiBJbnQ4QXJyYXkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29udmVydHMgYW4gSW50OEFycmF5IG9yIGFuIGFycmF5IG9mIDgtYml0IHNpZ25lZCBpbnRzIGludG9cbiAqIGEgVWludDhBcnJheSBvciBhbiBhcnJheSBvZiA4LWJpdCB1bnNpZ25lZCBpbnRzLlxuICovXG5mdW5jdGlvbiBpODJ1OChhcnI6IG51bWJlcltdIHwgSW50OEFycmF5LCBzdGFydDogbnVtYmVyLCBsZW46IG51bWJlcik6IG51bWJlcltdIHwgVWludDhBcnJheSB7XG4gIGlmIChpc0ludDhBcnJheShhcnIpKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGFyci5idWZmZXIsIGFyci5ieXRlT2Zmc2V0ICsgc3RhcnQsIGxlbik7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgaWYgKHR5cGVvZihVaW50OEFycmF5KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdmFyIGk4YXJyID0gbmV3IEludDhBcnJheShsZW4pO1xuICAgICAgaWYgKHN0YXJ0ID09PSAwICYmIGxlbiA9PT0gYXJyLmxlbmd0aCkge1xuICAgICAgICBpOGFyci5zZXQoYXJyLCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGk4YXJyLnNldChhcnIuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgbGVuKSwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaThhcnIuYnVmZmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2xvdyB3YXkuXG4gICAgICBsZXQgcnYgPSBuZXcgQXJyYXk8bnVtYmVyPihsZW4pO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBydltpXSA9IGFycltzdGFydCArIGldICYgMHhGRjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBydjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBhcnJheS5gKTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIFVpbnQ4QXJyYXkgb3IgYW4gYXJyYXkgb2YgOC1iaXQgdW5zaWduZWQgaW50cyBpbnRvXG4gKiBhbiBJbnQ4QXJyYXkgb3IgYW4gYXJyYXkgb2YgOC1iaXQgc2lnbmVkIGludHMuXG4gKi9cbmZ1bmN0aW9uIHU4Mmk4KGFycjogbnVtYmVyW10gfCBVaW50OEFycmF5LCBzdGFydDogbnVtYmVyLCBsZW46IG51bWJlcik6IG51bWJlcltdIHwgSW50OEFycmF5IHtcbiAgaWYgKGlzVWludDhBcnJheShhcnIpKSB7XG4gICAgcmV0dXJuIG5ldyBJbnQ4QXJyYXkoYXJyLmJ1ZmZlciwgYXJyLmJ5dGVPZmZzZXQgKyBzdGFydCwgbGVuKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBpZiAodHlwZW9mKEludDhBcnJheSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHZhciB1OGFyciA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgICBpZiAoc3RhcnQgPT09IDAgJiYgbGVuID09PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgIHU4YXJyLnNldChhcnIsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdThhcnIuc2V0KGFyci5zbGljZShzdGFydCwgc3RhcnQgKyBsZW4pLCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgSW50OEFycmF5KHU4YXJyLmJ1ZmZlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNsb3cgd2F5LlxuICAgICAgbGV0IHJ2ID0gbmV3IEFycmF5PG51bWJlcj4obGVuKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgcnZbaV0gPSBhcnJbc3RhcnQgKyBpXTtcbiAgICAgICAgaWYgKHJ2W2ldID4gMTI3KSB7XG4gICAgICAgICAgLy8gU2lnbiBleHRlbmQuXG4gICAgICAgICAgcnZbaV0gfD0gMHhGRkZGRkY4MFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcnY7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgYXJyYXkuYCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGJ1ZmZlciBpbnRvIGVpdGhlciBhbiBJbnQ4QXJyYXksIG9yIGFuIGFycmF5IG9mIHNpZ25lZCA4LWJpdCBpbnRzLlxuICovXG5mdW5jdGlvbiBidWZmMmk4KGJ1ZmY6IE5vZGVCdWZmZXIpOiBJbnQ4QXJyYXkgfCBudW1iZXJbXSB7XG4gIGxldCBhcnJheWlzaCA9IEJGU1V0aWxzLmJ1ZmZlcjJBcnJheWlzaChidWZmKTtcbiAgcmV0dXJuIHU4Mmk4KDxhbnk+IGFycmF5aXNoLCAwLCBhcnJheWlzaC5sZW5ndGgpO1xufVxuXG4vKipcbiAqIFRoZSB0eXBlIG9mIGEgSlpFbnRyeSBmaWVsZC4gQ29waWVkIGZyb20gamF2YS51dGlsLnppcC5aaXBGaWxlLlxuICovXG5jb25zdCBlbnVtIEpaRW50cnlUeXBlIHtcbiAgSlpFTlRSWV9OQU1FID0gMCxcbiAgSlpFTlRSWV9FWFRSQSA9IDEsXG4gIEpaRU5UUllfQ09NTUVOVCA9IDIsXG59XG5cbmNsYXNzIGphdmFfdXRpbF9jb25jdXJyZW50X2F0b21pY19BdG9taWNMb25nIHtcblxuICBwdWJsaWMgc3RhdGljICdWTVN1cHBvcnRzQ1M4KClaJyh0aHJlYWQ6IEpWTVRocmVhZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbn1cblxuY2xhc3MgamF2YV91dGlsX2phcl9KYXJGaWxlIHtcblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBzdHJpbmdzIHJlcHJlc2VudGluZyB0aGUgbmFtZXMgb2YgYWxsIGVudHJpZXNcbiAgICogdGhhdCBiZWdpbiB3aXRoIFwiTUVUQS1JTkYvXCIgKGNhc2UgaWdub3JlZCkuIFRoaXMgbmF0aXZlIG1ldGhvZCBpc1xuICAgKiB1c2VkIGluIEphckZpbGUgYXMgYW4gb3B0aW1pemF0aW9uIHdoZW4gbG9va2luZyB1cCBtYW5pZmVzdCBhbmRcbiAgICogc2lnbmF0dXJlIGZpbGUgZW50cmllcy4gUmV0dXJucyBudWxsIGlmIG5vIGVudHJpZXMgd2VyZSBmb3VuZC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgJ2dldE1ldGFJbmZFbnRyeU5hbWVzKClbTGphdmEvbGFuZy9TdHJpbmc7Jyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLmphdmFfdXRpbF9qYXJfSmFyRmlsZSk6IEpWTVR5cGVzLkpWTUFycmF5PEpWTVR5cGVzLmphdmFfbGFuZ19TdHJpbmc+IHtcbiAgICBsZXQgemlwID0gR2V0WmlwRmlsZSh0aHJlYWQsIGphdmFUaGlzWydqYXZhL3V0aWwvemlwL1ppcEZpbGUvanpmaWxlJ10udG9OdW1iZXIoKSk7XG4gICAgaWYgKHppcCkge1xuICAgICAgaWYgKCF6aXAuZXhpc3RzU3luYygnL01FVEEtSU5GJykpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGxldCBleHBsb3JlUGF0aDogc3RyaW5nW10gPSBbJy9NRVRBLUlORiddO1xuICAgICAgbGV0IGJzQ2wgPSB0aHJlYWQuZ2V0QnNDbCgpO1xuICAgICAgbGV0IGZvdW5kRmlsZXM6IEpWTVR5cGVzLmphdmFfbGFuZ19TdHJpbmdbXSA9IFt1dGlsLmluaXRTdHJpbmcoYnNDbCwgJ01FVEEtSU5GLycpXTtcbiAgICAgIHdoaWxlIChleHBsb3JlUGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBwID0gZXhwbG9yZVBhdGgucG9wKCk7XG4gICAgICAgIGxldCBkaXJMaXN0aW5nID0gemlwLnJlYWRkaXJTeW5jKHApO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpckxpc3RpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgbmV3UCA9IGAke3B9LyR7ZGlyTGlzdGluZ1tpXX1gO1xuICAgICAgICAgIGlmICh6aXAuc3RhdFN5bmMobmV3UCwgZmFsc2UpLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgIGV4cGxvcmVQYXRoLnB1c2gobmV3UCk7XG4gICAgICAgICAgICAvLyBBZGQgYSBmaW5hbCAvLCBhbmQgc3RyaXAgb2ZmIGZpcnN0IC8uXG4gICAgICAgICAgICBmb3VuZEZpbGVzLnB1c2godXRpbC5pbml0U3RyaW5nKGJzQ2wsIGAke25ld1Auc2xpY2UoMSl9L2ApKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU3RyaXAgb2ZmIGZpcnN0IC8uXG4gICAgICAgICAgICBmb3VuZEZpbGVzLnB1c2godXRpbC5pbml0U3RyaW5nKGJzQ2wsIG5ld1Auc2xpY2UoMSkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHV0aWwubmV3QXJyYXlGcm9tRGF0YTxKVk1UeXBlcy5qYXZhX2xhbmdfU3RyaW5nPih0aHJlYWQsIGJzQ2wsIFwiW0xqYXZhL2xhbmcvU3RyaW5nO1wiLCBmb3VuZEZpbGVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG5jbGFzcyBqYXZhX3V0aWxfbG9nZ2luZ19GaWxlSGFuZGxlciB7XG5cbiAgcHVibGljIHN0YXRpYyAnaXNTZXRVSUQoKVonKHRocmVhZDogSlZNVGhyZWFkKTogYm9vbGVhbiB7XG4gICAgLy8gT3VyIEZTIGRvZXMgbm90IHN1cHBvcnQgc2V0VUlELlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG59XG5cbmNsYXNzIGphdmFfdXRpbF9UaW1lWm9uZSB7XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0U3lzdGVtVGltZVpvbmVJRChMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7Jyh0aHJlYWQ6IEpWTVRocmVhZCwgYXJnMDogSlZNVHlwZXMuamF2YV9sYW5nX1N0cmluZyk6IEpWTVR5cGVzLmphdmFfbGFuZ19TdHJpbmcge1xuICAgIC8vIE5PVEU6IENhbiBiZSBoYWxmIG9mIGFuIGhvdXIgKGUuZy4gTmV3Zm91bmRsYW5kIGlzIEdNVC0zLjUpXG4gICAgLy8gTk9URTogSXMgcG9zaXRpdmUgZm9yIG5lZ2F0aXZlIG9mZnNldC5cbiAgICBsZXQgb2Zmc2V0ID0gbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpIC8gNjA7XG4gICAgcmV0dXJuIHRocmVhZC5nZXRKVk0oKS5pbnRlcm5TdHJpbmcoYEdNVCR7b2Zmc2V0ID4gMCA/ICctJyA6ICcrJ30ke29mZnNldH1gKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldFN5c3RlbUdNVE9mZnNldElEKClMamF2YS9sYW5nL1N0cmluZzsnKHRocmVhZDogSlZNVGhyZWFkKTogSlZNVHlwZXMuamF2YV9sYW5nX1N0cmluZyB7XG4gICAgLy8gWFhYIG1heSBub3QgYmUgY29ycmVjdFxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbn1cblxuXG5jbGFzcyBqYXZhX3V0aWxfemlwX0FkbGVyMzIge1xuXG4gIHB1YmxpYyBzdGF0aWMgJ3VwZGF0ZShJSSlJJyh0aHJlYWQ6IEpWTVRocmVhZCwgYWRsZXI6IG51bWJlciwgYnl0ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gYWRsZXIzMihhZGxlciwgW2J5dGUgJiAweEZGXSwgMSwgMCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICd1cGRhdGVCeXRlcyhJW0JJSSlJJyh0aHJlYWQ6IEpWTVRocmVhZCwgYWRsZXI6IG51bWJlciwgYjogSlZNVHlwZXMuSlZNQXJyYXk8bnVtYmVyPiwgb2ZmOiBudW1iZXIsIGxlbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gYWRsZXIzMihhZGxlciwgaTgydTgoYi5hcnJheSwgb2ZmLCBsZW4pLCBsZW4sIDApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAndXBkYXRlQnl0ZUJ1ZmZlcihJSklJKUknKHRocmVhZDogSlZNVGhyZWFkLCBhZGxlcjogbnVtYmVyLCBhZGRyOiBMb25nLCBvZmY6IG51bWJlciwgbGVuOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCBoZWFwID0gdGhyZWFkLmdldEpWTSgpLmdldEhlYXAoKTtcbiAgICBsZXQgYnVmZiA9IDxVaW50OEFycmF5PiBCRlNVdGlscy5idWZmZXIyQXJyYXlpc2goaGVhcC5nZXRfYnVmZmVyKGFkZHIudG9OdW1iZXIoKSArIG9mZiwgbGVuKSk7XG4gICAgcmV0dXJuIGFkbGVyMzIoYWRsZXIsIGJ1ZmYsIGJ1ZmYubGVuZ3RoLCAwKTtcbiAgfVxuXG59XG5cblxuY2xhc3MgamF2YV91dGlsX3ppcF9DUkMzMiB7XG5cbiAgcHVibGljIHN0YXRpYyAndXBkYXRlKElJKUknKHRocmVhZDogSlZNVGhyZWFkLCBjcmM6IG51bWJlciwgYnl0ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gY3JjMzIoY3JjLCBbYnl0ZSAmIDB4RkZdLCAxLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ3VwZGF0ZUJ5dGVzKElbQklJKUknKHRocmVhZDogSlZNVGhyZWFkLCBjcmM6IG51bWJlciwgYjogSlZNVHlwZXMuSlZNQXJyYXk8bnVtYmVyPiwgb2ZmOiBudW1iZXIsIGxlbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gY3JjMzIoY3JjLCBpODJ1OChiLmFycmF5LCBvZmYsIGxlbiksIGxlbiwgMCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICd1cGRhdGVCeXRlQnVmZmVyKElKSUkpSScodGhyZWFkOiBKVk1UaHJlYWQsIGNyYzogbnVtYmVyLCBhZGRyOiBMb25nLCBvZmY6IG51bWJlciwgbGVuOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCBoZWFwID0gdGhyZWFkLmdldEpWTSgpLmdldEhlYXAoKTtcbiAgICBsZXQgYnVmZiA9IDxVaW50OEFycmF5PiBCRlNVdGlscy5idWZmZXIyQXJyYXlpc2goaGVhcC5nZXRfYnVmZmVyKGFkZHIudG9OdW1iZXIoKSArIG9mZiwgbGVuKSk7XG4gICAgcmV0dXJuIGNyYzMyKGNyYywgYnVmZiwgYnVmZi5sZW5ndGgsIDApO1xuICB9XG5cbn1cblxuY2xhc3MgamF2YV91dGlsX3ppcF9EZWZsYXRlciB7XG5cbiAgcHVibGljIHN0YXRpYyAnaW5pdElEcygpVicodGhyZWFkOiBKVk1UaHJlYWQpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnaW5pdChJSVopSicodGhyZWFkOiBKVk1UaHJlYWQsIGFyZzA6IG51bWJlciwgYXJnMTogbnVtYmVyLCBhcmcyOiBudW1iZXIpOiBMb25nIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnc2V0RGljdGlvbmFyeShKW0JJSSlWJyh0aHJlYWQ6IEpWTVRocmVhZCwgYXJnMDogTG9uZywgYXJnMTogSlZNVHlwZXMuSlZNQXJyYXk8bnVtYmVyPiwgYXJnMjogbnVtYmVyLCBhcmczOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZGVmbGF0ZUJ5dGVzKEpbQklJSSlJJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLmphdmFfdXRpbF96aXBfRGVmbGF0ZXIsIGFyZzA6IExvbmcsIGFyZzE6IEpWTVR5cGVzLkpWTUFycmF5PG51bWJlcj4sIGFyZzI6IG51bWJlciwgYXJnMzogbnVtYmVyLCBhcmc0OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdnZXRBZGxlcihKKUknKHRocmVhZDogSlZNVGhyZWFkLCBhcmcwOiBMb25nKTogbnVtYmVyIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAncmVzZXQoSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwgYXJnMDogTG9uZyk6IHZvaWQge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdlbmQoSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwgYXJnMDogTG9uZyk6IHZvaWQge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxufVxuXG5jbGFzcyBqYXZhX3V0aWxfemlwX0luZmxhdGVyIHtcblxuICBwdWJsaWMgc3RhdGljICdpbml0SURzKClWJyh0aHJlYWQ6IEpWTVRocmVhZCk6IHZvaWQge1xuICAgIC8vIE5PUC5cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2luaXQoWilKJyh0aHJlYWQ6IEpWTVRocmVhZCwgbm93cmFwOiBudW1iZXIpOiBMb25nIHtcbiAgICAvLyBDb3B5aW5nIGxvZ2ljIGV4YWN0bHkgZnJvbSBKYXZhJ3MgbmF0aXZlLlxuICAgIGxldCBzdHJtID0gbmV3IFpTdHJlYW1Db25zKCk7XG4gICAgbGV0IHJldCA9IGluZmxhdGUuaW5mbGF0ZUluaXQyKHN0cm0sIG5vd3JhcCA/IC1NQVhfV0JJVFMgOiBNQVhfV0JJVFMpO1xuXG4gICAgc3dpdGNoKHJldCkge1xuICAgICAgY2FzZSBabGliUmV0dXJuQ29kZS5aX09LOlxuICAgICAgICBsZXQgbnVtID0gT3BlblpTdHJlYW0oc3RybSk7XG4gICAgICAgIHJldHVybiBMb25nLmZyb21OdW1iZXIobnVtKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxldCBtc2cgPSAoc3RybS5tc2cgIT09IG51bGwpID8gc3RybS5tc2cgOlxuICAgICAgICAgICAgICAgICAgKHJldCA9PSBabGliUmV0dXJuQ29kZS5aX1NUUkVBTV9FUlJPUikgP1xuICAgICAgICAgICAgICAgICAgXCJpbmZsYXRlSW5pdDIgcmV0dXJuZWQgWl9TVFJFQU1fRVJST1JcIiA6XG4gICAgICAgICAgICAgICAgICBcInVua25vd24gZXJyb3IgaW5pdGlhbGl6aW5nIHpsaWIgbGlicmFyeVwiO1xuICAgICAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oXCJMamF2YS9sYW5nL0ludGVybmFsRXJyb3I7XCIsIG1zZyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIGV4cGxpY2l0bHkgbm90IHN1cHBvcnRlZCBieSBwYWtvLCB0aGUgbGlicmFyeSB3ZSB1c2VcbiAgICogZm9yIGluZmxhdGlvbi5cbiAgICogQHNlZSBOb3RlcyBhdCBodHRwOi8vbm9kZWNhLmdpdGh1Yi5pby9wYWtvL1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyAnc2V0RGljdGlvbmFyeShKW0JJSSlWJyh0aHJlYWQ6IEpWTVRocmVhZCwgYXJnMDogTG9uZywgYXJnMTogSlZNVHlwZXMuSlZNQXJyYXk8bnVtYmVyPiwgYXJnMjogbnVtYmVyLCBhcmczOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgLyoqXG4gICAqIE5PVEU6IGluZmxhdGVCeXRlcyBtb2RpZmllcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXMgb24gdGhlIEluZmxhdGUgb2JqZWN0OlxuICAgKlxuICAgKiAtIG9mZlxuICAgKiAtIGxlblxuICAgKiAtIG5lZWREaWN0XG4gICAqIC0gZmluaXNoZWRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgJ2luZmxhdGVCeXRlcyhKW0JJSSlJJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLmphdmFfdXRpbF96aXBfSW5mbGF0ZXIsIGFkZHI6IExvbmcsIGI6IEpWTVR5cGVzLkpWTUFycmF5PG51bWJlcj4sIG9mZjogbnVtYmVyLCBsZW46IG51bWJlcik6IG51bWJlciB7XG4gICAgbGV0IHN0cm0gPSBHZXRaU3RyZWFtKHRocmVhZCwgYWRkci50b051bWJlcigpKTtcbiAgICBpZiAoc3RybSA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHRoaXNCdWYgPSBqYXZhVGhpc1snamF2YS91dGlsL3ppcC9JbmZsYXRlci9idWYnXTtcbiAgICBsZXQgdGhpc09mZiA9IGphdmFUaGlzWydqYXZhL3V0aWwvemlwL0luZmxhdGVyL29mZiddO1xuICAgIGxldCB0aGlzTGVuID0gamF2YVRoaXNbJ2phdmEvdXRpbC96aXAvSW5mbGF0ZXIvbGVuJ107XG5cbiAgICAvLyBSZXR1cm4gMCB3aGVuIHRoZSBidWZmZXIgaXMgZW1wdHksIHdoaWNoIHRlbGxzIEphdmEgdG8gcmVmaWxsIGl0cyBidWZmZXIuXG4gICAgaWYgKHRoaXNMZW4gPT09IDAgfHwgbGVuID09PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBsZXQgaW5CdWYgPSB0aGlzQnVmLmFycmF5O1xuICAgIGxldCBvdXRCdWYgPSBiLmFycmF5O1xuXG4gICAgLy8gU2V0IHVwIHRoZSB6c3RyZWFtLlxuICAgIHN0cm0uaW5wdXQgPSBpODJ1OChpbkJ1ZiwgMCwgaW5CdWYubGVuZ3RoKTtcbiAgICBzdHJtLm5leHRfaW4gPSB0aGlzT2ZmO1xuICAgIHN0cm0uYXZhaWxfaW4gPSB0aGlzTGVuO1xuXG4gICAgc3RybS5vdXRwdXQgPSBpODJ1OChvdXRCdWYsIDAsIG91dEJ1Zi5sZW5ndGgpO1xuICAgIHN0cm0ubmV4dF9vdXQgPSBvZmY7XG4gICAgc3RybS5hdmFpbF9vdXQgPSBsZW47XG5cbiAgICAvLyBOT1RFOiBKVk0gY29kZSBkb2VzIGEgcGFydGlhbCBmbHVzaCwgYnV0IFBha28gZG9lc24ndCBzdXBwb3J0IGl0LlxuICAgIC8vIFRodXMsIHdlIGRvIGEgc3luYyBmbHVzaCBpbnN0ZWFkLlxuICAgIGxldCByZXQgPSBpbmZsYXRlLmluZmxhdGUoc3RybSwgWmxpYkZsdXNoVmFsdWUuWl9TWU5DX0ZMVVNIKTtcbiAgICBsZXQgbGVuUmVhZCA9IGxlbiAtIHN0cm0uYXZhaWxfb3V0O1xuICAgIGlmICghaXNJbnQ4QXJyYXkob3V0QnVmKSkge1xuICAgICAgLy8gU2xvdyBwYXRoOiBObyB0eXBlZCBhcnJheXMuIENvcHkgZGVjb21wcmVzc2VkIGRhdGEuXG4gICAgICAvLyB1OCAtPiBpOFxuICAgICAgbGV0IHJlc3VsdCA9IHN0cm0ub3V0cHV0O1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5SZWFkOyBpKyspIHtcbiAgICAgICAgbGV0IGJ5dGUgPSByZXN1bHRbaSArIG9mZl07XG4gICAgICAgIGlmIChieXRlID4gMTI3KSB7XG4gICAgICAgICAgLy8gU2lnbiBleHRlbmQuXG4gICAgICAgICAgYnl0ZSB8PSAweEZGRkZGRjgwXG4gICAgICAgIH1cbiAgICAgICAgb3V0QnVmW2kgKyBvZmZdID0gYnl0ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2gocmV0KSB7XG4gICAgICBjYXNlIFpsaWJSZXR1cm5Db2RlLlpfU1RSRUFNX0VORDpcbiAgICAgICAgamF2YVRoaXNbJ2phdmEvdXRpbC96aXAvSW5mbGF0ZXIvZmluaXNoZWQnXSA9IDE7XG4gICAgICAgIC8qIGZhbGwgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBabGliUmV0dXJuQ29kZS5aX09LOlxuICAgICAgICB0aGlzT2ZmICs9IHRoaXNMZW4gLSBzdHJtLmF2YWlsX2luO1xuICAgICAgICBqYXZhVGhpc1snamF2YS91dGlsL3ppcC9JbmZsYXRlci9vZmYnXSA9IHRoaXNPZmY7XG4gICAgICAgIGphdmFUaGlzWydqYXZhL3V0aWwvemlwL0luZmxhdGVyL2xlbiddID0gc3RybS5hdmFpbF9pbjtcbiAgICAgICAgcmV0dXJuIGxlblJlYWQ7XG4gICAgICBjYXNlIFpsaWJSZXR1cm5Db2RlLlpfTkVFRF9ESUNUOlxuICAgICAgICBqYXZhVGhpc1snamF2YS91dGlsL3ppcC9JbmZsYXRlci9uZWVkRGljdCddID0gMTtcbiAgICAgICAgLyogTWlnaHQgaGF2ZSBjb25zdW1lZCBzb21lIGlucHV0IGhlcmUhICovXG4gICAgICAgIHRoaXNPZmYgKz0gdGhpc0xlbiAtIHN0cm0uYXZhaWxfaW47XG4gICAgICAgIGphdmFUaGlzWydqYXZhL3V0aWwvemlwL0luZmxhdGVyL29mZiddID0gdGhpc09mZjtcbiAgICAgICAgamF2YVRoaXNbJ2phdmEvdXRpbC96aXAvSW5mbGF0ZXIvbGVuJ10gPSBzdHJtLmF2YWlsX2luO1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGNhc2UgWmxpYlJldHVybkNvZGUuWl9CVUZfRVJST1I6XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgY2FzZSBabGliUmV0dXJuQ29kZS5aX0RBVEFfRVJST1I6XG4gICAgICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvdXRpbC96aXAvRGF0YUZvcm1hdEV4Y2VwdGlvbjsnLCBzdHJtLm1zZyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9JbnRlcm5hbEVycm9yOycsIHN0cm0ubXNnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldEFkbGVyKEopSScodGhyZWFkOiBKVk1UaHJlYWQsIGFkZHI6IExvbmcpOiBudW1iZXIge1xuICAgIGxldCBzdHJtID0gR2V0WlN0cmVhbSh0aHJlYWQsIGFkZHIudG9OdW1iZXIoKSk7XG4gICAgaWYgKHN0cm0pIHtcbiAgICAgIHJldHVybiBzdHJtLmFkbGVyO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ3Jlc2V0KEopVicodGhyZWFkOiBKVk1UaHJlYWQsIGFkZHI6IExvbmcpOiB2b2lkIHtcbiAgICBsZXQgYWRkck51bSA9IGFkZHIudG9OdW1iZXIoKTtcbiAgICBsZXQgc3RybSA9IEdldFpTdHJlYW0odGhyZWFkLCBhZGRyTnVtKTtcblxuICAgIGlmIChzdHJtKSB7XG4gICAgICAvKiBUaGVyZSdzIGEgYnVnIGluIFBha28gdGhhdCBwcmV2ZW50cyByZXNldCBmcm9tIHdvcmtpbmcuXG4gICAgICBpZiAoaW5mbGF0ZS5pbmZsYXRlUmVzZXQoc3RybSkgIT09IFpsaWJSZXR1cm5Db2RlLlpfT0spIHtcbiAgICAgICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL0ludGVybmFsRXJyb3I7JywgJycpO1xuICAgICAgfVxuICAgICAgKi9cbiAgICAgIC8vIEFsbG9jYXRlIGEgbmV3IHN0cmVhbSwgaW5zdGVhZC5cbiAgICAgIGxldCBuZXdTdHJtID0gbmV3IFpTdHJlYW1Db25zKCk7XG4gICAgICBsZXQgcmV0ID0gaW5mbGF0ZS5pbmZsYXRlSW5pdDIobmV3U3RybSwgc3RybS5zdGF0ZS53cmFwID8gTUFYX1dCSVRTIDogLU1BWF9XQklUUyk7XG4gICAgICBaU3RyZWFtc1thZGRyTnVtXSA9IG5ld1N0cm07XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZW5kKEopVicodGhyZWFkOiBKVk1UaHJlYWQsIGFkZHI6IExvbmcpOiB2b2lkIHtcbiAgICBsZXQgc3RybSA9IEdldFpTdHJlYW0odGhyZWFkLCBhZGRyLnRvTnVtYmVyKCkpO1xuICAgIGlmIChzdHJtKSB7XG4gICAgICBpZiAoaW5mbGF0ZS5pbmZsYXRlRW5kKHN0cm0pID09PSBabGliUmV0dXJuQ29kZS5aX1NUUkVBTV9FUlJPUikge1xuICAgICAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvSW50ZXJuYWxFcnJvcjsnLCBzdHJtLm1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBDbG9zZVpTdHJlYW0oYWRkci50b051bWJlcigpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG5jbGFzcyBqYXZhX3V0aWxfemlwX1ppcEZpbGUge1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2luaXRJRHMoKVYnKHRocmVhZDogSlZNVGhyZWFkKTogdm9pZCB7XG4gICAgLy8gTk9QLlxuICB9XG5cbiAgLyoqXG4gICAqIE5vdGU6IFJldHVybnMgMCB3aGVuIGVudHJ5IGRvZXMgbm90IGV4aXN0LlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyAnZ2V0RW50cnkoSltCWilKJyh0aHJlYWQ6IEpWTVRocmVhZCwganpmaWxlOiBMb25nLCBuYW1lQnl0ZXM6IEpWTVR5cGVzLkpWTUFycmF5PG51bWJlcj4sIGFkZFNsYXNoOiBudW1iZXIpOiBMb25nIHtcbiAgICAvLyBBU1NVTVBUSU9OOiBOYW1lIGlzIFVURi04LlxuICAgIC8vIFNob3VsZCBhY3R1YWxseSBjb21wYXJlIHRoZSByYXcgYnl0ZXMuXG4gICAgbGV0IHppcGZzID0gR2V0WmlwRmlsZSh0aHJlYWQsIGp6ZmlsZS50b051bWJlcigpKTtcbiAgICBpZiAoemlwZnMpIHtcbiAgICAgIGxldCBuYW1lID0gbmV3IEJ1ZmZlcihuYW1lQnl0ZXMuYXJyYXkpLnRvU3RyaW5nKCd1dGY4Jyk7XG4gICAgICBpZiAobmFtZVswXSAhPT0gJy8nKSB7XG4gICAgICAgIG5hbWUgPSBgLyR7bmFtZX1gO1xuICAgICAgfVxuICAgICAgbmFtZSA9IHBhdGgucmVzb2x2ZShuYW1lKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBMb25nLmZyb21OdW1iZXIoT3BlblppcEVudHJ5KHppcGZzLmdldENlbnRyYWxEaXJlY3RvcnlFbnRyeShuYW1lKSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gTG9uZy5aRVJPO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2ZyZWVFbnRyeShKSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwganpmaWxlOiBMb25nLCBqemVudHJ5OiBMb25nKTogdm9pZCB7XG4gICAgQ2xvc2VaaXBFbnRyeShqemVudHJ5LnRvTnVtYmVyKCkpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0TmV4dEVudHJ5KEpJKUonKHRocmVhZDogSlZNVGhyZWFkLCBqemZpbGU6IExvbmcsIGluZGV4OiBudW1iZXIpOiBMb25nIHtcbiAgICBsZXQgemlwZnMgPSBHZXRaaXBGaWxlKHRocmVhZCwganpmaWxlLnRvTnVtYmVyKCkpO1xuICAgIGlmICh6aXBmcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIExvbmcuZnJvbU51bWJlcihPcGVuWmlwRW50cnkoemlwZnMuZ2V0Q2VudHJhbERpcmVjdG9yeUVudHJ5QXQoaW5kZXgpKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBMb25nLlpFUk87XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnY2xvc2UoSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwganpmaWxlOiBMb25nKTogdm9pZCB7XG4gICAgQ2xvc2VaaXBGaWxlKGp6ZmlsZS50b051bWJlcigpKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ29wZW4oTGphdmEvbGFuZy9TdHJpbmc7SUpaKUonKHRocmVhZDogSlZNVGhyZWFkLCBuYW1lT2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfU3RyaW5nLCBtb2RlOiBudW1iZXIsIG1vZGlmaWVkOiBMb25nLCB1c2VtbWFwOiBudW1iZXIpOiBMb25nIHtcbiAgICAvLyBJZ25vcmUgbW1hcCBvcHRpb24uXG4gICAgbGV0IG5hbWUgPSBuYW1lT2JqLnRvU3RyaW5nKCk7XG4gICAgLy8gT3B0aW1pemF0aW9uOiBDaGVjayBpZiB0aGlzIGlzIGEgSkFSIGZpbGUgb24gdGhlIGNsYXNzcGF0aC5cbiAgICBsZXQgY3BhdGggPSB0aHJlYWQuZ2V0QnNDbCgpLmdldENsYXNzUGF0aEl0ZW1zKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjcGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGNwYXRoSXRlbSA9IGNwYXRoW2ldO1xuICAgICAgaWYgKGNwYXRoSXRlbSBpbnN0YW5jZW9mIEFic3RyYWN0Q2xhc3NwYXRoSmFyKSB7XG4gICAgICAgIGlmIChwYXRoLnJlc29sdmUoY3BhdGhJdGVtLmdldFBhdGgoKSkgPT09IHBhdGgucmVzb2x2ZShuYW1lKSkge1xuICAgICAgICAgIHJldHVybiBMb25nLmZyb21OdW1iZXIoT3BlblppcEZpbGUoKDxBYnN0cmFjdENsYXNzcGF0aEphcj4gPGFueT4gY3BhdGhJdGVtKS5nZXRGUygpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBc3luYyBwYXRoLlxuICAgIHRocmVhZC5zZXRTdGF0dXMoVGhyZWFkU3RhdHVzLkFTWU5DX1dBSVRJTkcpO1xuICAgIGZzLnJlYWRGaWxlKG5hbWUsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKFwiTGphdmEvaW8vSU9FeGNlcHRpb247XCIsIGVyci5tZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocmVhZC5hc3luY1JldHVybihMb25nLmZyb21OdW1iZXIoT3BlblppcEZpbGUobmV3IEJyb3dzZXJGUy5GaWxlU3lzdGVtLlppcEZTKGRhdGEsIG5hbWUpKSksIG51bGwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0VG90YWwoSilJJyh0aHJlYWQ6IEpWTVRocmVhZCwganpmaWxlOiBMb25nKTogbnVtYmVyIHtcbiAgICBsZXQgemlwZnMgPSBHZXRaaXBGaWxlKHRocmVhZCwganpmaWxlLnRvTnVtYmVyKCkpO1xuICAgIGlmICh6aXBmcykge1xuICAgICAgcmV0dXJuIHppcGZzLmdldE51bWJlck9mQ2VudHJhbERpcmVjdG9yeUVudHJpZXMoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdzdGFydHNXaXRoTE9DKEopWicodGhyZWFkOiBKVk1UaHJlYWQsIGFyZzA6IExvbmcpOiBudW1iZXIge1xuICAgIC8vIFdlIGRvIG5vdCBzdXBwb3J0IGFueSB6aXAgZmlsZXMgdGhhdCBkbyBub3QgYmVnaW4gd2l0aCB0aGUgcHJvcGVyIHNpZ25hdHVyZS5cbiAgICAvLyBCb29sZWFuLCBzbyAxID09PSB0cnVlLlxuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAncmVhZChKSkpbQklJKUknKHRocmVhZDogSlZNVGhyZWFkLCBqemZpbGU6IExvbmcsIGp6ZW50cnk6IExvbmcsIHBvczogTG9uZywgYjogSlZNVHlwZXMuSlZNQXJyYXk8bnVtYmVyPiwgb2ZmOiBudW1iZXIsIGxlbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBsZXQgemlwZW50cnkgPSBHZXRaaXBFbnRyeSh0aHJlYWQsIGp6ZW50cnkudG9OdW1iZXIoKSk7XG4gICAgbGV0IHBvc051bSA9IHBvcy50b051bWJlcigpO1xuICAgIGlmICh6aXBlbnRyeSkge1xuICAgICAgaWYgKGxlbiA8PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgbGV0IGRhdGEgPSB6aXBlbnRyeS5nZXRSYXdEYXRhKCk7XG4gICAgICAvLyBTYW5pdHkgY2hlY2s6IFdpbGwgbGlrZWx5IG5ldmVyIGhhcHBlbiwgYXMgSmF2YSBjb2RlIGVuc3VyZXMgdGhhdCB0aGlzIG1ldGhvZCBpc1xuICAgICAgLy8gY2FsbGVkIGluIGEgc2FuZSBtYW5uZXIuXG4gICAgICBpZiAocG9zTnVtID49IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbihcIkxqYXZhL2lvL0lPRXhjZXB0aW9uO1wiLCBcIkVuZCBvZiB6aXAgZmlsZS5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwb3NOdW0gKyBsZW4gPiBkYXRhLmxlbmd0aCkge1xuICAgICAgICBsZW4gPSBkYXRhLmxlbmd0aCAtIHBvc051bTtcbiAgICAgIH1cbiAgICAgIGxldCBhcnIgPSBiLmFycmF5O1xuICAgICAgaWYgKENhblVzZUNvcHlGYXN0UGF0aCkge1xuICAgICAgICBsZXQgaThhcnI6IEludDhBcnJheSA9IDxhbnk+IGFycjtcbiAgICAgICAgLy8gWFhYOiBEZWZpbml0ZWx5VHlwZWQgdHlwaW5ncyBhcmUgb3V0IG9mIGRhdGUuXG4gICAgICAgIGxldCBiID0gbmV3IEJ1ZmZlcig8YW55PiBpOGFyci5idWZmZXIpO1xuICAgICAgICByZXR1cm4gZGF0YS5jb3B5KGIsIG9mZiArIGk4YXJyLmJ5dGVPZmZzZXQsIHBvc051bSwgcG9zTnVtICsgbGVuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBhcnJbb2ZmICsgaV0gPSBkYXRhLnJlYWRJbnQ4KHBvc051bSArIGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsZW47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0RW50cnlUaW1lKEopSicodGhyZWFkOiBKVk1UaHJlYWQsIGp6ZW50cnk6IExvbmcpOiBMb25nIHtcbiAgICBsZXQgemlwZW50cnkgPSBHZXRaaXBFbnRyeSh0aHJlYWQsIGp6ZW50cnkudG9OdW1iZXIoKSk7XG4gICAgaWYgKHppcGVudHJ5KSB7XG4gICAgICByZXR1cm4gTG9uZy5mcm9tTnVtYmVyKHppcGVudHJ5LnJhd0xhc3RNb2RGaWxlVGltZSgpKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdnZXRFbnRyeUNyYyhKKUonKHRocmVhZDogSlZNVGhyZWFkLCBqemVudHJ5OiBMb25nKTogTG9uZyB7XG4gICAgbGV0IHppcGVudHJ5ID0gR2V0WmlwRW50cnkodGhyZWFkLCBqemVudHJ5LnRvTnVtYmVyKCkpO1xuICAgIGlmICh6aXBlbnRyeSkge1xuICAgICAgcmV0dXJuIExvbmcuZnJvbU51bWJlcih6aXBlbnRyeS5jcmMzMigpKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdnZXRFbnRyeUNTaXplKEopSicodGhyZWFkOiBKVk1UaHJlYWQsIGp6ZW50cnk6IExvbmcpOiBMb25nIHtcbiAgICBsZXQgemlwZW50cnkgPSBHZXRaaXBFbnRyeSh0aHJlYWQsIGp6ZW50cnkudG9OdW1iZXIoKSk7XG4gICAgaWYgKHppcGVudHJ5KSB7XG4gICAgICByZXR1cm4gTG9uZy5mcm9tTnVtYmVyKHppcGVudHJ5LmNvbXByZXNzZWRTaXplKCkpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldEVudHJ5U2l6ZShKKUonKHRocmVhZDogSlZNVGhyZWFkLCBqemVudHJ5OiBMb25nKTogTG9uZyB7XG4gICAgbGV0IHppcGVudHJ5ID0gR2V0WmlwRW50cnkodGhyZWFkLCBqemVudHJ5LnRvTnVtYmVyKCkpO1xuICAgIGlmICh6aXBlbnRyeSkge1xuICAgICAgcmV0dXJuIExvbmcuZnJvbU51bWJlcih6aXBlbnRyeS51bmNvbXByZXNzZWRTaXplKCkpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldEVudHJ5TWV0aG9kKEopSScodGhyZWFkOiBKVk1UaHJlYWQsIGp6ZW50cnk6IExvbmcpOiBudW1iZXIge1xuICAgIGxldCB6aXBlbnRyeSA9IEdldFppcEVudHJ5KHRocmVhZCwganplbnRyeS50b051bWJlcigpKTtcbiAgICBpZiAoemlwZW50cnkpIHtcbiAgICAgIHJldHVybiB6aXBlbnRyeS5jb21wcmVzc2lvbk1ldGhvZCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldEVudHJ5RmxhZyhKKUknKHRocmVhZDogSlZNVGhyZWFkLCBqemVudHJ5OiBMb25nKTogbnVtYmVyIHtcbiAgICBsZXQgemlwZW50cnkgPSBHZXRaaXBFbnRyeSh0aHJlYWQsIGp6ZW50cnkudG9OdW1iZXIoKSk7XG4gICAgaWYgKHppcGVudHJ5KSB7XG4gICAgICByZXR1cm4gemlwZW50cnkuZmxhZygpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldENvbW1lbnRCeXRlcyhKKVtCJyh0aHJlYWQ6IEpWTVRocmVhZCwganpmaWxlOiBMb25nKTogSlZNVHlwZXMuSlZNQXJyYXk8bnVtYmVyPiB7XG4gICAgbGV0IHppcGZpbGUgPSBHZXRaaXBGaWxlKHRocmVhZCwganpmaWxlLnRvTnVtYmVyKCkpO1xuICAgIGlmICh6aXBmaWxlKSB7XG4gICAgICBsZXQgZW9jZCA9IHppcGZpbGUuZ2V0RW5kT2ZDZW50cmFsRGlyZWN0b3J5KCk7XG4gICAgICBsZXQgY29tbWVudCA9IGVvY2QucmF3Q2RaaXBDb21tZW50KCk7XG4gICAgICAvLyBTaG91bGQgYmUgemVyby1jb3B5IGluIG1vc3Qgc2l0dWF0aW9ucy5cbiAgICAgIHJldHVybiB1dGlsLm5ld0FycmF5RnJvbURhdGFXaXRoQ2xhc3ModGhyZWFkLCA8QXJyYXlDbGFzc0RhdGE8bnVtYmVyPj4gdGhyZWFkLmdldEJzQ2woKS5nZXRJbml0aWFsaXplZENsYXNzKHRocmVhZCwgJ1tCJyksIDxudW1iZXJbXT4gYnVmZjJpOChjb21tZW50KSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0RW50cnlCeXRlcyhKSSlbQicodGhyZWFkOiBKVk1UaHJlYWQsIGp6ZW50cnk6IExvbmcsIHR5cGU6IEpaRW50cnlUeXBlKTogSlZNVHlwZXMuSlZNQXJyYXk8bnVtYmVyPiB7XG4gICAgbGV0IHppcGVudHJ5ID0gR2V0WmlwRW50cnkodGhyZWFkLCBqemVudHJ5LnRvTnVtYmVyKCkpO1xuICAgIGlmICh6aXBlbnRyeSkge1xuICAgICAgc3dpdGNoKHR5cGUpIHtcbiAgICAgICAgY2FzZSBKWkVudHJ5VHlwZS5KWkVOVFJZX0NPTU1FTlQ6XG4gICAgICAgICAgcmV0dXJuIHV0aWwubmV3QXJyYXlGcm9tRGF0YVdpdGhDbGFzcyh0aHJlYWQsIDxBcnJheUNsYXNzRGF0YTxudW1iZXI+PiB0aHJlYWQuZ2V0QnNDbCgpLmdldEluaXRpYWxpemVkQ2xhc3ModGhyZWFkLCAnW0InKSwgPG51bWJlcltdPiBidWZmMmk4KHppcGVudHJ5LnJhd0ZpbGVDb21tZW50KCkpKTtcbiAgICAgICAgY2FzZSBKWkVudHJ5VHlwZS5KWkVOVFJZX0VYVFJBOlxuICAgICAgICAgIHJldHVybiB1dGlsLm5ld0FycmF5RnJvbURhdGFXaXRoQ2xhc3ModGhyZWFkLCA8QXJyYXlDbGFzc0RhdGE8bnVtYmVyPj4gdGhyZWFkLmdldEJzQ2woKS5nZXRJbml0aWFsaXplZENsYXNzKHRocmVhZCwgJ1tCJyksIDxudW1iZXJbXT4gYnVmZjJpOCh6aXBlbnRyeS5leHRyYUZpZWxkKCkpKTtcbiAgICAgICAgY2FzZSBKWkVudHJ5VHlwZS5KWkVOVFJZX05BTUU6XG4gICAgICAgICAgcmV0dXJuIHV0aWwubmV3QXJyYXlGcm9tRGF0YVdpdGhDbGFzcyh0aHJlYWQsIDxBcnJheUNsYXNzRGF0YTxudW1iZXI+PiB0aHJlYWQuZ2V0QnNDbCgpLmdldEluaXRpYWxpemVkQ2xhc3ModGhyZWFkLCAnW0InKSwgPG51bWJlcltdPiBidWZmMmk4KHppcGVudHJ5LnJhd0ZpbGVOYW1lKCkpKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHRvIGdldCBhbiBleGNlcHRpb24gbWVzc2FnZS4gU2hvdWxkIG5ldmVyIHJlYWxseSBuZWVkIHRvIGJlIGNhbGxlZC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgJ2dldFppcE1lc3NhZ2UoSilMamF2YS9sYW5nL1N0cmluZzsnKHRocmVhZDogSlZNVGhyZWFkLCBqemZpbGU6IExvbmcpOiBKVk1UeXBlcy5qYXZhX2xhbmdfU3RyaW5nIHtcbiAgICByZXR1cm4gdXRpbC5pbml0U3RyaW5nKHRocmVhZC5nZXRCc0NsKCksIFwiU29tZXRoaW5nIGJhZCBoYXBwZW5lZC5cIik7XG4gIH1cblxufVxuXG5yZWdpc3Rlck5hdGl2ZXMoe1xuICAnamF2YS91dGlsL2NvbmN1cnJlbnQvYXRvbWljL0F0b21pY0xvbmcnOiBqYXZhX3V0aWxfY29uY3VycmVudF9hdG9taWNfQXRvbWljTG9uZyxcbiAgJ2phdmEvdXRpbC9qYXIvSmFyRmlsZSc6IGphdmFfdXRpbF9qYXJfSmFyRmlsZSxcbiAgJ2phdmEvdXRpbC9sb2dnaW5nL0ZpbGVIYW5kbGVyJzogamF2YV91dGlsX2xvZ2dpbmdfRmlsZUhhbmRsZXIsXG4gICdqYXZhL3V0aWwvVGltZVpvbmUnOiBqYXZhX3V0aWxfVGltZVpvbmUsXG4gICdqYXZhL3V0aWwvemlwL0FkbGVyMzInOiBqYXZhX3V0aWxfemlwX0FkbGVyMzIsXG4gICdqYXZhL3V0aWwvemlwL0NSQzMyJzogamF2YV91dGlsX3ppcF9DUkMzMixcbiAgJ2phdmEvdXRpbC96aXAvRGVmbGF0ZXInOiBqYXZhX3V0aWxfemlwX0RlZmxhdGVyLFxuICAnamF2YS91dGlsL3ppcC9JbmZsYXRlcic6IGphdmFfdXRpbF96aXBfSW5mbGF0ZXIsXG4gICdqYXZhL3V0aWwvemlwL1ppcEZpbGUnOiBqYXZhX3V0aWxfemlwX1ppcEZpbGVcbn0pO1xuIl19