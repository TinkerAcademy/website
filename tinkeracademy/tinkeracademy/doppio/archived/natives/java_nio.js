var java_nio_Bits=function(){function a(){}return a["copyFromShortArray(Ljava/lang/Object;JJJ)V"]=function(a,b,c,d,e){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["copyToShortArray(JLjava/lang/Object;JJ)V"]=function(a,b,c,d,e){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["copyFromIntArray(Ljava/lang/Object;JJJ)V"]=function(a,b,c,d,e){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["copyToIntArray(JLjava/lang/Object;JJ)V"]=function(a,b,c,d,e){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["copyFromLongArray(Ljava/lang/Object;JJJ)V"]=function(a,b,c,d,e){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["copyToLongArray(JLjava/lang/Object;JJ)V"]=function(a,b,c,d,e){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),java_nio_MappedByteBuffer=function(){function a(){}return a["isLoaded0(JJI)Z"]=function(a,b,c,d,e){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["load0(JJ)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["force0(Ljava/io/FileDescriptor;JJ)V"]=function(a,b,c,d,e){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),java_nio_charset_Charset$3=function(){function a(){}return a["run()Ljava/lang/Object;"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a}();registerNatives({"java/nio/Bits":java_nio_Bits,"java/nio/MappedByteBuffer":java_nio_MappedByteBuffer,"java/nio/charset/Charset$3":java_nio_charset_Charset$3});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9uYXRpdmVzL2phdmFfbmlvLnRzIl0sIm5hbWVzIjpbImphdmFfbmlvX0JpdHMiLCJqYXZhX25pb19CaXRzLmNvcHlGcm9tU2hvcnRBcnJheShMamF2YS9sYW5nL09iamVjdDtKSkopViIsImphdmFfbmlvX0JpdHMuY29weVRvU2hvcnRBcnJheShKTGphdmEvbGFuZy9PYmplY3Q7SkopViIsImphdmFfbmlvX0JpdHMuY29weUZyb21JbnRBcnJheShMamF2YS9sYW5nL09iamVjdDtKSkopViIsImphdmFfbmlvX0JpdHMuY29weVRvSW50QXJyYXkoSkxqYXZhL2xhbmcvT2JqZWN0O0pKKVYiLCJqYXZhX25pb19CaXRzLmNvcHlGcm9tTG9uZ0FycmF5KExqYXZhL2xhbmcvT2JqZWN0O0pKSilWIiwiamF2YV9uaW9fQml0cy5jb3B5VG9Mb25nQXJyYXkoSkxqYXZhL2xhbmcvT2JqZWN0O0pKKVYiLCJqYXZhX25pb19NYXBwZWRCeXRlQnVmZmVyIiwiamF2YV9uaW9fTWFwcGVkQnl0ZUJ1ZmZlci5pc0xvYWRlZDAoSkpJKVoiLCJqYXZhX25pb19NYXBwZWRCeXRlQnVmZmVyLmxvYWQwKEpKKVYiLCJqYXZhX25pb19NYXBwZWRCeXRlQnVmZmVyLmZvcmNlMChMamF2YS9pby9GaWxlRGVzY3JpcHRvcjtKSilWIiwiamF2YV9uaW9fY2hhcnNldF9DaGFyc2V0JDMiLCJqYXZhX25pb19jaGFyc2V0X0NoYXJzZXQkMy5ydW4oKUxqYXZhL2xhbmcvT2JqZWN0OyJdLCJtYXBwaW5ncyI6IkFBWUEsR0FBQSxlQUFBLFdBQUFBLFFBQUFBLE1BMEJBQSxNQXhCZ0JBLEdBQUFBLDhDQUFkQSxTQUEyREEsRUFBbUJBLEVBQWlDQSxFQUFZQSxFQUFZQSxHQUNySUMsRUFBT0Esa0JBQWtCQSxtQ0FBb0NBLG1DQUdqREQsRUFBQUEsNENBQWRBLFNBQXlEQSxFQUFtQkEsRUFBWUEsRUFBaUNBLEVBQVlBLEdBQ25JRSxFQUFPQSxrQkFBa0JBLG1DQUFvQ0EsbUNBR2pERixFQUFBQSw0Q0FBZEEsU0FBeURBLEVBQW1CQSxFQUFpQ0EsRUFBWUEsRUFBWUEsR0FDbklHLEVBQU9BLGtCQUFrQkEsbUNBQW9DQSxtQ0FHakRILEVBQUFBLDBDQUFkQSxTQUF1REEsRUFBbUJBLEVBQVlBLEVBQWlDQSxFQUFZQSxHQUNqSUksRUFBT0Esa0JBQWtCQSxtQ0FBb0NBLG1DQUdqREosRUFBQUEsNkNBQWRBLFNBQTBEQSxFQUFtQkEsRUFBaUNBLEVBQVlBLEVBQVlBLEdBQ3BJSyxFQUFPQSxrQkFBa0JBLG1DQUFvQ0EsbUNBR2pETCxFQUFBQSwyQ0FBZEEsU0FBd0RBLEVBQW1CQSxFQUFZQSxFQUFpQ0EsRUFBWUEsR0FDbElNLEVBQU9BLGtCQUFrQkEsbUNBQW9DQSxtQ0FHakVOLEtBRUEsMEJBQUEsV0FBQU8sUUFBQUEsTUFlQUEsTUFiZ0JBLEdBQUFBLG1CQUFkQSxTQUFnQ0EsRUFBbUJBLEVBQThDQSxFQUFZQSxFQUFZQSxHQUV2SEMsTUFEQUEsR0FBT0Esa0JBQWtCQSxtQ0FBb0NBLGtDQUN0REEsR0FHS0QsRUFBQUEsY0FBZEEsU0FBMkJBLEVBQW1CQSxFQUE4Q0EsRUFBWUEsR0FDdEdFLEVBQU9BLGtCQUFrQkEsbUNBQW9DQSxtQ0FHakRGLEVBQUFBLHVDQUFkQSxTQUFvREEsRUFBbUJBLEVBQThDQSxFQUF1Q0EsRUFBWUEsR0FDdEtHLEVBQU9BLGtCQUFrQkEsbUNBQW9DQSxtQ0FHakVILEtBRUEsMkJBQUEsV0FBQUksUUFBQUEsTUFPQUEsTUFMZ0JBLEdBQUFBLDJCQUFkQSxTQUF3Q0EsRUFBbUJBLEdBRXpEQyxNQURBQSxHQUFPQSxrQkFBa0JBLG1DQUFvQ0Esa0NBQ3REQSxNQUdYRCxJQUdBLGtCQUNFLGdCQUFpQixjQUNqQiw0QkFBNkIsMEJBQzdCLDZCQUE4QiIsImZpbGUiOiJqYXZhX25pby5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKVk1UeXBlcyA9IHJlcXVpcmUoJy4uLy4uL2luY2x1ZGVzL0pWTVR5cGVzJyk7XG5pbXBvcnQgKiBhcyBEb3BwaW8gZnJvbSAnLi4vZG9wcGlvanZtJztcbmltcG9ydCBKVk1UaHJlYWQgPSBEb3BwaW8uVk0uVGhyZWFkaW5nLkpWTVRocmVhZDtcbmltcG9ydCBSZWZlcmVuY2VDbGFzc0RhdGEgPSBEb3BwaW8uVk0uQ2xhc3NGaWxlLlJlZmVyZW5jZUNsYXNzRGF0YTtcbmltcG9ydCBsb2dnaW5nID0gRG9wcGlvLkRlYnVnLkxvZ2dpbmc7XG5pbXBvcnQgdXRpbCA9IERvcHBpby5WTS5VdGlsO1xuaW1wb3J0IExvbmcgPSBEb3BwaW8uVk0uTG9uZztcbmltcG9ydCBDbGFzc0RhdGEgPSBEb3BwaW8uVk0uQ2xhc3NGaWxlLkNsYXNzRGF0YTtcbmltcG9ydCBUaHJlYWRTdGF0dXMgPSBEb3BwaW8uVk0uRW51bXMuVGhyZWFkU3RhdHVzO1xuXG5kZWNsYXJlIHZhciByZWdpc3Rlck5hdGl2ZXM6IChuYXRpdmVzOiBhbnkpID0+IHZvaWQ7XG5cbmNsYXNzIGphdmFfbmlvX0JpdHMge1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2NvcHlGcm9tU2hvcnRBcnJheShMamF2YS9sYW5nL09iamVjdDtKSkopVicodGhyZWFkOiBKVk1UaHJlYWQsIGFyZzA6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIGFyZzE6IExvbmcsIGFyZzI6IExvbmcsIGFyZzM6IExvbmcpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnY29weVRvU2hvcnRBcnJheShKTGphdmEvbGFuZy9PYmplY3Q7SkopVicodGhyZWFkOiBKVk1UaHJlYWQsIGFyZzA6IExvbmcsIGFyZzE6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIGFyZzI6IExvbmcsIGFyZzM6IExvbmcpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnY29weUZyb21JbnRBcnJheShMamF2YS9sYW5nL09iamVjdDtKSkopVicodGhyZWFkOiBKVk1UaHJlYWQsIGFyZzA6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIGFyZzE6IExvbmcsIGFyZzI6IExvbmcsIGFyZzM6IExvbmcpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnY29weVRvSW50QXJyYXkoSkxqYXZhL2xhbmcvT2JqZWN0O0pKKVYnKHRocmVhZDogSlZNVGhyZWFkLCBhcmcwOiBMb25nLCBhcmcxOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBhcmcyOiBMb25nLCBhcmczOiBMb25nKTogdm9pZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2NvcHlGcm9tTG9uZ0FycmF5KExqYXZhL2xhbmcvT2JqZWN0O0pKSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwgYXJnMDogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCwgYXJnMTogTG9uZywgYXJnMjogTG9uZywgYXJnMzogTG9uZyk6IHZvaWQge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdjb3B5VG9Mb25nQXJyYXkoSkxqYXZhL2xhbmcvT2JqZWN0O0pKKVYnKHRocmVhZDogSlZNVGhyZWFkLCBhcmcwOiBMb25nLCBhcmcxOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBhcmcyOiBMb25nLCBhcmczOiBMb25nKTogdm9pZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG59XG5cbmNsYXNzIGphdmFfbmlvX01hcHBlZEJ5dGVCdWZmZXIge1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2lzTG9hZGVkMChKSkkpWicodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5qYXZhX25pb19NYXBwZWRCeXRlQnVmZmVyLCBhcmcwOiBMb25nLCBhcmcxOiBMb25nLCBhcmcyOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdsb2FkMChKSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLmphdmFfbmlvX01hcHBlZEJ5dGVCdWZmZXIsIGFyZzA6IExvbmcsIGFyZzE6IExvbmcpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZm9yY2UwKExqYXZhL2lvL0ZpbGVEZXNjcmlwdG9yO0pKKVYnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuamF2YV9uaW9fTWFwcGVkQnl0ZUJ1ZmZlciwgYXJnMDogSlZNVHlwZXMuamF2YV9pb19GaWxlRGVzY3JpcHRvciwgYXJnMTogTG9uZywgYXJnMjogTG9uZyk6IHZvaWQge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxufVxuXG5jbGFzcyBqYXZhX25pb19jaGFyc2V0X0NoYXJzZXQkMyB7XG5cbiAgcHVibGljIHN0YXRpYyAncnVuKClMamF2YS9sYW5nL09iamVjdDsnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuamF2YV9uaW9fY2hhcnNldF9DaGFyc2V0JDMpOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0IHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbn1cblxuLy8gRXhwb3J0IGxpbmUuIFRoaXMgaXMgd2hhdCBEb3BwaW9KVk0gc2Vlcy5cbnJlZ2lzdGVyTmF0aXZlcyh7XG4gICdqYXZhL25pby9CaXRzJzogamF2YV9uaW9fQml0cyxcbiAgJ2phdmEvbmlvL01hcHBlZEJ5dGVCdWZmZXInOiBqYXZhX25pb19NYXBwZWRCeXRlQnVmZmVyLFxuICAnamF2YS9uaW8vY2hhcnNldC9DaGFyc2V0JDMnOiBqYXZhX25pb19jaGFyc2V0X0NoYXJzZXQkM1xufSk7XG4iXX0=