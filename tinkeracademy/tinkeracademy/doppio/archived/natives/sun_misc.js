function getFieldInfo(a,b,c,d){var e,f,g,h,i=c.getClass(),j=b.getClass().getConstructor(a),k=1;return"Ljava/lang/Object;"===i.getInternalName()?(g=c.$staticFieldBase,f=g.getConstructor(a),e=g.getStaticFieldFromVMIndex(d.toInt()).fullName):i instanceof ArrayClassData?(h=util.internal2external[i.getInternalName()[1]],h||(h="OBJECT"),h=h.toUpperCase(),k=j["sun/misc/Unsafe/ARRAY_"+h+"_INDEX_SCALE"],k||(k=1),f=c.array,e=""+d.toInt()/k):(g=c.getClass(),f=c,e=g.getObjectFieldFromVMIndex(d.toInt()).fullName),[f,e]}function unsafeCompareAndSwap(a,b,c,d,e,f){var g=getFieldInfo(a,b,c,d),h=g[0][g[1]];return h===e?(g[0][g[1]]=f,!0):!1}function getFromVMIndex(a,b,c,d){var e=getFieldInfo(a,b,c,d);return e[0][e[1]]}function setFromVMIndex(a,b,c,d,e){var f=getFieldInfo(a,b,c,d);f[0][f[1]]=e}var Doppio=require("../doppiojvm"),ReferenceClassData=Doppio.VM.ClassFile.ReferenceClassData,ArrayClassData=Doppio.VM.ClassFile.ArrayClassData,util=Doppio.VM.Util,Long=Doppio.VM.Long,ThreadStatus=Doppio.VM.Enums.ThreadStatus,assert=Doppio.Debug.Assert,sun_misc_GC=function(){function a(){}return a["maxObjectInspectionAge()J"]=function(a){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a}(),sun_misc_MessageUtils=function(){function a(){}return a["toStderr(Ljava/lang/String;)V"]=function(a,b){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["toStdout(Ljava/lang/String;)V"]=function(a,b){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),sun_misc_NativeSignalHandler=function(){function a(){}return a["handle0(IJ)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),sun_misc_Perf=function(){function a(){}return a["attach(Ljava/lang/String;II)Ljava/nio/ByteBuffer;"]=function(a,b,c,d,e){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["detach(Ljava/nio/ByteBuffer;)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["createLong(Ljava/lang/String;IIJ)Ljava/nio/ByteBuffer;"]=function(a,b,c,d,e,f){a["import"]("Ljava/nio/DirectByteBuffer;",function(b){var c=new b(a),d=a.getJVM().getHeap(),e=d.malloc(8);c["<init>(JI)V"](a,[Long.fromNumber(e),null,8],function(b){b?a.throwException(b):(d.store_word(e,f.getLowBits()),d.store_word(e+4,f.getHighBits()),a.asyncReturn(c))})})},a["createByteArray(Ljava/lang/String;II[BI)Ljava/nio/ByteBuffer;"]=function(a,b,c,d,e,f,g){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["highResCounter()J"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["highResFrequency()J"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["registerNatives()V"]=function(a){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),sun_misc_Signal=function(){function a(){}return a["findSignal(Ljava/lang/String;)I"]=function(a,b){return-1},a["handle0(IJ)J"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["raise0(I)V"]=function(a,b){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),sun_misc_Unsafe=function(){function a(){}return a["getByte(J)B"]=function(a,b,c){var d=a.getJVM().getHeap();return d.get_signed_byte(c.toNumber())},a["putByte(JB)V"]=function(a,b,c,d){var e=a.getJVM().getHeap();e.set_signed_byte(c.toNumber(),d)},a["getShort(J)S"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["putShort(JS)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["getChar(J)C"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["putChar(JC)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["getInt(J)I"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["putInt(JI)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["getLong(J)J"]=function(a,b,c){var d=a.getJVM().getHeap(),e=c.toNumber();return new Long(d.get_word(e),d.get_word(e+4))},a["putLong(JJ)V"]=function(a,b,c,d){var e=a.getJVM().getHeap(),f=c.toNumber();e.store_word(f,d.getLowBits()),e.store_word(f+4,d.getHighBits())},a["getFloat(J)F"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["putFloat(JF)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["getDouble(J)D"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["putDouble(JD)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["getAddress(J)J"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["putAddress(JJ)V"]=function(a,b,c,d){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["allocateMemory(J)J"]=function(a,b,c){var d=a.getJVM().getHeap();return Long.fromNumber(d.malloc(c.toNumber()))},a["reallocateMemory(JJ)J"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["setMemory(Ljava/lang/Object;JJB)V"]=function(a,b,c,d,e,f){if(null===c){var g,h=d.toNumber(),i=e.toNumber(),j=a.getJVM().getHeap();for(g=0;i>g;g++)j.set_signed_byte(h+g,f)}else a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["copyMemory(Ljava/lang/Object;JLjava/lang/Object;JJ)V"]=function(a,b,c,d,e,f,g){var h=a.getJVM().getHeap(),i=d.toNumber(),j=f.toNumber(),k=g.toNumber();if(null===c&&null===e)h.memcpy(i,j,k);else if(null===c&&null!==e)if(util.is_array_type(e.getClass().getInternalName())&&util.is_primitive_type(e.getClass().getComponentClass().getInternalName())){var l=e;switch(l.getClass().getComponentClass().getInternalName()){case"B":for(var m=0;k>m;m++)l.array[j+m]=h.get_signed_byte(i+m);break;default:a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented. destArray type: "+l.getClass().getComponentClass().getInternalName())}}else a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.");else if(null!==c&&null===e)if(util.is_array_type(c.getClass().getInternalName())&&util.is_primitive_type(c.getClass().getComponentClass().getInternalName())){var n=c;switch(n.getClass().getComponentClass().getInternalName()){case"B":case"C":for(var m=0;k>m;m++)h.set_signed_byte(j+m,n.array[i+m]);break;default:a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented. srcArray:"+n.getClass().getComponentClass().getInternalName())}}else a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.");else a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented. Both src and dest are arrays?")},a["freeMemory(J)V"]=function(a,b,c){var d=a.getJVM().getHeap();d.free(c.toNumber())},a["staticFieldOffset(Ljava/lang/reflect/Field;)J"]=function(a,b,c){var d=c["java/lang/reflect/Field/clazz"].$cls;return Long.fromNumber(d.getVMIndexForField(d.getFieldFromSlot(c["java/lang/reflect/Field/slot"])))},a["objectFieldOffset(Ljava/lang/reflect/Field;)J"]=function(a,b,c){var d=c["java/lang/reflect/Field/clazz"].$cls;return Long.fromNumber(d.getVMIndexForField(d.getFieldFromSlot(c["java/lang/reflect/Field/slot"])))},a["staticFieldBase(Ljava/lang/reflect/Field;)Ljava/lang/Object;"]=function(a,b,c){var d=new(a.getBsCl().getInitializedClass(a,"Ljava/lang/Object;").getConstructor(a))(a);return d.$staticFieldBase=c["java/lang/reflect/Field/clazz"].$cls,d},a["ensureClassInitialized(Ljava/lang/Class;)V"]=function(a,b,c){c.$cls.isInitialized(a)||(a.setStatus(ThreadStatus.ASYNC_WAITING),c.$cls.initialize(a,function(b){null!=b&&a.asyncReturn()},!0))},a["arrayBaseOffset(Ljava/lang/Class;)I"]=function(a,b,c){return 0},a["arrayIndexScale(Ljava/lang/Class;)I"]=function(a,b,c){var d=c.$cls;if(!(d instanceof ArrayClassData))return-1;switch(d.getComponentClass().getInternalName()[0]){case"L":case"[":case"F":case"I":return 4;case"B":case"Z":return 1;case"C":case"S":return 2;case"D":case"J":return 8;default:return-1}},a["addressSize()I"]=function(a,b){return 4},a["pageSize()I"]=function(a,b){return 4096},a["defineClass(Ljava/lang/String;[BIILjava/lang/ClassLoader;Ljava/security/ProtectionDomain;)Ljava/lang/Class;"]=function(a,b,c,d,e,f,g,h){var i=util.getLoader(a,g),j=i.defineClass(a,util.int_classname(c.toString()),util.byteArray2Buffer(d.array,e,f),h);null!==j&&(a.setStatus(ThreadStatus.ASYNC_WAITING),j.resolve(a,function(b){null!==b&&a.asyncReturn(b.getClassObject(a))}))},a["allocateInstance(Ljava/lang/Class;)Ljava/lang/Object;"]=function(a,b,c){var d=c.$cls;return d.isInitialized(a)?new(d.getConstructor(a))(a):(a.setStatus(ThreadStatus.ASYNC_WAITING),void d.initialize(a,function(){a.asyncReturn(new(d.getConstructor(a))(a))}))},a["monitorEnter(Ljava/lang/Object;)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["monitorExit(Ljava/lang/Object;)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["tryMonitorEnter(Ljava/lang/Object;)Z"]=function(a,b,c){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["throwException(Ljava/lang/Throwable;)V"]=function(a,b,c){a.throwException(c)},a["unpark(Ljava/lang/Object;)V"]=function(a,b,c){a.getJVM().getParker().unpark(c.$thread)},a["park(ZJ)V"]=function(a,b,c,d){var e=1/0,f=a.getJVM().getParker();c?(e=d.toNumber()-(new Date).getTime(),0>e&&(e=0)):d.toNumber()>0&&(e=d.toNumber()/1e6);var g;e!==1/0&&(g=setTimeout(function(){f.completelyUnpark(a)},e)),f.park(a,function(){clearTimeout(g),a.asyncReturn()})},a["getLoadAverage([DI)I"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["shouldBeInitialized(Ljava/lang/Class;)Z"]=function(a,b,c){return c.$cls.isInitialized(a)?0:1},a["defineAnonymousClass(Ljava/lang/Class;[B[Ljava/lang/Object;)Ljava/lang/Class;"]=function(a,b,c,d,e){return new ReferenceClassData(new Buffer(d.array),null,c.$cls.getLoader(),e).getClassObject(a)},a["loadFence()V"]=function(a,b){},a["storeFence()V"]=function(a,b){},a["fullFence()V"]=function(a,b){},a["getInt(Ljava/lang/Object;J)I"]=getFromVMIndex,a["putInt(Ljava/lang/Object;JI)V"]=setFromVMIndex,a["getObject(Ljava/lang/Object;J)Ljava/lang/Object;"]=getFromVMIndex,a["putObject(Ljava/lang/Object;JLjava/lang/Object;)V"]=setFromVMIndex,a["getBoolean(Ljava/lang/Object;J)Z"]=getFromVMIndex,a["putBoolean(Ljava/lang/Object;JZ)V"]=setFromVMIndex,a["getByte(Ljava/lang/Object;J)B"]=getFromVMIndex,a["putByte(Ljava/lang/Object;JB)V"]=setFromVMIndex,a["getShort(Ljava/lang/Object;J)S"]=getFromVMIndex,a["putShort(Ljava/lang/Object;JS)V"]=setFromVMIndex,a["getChar(Ljava/lang/Object;J)C"]=getFromVMIndex,a["putChar(Ljava/lang/Object;JC)V"]=setFromVMIndex,a["getLong(Ljava/lang/Object;J)J"]=getFromVMIndex,a["putLong(Ljava/lang/Object;JJ)V"]=setFromVMIndex,a["getFloat(Ljava/lang/Object;J)F"]=getFromVMIndex,a["putFloat(Ljava/lang/Object;JF)V"]=setFromVMIndex,a["getDouble(Ljava/lang/Object;J)D"]=getFromVMIndex,a["putDouble(Ljava/lang/Object;JD)V"]=setFromVMIndex,a["compareAndSwapObject(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z"]=unsafeCompareAndSwap,a["compareAndSwapInt(Ljava/lang/Object;JII)Z"]=unsafeCompareAndSwap,a["compareAndSwapLong(Ljava/lang/Object;JJJ)Z"]=unsafeCompareAndSwap,a["getObjectVolatile(Ljava/lang/Object;J)Ljava/lang/Object;"]=getFromVMIndex,a["putObjectVolatile(Ljava/lang/Object;JLjava/lang/Object;)V"]=setFromVMIndex,a["getIntVolatile(Ljava/lang/Object;J)I"]=getFromVMIndex,a["putIntVolatile(Ljava/lang/Object;JI)V"]=setFromVMIndex,a["getBooleanVolatile(Ljava/lang/Object;J)Z"]=getFromVMIndex,a["putBooleanVolatile(Ljava/lang/Object;JZ)V"]=setFromVMIndex,a["getByteVolatile(Ljava/lang/Object;J)B"]=getFromVMIndex,a["putByteVolatile(Ljava/lang/Object;JB)V"]=setFromVMIndex,a["getShortVolatile(Ljava/lang/Object;J)S"]=getFromVMIndex,a["putShortVolatile(Ljava/lang/Object;JS)V"]=setFromVMIndex,a["getCharVolatile(Ljava/lang/Object;J)C"]=getFromVMIndex,a["putCharVolatile(Ljava/lang/Object;JC)V"]=setFromVMIndex,a["getLongVolatile(Ljava/lang/Object;J)J"]=getFromVMIndex,a["putLongVolatile(Ljava/lang/Object;JJ)V"]=setFromVMIndex,a["getFloatVolatile(Ljava/lang/Object;J)F"]=getFromVMIndex,a["putFloatVolatile(Ljava/lang/Object;JF)V"]=setFromVMIndex,a["getDoubleVolatile(Ljava/lang/Object;J)D"]=getFromVMIndex,a["putDoubleVolatile(Ljava/lang/Object;JD)V"]=setFromVMIndex,a["putOrderedObject(Ljava/lang/Object;JLjava/lang/Object;)V"]=setFromVMIndex,a["putOrderedInt(Ljava/lang/Object;JI)V"]=setFromVMIndex,a["putOrderedLong(Ljava/lang/Object;JJ)V"]=setFromVMIndex,a}(),sun_misc_Version=function(){function a(){}return a["getJvmSpecialVersion()Ljava/lang/String;"]=function(a){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getJdkSpecialVersion()Ljava/lang/String;"]=function(a){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["getJvmVersionInfo()Z"]=function(a){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),0},a["getJdkVersionInfo()V"]=function(a){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),sun_misc_VM=function(){function a(){}return a["initialize()V"]=function(a){},a["latestUserDefinedLoader()Ljava/lang/ClassLoader;"]=function(a){var b,c,d=a.getStackTrace(),e=a.getBsCl();for(b=d.length-1;b>=0;b--)if(c=d[b].method.cls.getLoader(),c!==e)return c.getLoaderObject();return null},a}(),sun_misc_VMSupport=function(){function a(){}return a["initAgentProperties(Ljava/util/Properties;)Ljava/util/Properties;"]=function(a,b){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a}(),sun_misc_URLClassPath=function(){function a(){}return a["getLookupCacheURLs(Ljava/lang/ClassLoader;)[Ljava/net/URL;"]=function(a,b){return null},a["getLookupCacheForClassLoader(Ljava/lang/ClassLoader;Ljava/lang/String;)[I"]=function(a,b,c){return null},a["knownToNotExist0(Ljava/lang/ClassLoader;Ljava/lang/String;)Z"]=function(a,b,c){return!1},a}();registerNatives({"sun/misc/GC":sun_misc_GC,"sun/misc/MessageUtils":sun_misc_MessageUtils,"sun/misc/NativeSignalHandler":sun_misc_NativeSignalHandler,"sun/misc/Perf":sun_misc_Perf,"sun/misc/Signal":sun_misc_Signal,"sun/misc/Unsafe":sun_misc_Unsafe,"sun/misc/Version":sun_misc_Version,"sun/misc/VM":sun_misc_VM,"sun/misc/VMSupport":sun_misc_VMSupport,"sun/misc/URLClassPath":sun_misc_URLClassPath});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9uYXRpdmVzL3N1bl9taXNjLnRzIl0sIm5hbWVzIjpbImdldEZpZWxkSW5mbyIsInVuc2FmZUNvbXBhcmVBbmRTd2FwIiwiZ2V0RnJvbVZNSW5kZXgiLCJzZXRGcm9tVk1JbmRleCIsInN1bl9taXNjX0dDIiwic3VuX21pc2NfR0MubWF4T2JqZWN0SW5zcGVjdGlvbkFnZSgpSiIsInN1bl9taXNjX01lc3NhZ2VVdGlscyIsInN1bl9taXNjX01lc3NhZ2VVdGlscy50b1N0ZGVycihMamF2YS9sYW5nL1N0cmluZzspViIsInN1bl9taXNjX01lc3NhZ2VVdGlscy50b1N0ZG91dChMamF2YS9sYW5nL1N0cmluZzspViIsInN1bl9taXNjX05hdGl2ZVNpZ25hbEhhbmRsZXIiLCJzdW5fbWlzY19OYXRpdmVTaWduYWxIYW5kbGVyLmhhbmRsZTAoSUopViIsInN1bl9taXNjX1BlcmYiLCJzdW5fbWlzY19QZXJmLmF0dGFjaChMamF2YS9sYW5nL1N0cmluZztJSSlMamF2YS9uaW8vQnl0ZUJ1ZmZlcjsiLCJzdW5fbWlzY19QZXJmLmRldGFjaChMamF2YS9uaW8vQnl0ZUJ1ZmZlcjspViIsInN1bl9taXNjX1BlcmYuY3JlYXRlTG9uZyhMamF2YS9sYW5nL1N0cmluZztJSUopTGphdmEvbmlvL0J5dGVCdWZmZXI7Iiwic3VuX21pc2NfUGVyZi5jcmVhdGVCeXRlQXJyYXkoTGphdmEvbGFuZy9TdHJpbmc7SUlbQkkpTGphdmEvbmlvL0J5dGVCdWZmZXI7Iiwic3VuX21pc2NfUGVyZi5oaWdoUmVzQ291bnRlcigpSiIsInN1bl9taXNjX1BlcmYuaGlnaFJlc0ZyZXF1ZW5jeSgpSiIsInN1bl9taXNjX1BlcmYucmVnaXN0ZXJOYXRpdmVzKClWIiwic3VuX21pc2NfU2lnbmFsIiwic3VuX21pc2NfU2lnbmFsLmZpbmRTaWduYWwoTGphdmEvbGFuZy9TdHJpbmc7KUkiLCJzdW5fbWlzY19TaWduYWwuaGFuZGxlMChJSilKIiwic3VuX21pc2NfU2lnbmFsLnJhaXNlMChJKVYiLCJzdW5fbWlzY19VbnNhZmUiLCJzdW5fbWlzY19VbnNhZmUuZ2V0Qnl0ZShKKUIiLCJzdW5fbWlzY19VbnNhZmUucHV0Qnl0ZShKQilWIiwic3VuX21pc2NfVW5zYWZlLmdldFNob3J0KEopUyIsInN1bl9taXNjX1Vuc2FmZS5wdXRTaG9ydChKUylWIiwic3VuX21pc2NfVW5zYWZlLmdldENoYXIoSilDIiwic3VuX21pc2NfVW5zYWZlLnB1dENoYXIoSkMpViIsInN1bl9taXNjX1Vuc2FmZS5nZXRJbnQoSilJIiwic3VuX21pc2NfVW5zYWZlLnB1dEludChKSSlWIiwic3VuX21pc2NfVW5zYWZlLmdldExvbmcoSilKIiwic3VuX21pc2NfVW5zYWZlLnB1dExvbmcoSkopViIsInN1bl9taXNjX1Vuc2FmZS5nZXRGbG9hdChKKUYiLCJzdW5fbWlzY19VbnNhZmUucHV0RmxvYXQoSkYpViIsInN1bl9taXNjX1Vuc2FmZS5nZXREb3VibGUoSilEIiwic3VuX21pc2NfVW5zYWZlLnB1dERvdWJsZShKRClWIiwic3VuX21pc2NfVW5zYWZlLmdldEFkZHJlc3MoSilKIiwic3VuX21pc2NfVW5zYWZlLnB1dEFkZHJlc3MoSkopViIsInN1bl9taXNjX1Vuc2FmZS5hbGxvY2F0ZU1lbW9yeShKKUoiLCJzdW5fbWlzY19VbnNhZmUucmVhbGxvY2F0ZU1lbW9yeShKSilKIiwic3VuX21pc2NfVW5zYWZlLnNldE1lbW9yeShMamF2YS9sYW5nL09iamVjdDtKSkIpViIsInN1bl9taXNjX1Vuc2FmZS5jb3B5TWVtb3J5KExqYXZhL2xhbmcvT2JqZWN0O0pMamF2YS9sYW5nL09iamVjdDtKSilWIiwic3VuX21pc2NfVW5zYWZlLmZyZWVNZW1vcnkoSilWIiwic3VuX21pc2NfVW5zYWZlLnN0YXRpY0ZpZWxkT2Zmc2V0KExqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDspSiIsInN1bl9taXNjX1Vuc2FmZS5vYmplY3RGaWVsZE9mZnNldChMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7KUoiLCJzdW5fbWlzY19VbnNhZmUuc3RhdGljRmllbGRCYXNlKExqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDspTGphdmEvbGFuZy9PYmplY3Q7Iiwic3VuX21pc2NfVW5zYWZlLmVuc3VyZUNsYXNzSW5pdGlhbGl6ZWQoTGphdmEvbGFuZy9DbGFzczspViIsInN1bl9taXNjX1Vuc2FmZS5hcnJheUJhc2VPZmZzZXQoTGphdmEvbGFuZy9DbGFzczspSSIsInN1bl9taXNjX1Vuc2FmZS5hcnJheUluZGV4U2NhbGUoTGphdmEvbGFuZy9DbGFzczspSSIsInN1bl9taXNjX1Vuc2FmZS5hZGRyZXNzU2l6ZSgpSSIsInN1bl9taXNjX1Vuc2FmZS5wYWdlU2l6ZSgpSSIsInN1bl9taXNjX1Vuc2FmZS5kZWZpbmVDbGFzcyhMamF2YS9sYW5nL1N0cmluZztbQklJTGphdmEvbGFuZy9DbGFzc0xvYWRlcjtMamF2YS9zZWN1cml0eS9Qcm90ZWN0aW9uRG9tYWluOylMamF2YS9sYW5nL0NsYXNzOyIsInN1bl9taXNjX1Vuc2FmZS5hbGxvY2F0ZUluc3RhbmNlKExqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvT2JqZWN0OyIsInN1bl9taXNjX1Vuc2FmZS5tb25pdG9yRW50ZXIoTGphdmEvbGFuZy9PYmplY3Q7KVYiLCJzdW5fbWlzY19VbnNhZmUubW9uaXRvckV4aXQoTGphdmEvbGFuZy9PYmplY3Q7KVYiLCJzdW5fbWlzY19VbnNhZmUudHJ5TW9uaXRvckVudGVyKExqYXZhL2xhbmcvT2JqZWN0OylaIiwic3VuX21pc2NfVW5zYWZlLnRocm93RXhjZXB0aW9uKExqYXZhL2xhbmcvVGhyb3dhYmxlOylWIiwic3VuX21pc2NfVW5zYWZlLnVucGFyayhMamF2YS9sYW5nL09iamVjdDspViIsInN1bl9taXNjX1Vuc2FmZS5wYXJrKFpKKVYiLCJzdW5fbWlzY19VbnNhZmUuZ2V0TG9hZEF2ZXJhZ2UoW0RJKUkiLCJzdW5fbWlzY19VbnNhZmUuc2hvdWxkQmVJbml0aWFsaXplZChMamF2YS9sYW5nL0NsYXNzOylaIiwic3VuX21pc2NfVW5zYWZlLmRlZmluZUFub255bW91c0NsYXNzKExqYXZhL2xhbmcvQ2xhc3M7W0JbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvQ2xhc3M7Iiwic3VuX21pc2NfVmVyc2lvbiIsInN1bl9taXNjX1ZlcnNpb24uZ2V0SnZtU3BlY2lhbFZlcnNpb24oKUxqYXZhL2xhbmcvU3RyaW5nOyIsInN1bl9taXNjX1ZlcnNpb24uZ2V0SmRrU3BlY2lhbFZlcnNpb24oKUxqYXZhL2xhbmcvU3RyaW5nOyIsInN1bl9taXNjX1ZlcnNpb24uZ2V0SnZtVmVyc2lvbkluZm8oKVoiLCJzdW5fbWlzY19WZXJzaW9uLmdldEpka1ZlcnNpb25JbmZvKClWIiwic3VuX21pc2NfVk0iLCJzdW5fbWlzY19WTS5sYXRlc3RVc2VyRGVmaW5lZExvYWRlcigpTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsiLCJzdW5fbWlzY19WTVN1cHBvcnQiLCJzdW5fbWlzY19WTVN1cHBvcnQuaW5pdEFnZW50UHJvcGVydGllcyhMamF2YS91dGlsL1Byb3BlcnRpZXM7KUxqYXZhL3V0aWwvUHJvcGVydGllczsiLCJzdW5fbWlzY19VUkxDbGFzc1BhdGgiLCJzdW5fbWlzY19VUkxDbGFzc1BhdGguZ2V0TG9va3VwQ2FjaGVVUkxzKExqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7KVtMamF2YS9uZXQvVVJMOyIsInN1bl9taXNjX1VSTENsYXNzUGF0aC5nZXRMb29rdXBDYWNoZUZvckNsYXNzTG9hZGVyKExqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7TGphdmEvbGFuZy9TdHJpbmc7KVtJIiwic3VuX21pc2NfVVJMQ2xhc3NQYXRoLmtub3duVG9Ob3RFeGlzdDAoTGphdmEvbGFuZy9DbGFzc0xvYWRlcjtMamF2YS9sYW5nL1N0cmluZzspWiJdLCJtYXBwaW5ncyI6IkFBZ0JBLFFBQUEsY0FBc0IsRUFBbUIsRUFBa0MsRUFBZ0MsR0FDekdBLEdBQUlBLEdBQW1CQSxFQUF1Q0EsRUFBb0RBLEVBQTdFQSxFQUFTQSxFQUFJQSxXQUNoREEsRUFBb0dBLEVBQU9B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QW9DQSxrQ0FFdERBLE1BR1hELEtBS0Esc0JBQUEsV0FBQUUsUUFBQUEsTUFlQUEsTUFiZ0JBLEdBQUFBLDhEQUFkQSxTQUEyRUEsRUFBbUJBLEdBQzVGQyxNQUFPQSxPQUlLRCxFQUFBQSw2RUFBZEEsU0FBMEZBLEVBQW1CQSxFQUF3Q0EsR0FDbkpFLE1BQU9BLE9BR0tGLEVBQUFBLGdFQUFkQSxTQUE2RUEsRUFBbUJBLEVBQXdDQSxHQUN0SUcsT0FBT0EsR0FHWEgsSUFFQSxrQkFDRSxjQUFlLFlBQ2Ysd0JBQXlCLHNCQUN6QiwrQkFBZ0MsNkJBQ2hDLGdCQUFpQixjQUNqQixrQkFBbUIsZ0JBQ25CLGtCQUFtQixnQkFDbkIsbUJBQW9CLGlCQUNwQixjQUFlLFlBQ2YscUJBQXNCLG1CQUN0Qix3QkFBeUIiLCJmaWxlIjoic3VuX21pc2MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlZNVHlwZXMgPSByZXF1aXJlKCcuLi8uLi9pbmNsdWRlcy9KVk1UeXBlcycpO1xuaW1wb3J0ICogYXMgRG9wcGlvIGZyb20gJy4uL2RvcHBpb2p2bSc7XG5pbXBvcnQgSlZNVGhyZWFkID0gRG9wcGlvLlZNLlRocmVhZGluZy5KVk1UaHJlYWQ7XG5pbXBvcnQgUmVmZXJlbmNlQ2xhc3NEYXRhID0gRG9wcGlvLlZNLkNsYXNzRmlsZS5SZWZlcmVuY2VDbGFzc0RhdGE7XG5pbXBvcnQgQXJyYXlDbGFzc0RhdGEgPSBEb3BwaW8uVk0uQ2xhc3NGaWxlLkFycmF5Q2xhc3NEYXRhO1xuaW1wb3J0IENsYXNzRGF0YSA9IERvcHBpby5WTS5DbGFzc0ZpbGUuQ2xhc3NEYXRhO1xuaW1wb3J0IElKVk1Db25zdHJ1Y3RvciA9IERvcHBpby5WTS5DbGFzc0ZpbGUuSUpWTUNvbnN0cnVjdG9yO1xuaW1wb3J0IGxvZ2dpbmcgPSBEb3BwaW8uRGVidWcuTG9nZ2luZztcbmltcG9ydCB1dGlsID0gRG9wcGlvLlZNLlV0aWw7XG5pbXBvcnQgTG9uZyA9IERvcHBpby5WTS5Mb25nO1xuaW1wb3J0IFRocmVhZFN0YXR1cyA9IERvcHBpby5WTS5FbnVtcy5UaHJlYWRTdGF0dXM7XG5pbXBvcnQgQ2xhc3NMb2FkZXIgPSBEb3BwaW8uVk0uQ2xhc3NGaWxlLkNsYXNzTG9hZGVyO1xuaW1wb3J0IEN1c3RvbUNsYXNzTG9hZGVyID0gRG9wcGlvLlZNLkNsYXNzRmlsZS5DdXN0b21DbGFzc0xvYWRlcjtcbmltcG9ydCBhc3NlcnQgPSBEb3BwaW8uRGVidWcuQXNzZXJ0O1xuZGVjbGFyZSB2YXIgcmVnaXN0ZXJOYXRpdmVzOiAoZGVmczogYW55KSA9PiB2b2lkO1xuXG5mdW5jdGlvbiBnZXRGaWVsZEluZm8odGhyZWFkOiBKVk1UaHJlYWQsIHVuc2FmZTogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZyk6IFthbnksIHN0cmluZ10ge1xuICB2YXIgZmllbGROYW1lOiBzdHJpbmcsIG9iakJhc2U6IGFueSwgb2JqQ2xzID0gb2JqLmdldENsYXNzKCksIGNsczogUmVmZXJlbmNlQ2xhc3NEYXRhPEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3Q+LCBjb21wTmFtZTogc3RyaW5nLFxuICAgIHVuc2FmZUNvbnM6IHR5cGVvZiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUgPSA8YW55PiAoPFJlZmVyZW5jZUNsYXNzRGF0YTxKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmU+PiB1bnNhZmUuZ2V0Q2xhc3MoKSkuZ2V0Q29uc3RydWN0b3IodGhyZWFkKSxcbiAgICBzdHJpZGUgPSAxO1xuICBpZiAob2JqQ2xzLmdldEludGVybmFsTmFtZSgpID09PSBcIkxqYXZhL2xhbmcvT2JqZWN0O1wiKSB7XG4gICAgLy8gU3RhdGljIGZpZWxkLiBUaGUgc3RhdGljRmllbGRCYXNlIGlzIGFsd2F5cyBhIHB1cmUgT2JqZWN0IHRoYXQgaGFzIGFcbiAgICAvLyBjbGFzcyByZWZlcmVuY2Ugb24gaXQuXG4gICAgLy8gVGhlcmUncyBubyByZWFzb24gdG8gZ2V0IHRoZSBmaWVsZCBvbiBhbiBPYmplY3QsIGFzIHRoZXkgaGF2ZSBubyBmaWVsZHMuXG4gICAgY2xzID0gPFJlZmVyZW5jZUNsYXNzRGF0YTxKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0Pj4gKDxhbnk+IG9iaikuJHN0YXRpY0ZpZWxkQmFzZTtcbiAgICBvYmpCYXNlID0gPGFueT4gY2xzLmdldENvbnN0cnVjdG9yKHRocmVhZCk7XG4gICAgZmllbGROYW1lID0gY2xzLmdldFN0YXRpY0ZpZWxkRnJvbVZNSW5kZXgob2Zmc2V0LnRvSW50KCkpLmZ1bGxOYW1lO1xuICB9IGVsc2UgaWYgKG9iakNscyBpbnN0YW5jZW9mIEFycmF5Q2xhc3NEYXRhKSB7XG4gICAgY29tcE5hbWUgPSB1dGlsLmludGVybmFsMmV4dGVybmFsW29iakNscy5nZXRJbnRlcm5hbE5hbWUoKVsxXV07XG4gICAgaWYgKCFjb21wTmFtZSkge1xuICAgICAgY29tcE5hbWUgPSBcIk9CSkVDVFwiO1xuICAgIH1cbiAgICBjb21wTmFtZSA9IGNvbXBOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgc3RyaWRlID0gKDxhbnk+IHVuc2FmZUNvbnMpW2BzdW4vbWlzYy9VbnNhZmUvQVJSQVlfJHtjb21wTmFtZX1fSU5ERVhfU0NBTEVgXTtcbiAgICBpZiAoIXN0cmlkZSkge1xuICAgICAgc3RyaWRlID0gMTtcbiAgICB9XG5cbiAgICBvYmpCYXNlID0gKDxKVk1UeXBlcy5KVk1BcnJheTxhbnk+PiBvYmopLmFycmF5O1xuICAgIGFzc2VydChvZmZzZXQudG9JbnQoKSAlIHN0cmlkZSA9PT0gMCwgYEludmFsaWQgb2Zmc2V0IGZvciBzdHJpZGUgJHtzdHJpZGV9OiAke29mZnNldC50b0ludCgpfWApO1xuICAgIGZpZWxkTmFtZSA9IFwiXCIgKyAob2Zmc2V0LnRvSW50KCkgLyBzdHJpZGUpO1xuICB9IGVsc2Uge1xuICAgIGNscyA9IDxSZWZlcmVuY2VDbGFzc0RhdGE8SlZNVHlwZXMuamF2YV9sYW5nX09iamVjdD4+IG9iai5nZXRDbGFzcygpO1xuICAgIG9iakJhc2UgPSBvYmo7XG4gICAgZmllbGROYW1lID0gY2xzLmdldE9iamVjdEZpZWxkRnJvbVZNSW5kZXgob2Zmc2V0LnRvSW50KCkpLmZ1bGxOYW1lO1xuICB9XG4gIHJldHVybiBbb2JqQmFzZSwgZmllbGROYW1lXTtcbn1cblxuZnVuY3Rpb24gdW5zYWZlQ29tcGFyZUFuZFN3YXA8VD4odGhyZWFkOiBKVk1UaHJlYWQsIHVuc2FmZTogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZywgZXhwZWN0ZWQ6IFQsIHg6IFQpOiBib29sZWFuIHtcbiAgdmFyIGZpID0gZ2V0RmllbGRJbmZvKHRocmVhZCwgdW5zYWZlLCBvYmosIG9mZnNldCksXG4gICAgYWN0dWFsID0gZmlbMF1bZmlbMV1dO1xuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIGZpWzBdW2ZpWzFdXSA9IHg7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEZyb21WTUluZGV4PFQ+KHRocmVhZDogSlZNVGhyZWFkLCB1bnNhZmU6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcpOiBUIHtcbiAgdmFyIGZpID0gZ2V0RmllbGRJbmZvKHRocmVhZCwgdW5zYWZlLCBvYmosIG9mZnNldCk7XG4gIHJldHVybiBmaVswXVtmaVsxXV07XG59XG5cbmZ1bmN0aW9uIHNldEZyb21WTUluZGV4PFQ+KHRocmVhZDogSlZNVGhyZWFkLCB1bnNhZmU6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcsIHZhbDogVCk6IHZvaWQge1xuICB2YXIgZmkgPSBnZXRGaWVsZEluZm8odGhyZWFkLCB1bnNhZmUsIG9iaiwgb2Zmc2V0KTtcbiAgZmlbMF1bZmlbMV1dID0gdmFsO1xufVxuXG5jbGFzcyBzdW5fbWlzY19HQyB7XG5cbiAgcHVibGljIHN0YXRpYyAnbWF4T2JqZWN0SW5zcGVjdGlvbkFnZSgpSicodGhyZWFkOiBKVk1UaHJlYWQpOiBMb25nIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG59XG5cbmNsYXNzIHN1bl9taXNjX01lc3NhZ2VVdGlscyB7XG5cbiAgcHVibGljIHN0YXRpYyAndG9TdGRlcnIoTGphdmEvbGFuZy9TdHJpbmc7KVYnKHRocmVhZDogSlZNVGhyZWFkLCBzdHI6IEpWTVR5cGVzLmphdmFfbGFuZ19TdHJpbmcpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAndG9TdGRvdXQoTGphdmEvbGFuZy9TdHJpbmc7KVYnKHRocmVhZDogSlZNVGhyZWFkLCBzdHI6IEpWTVR5cGVzLmphdmFfbGFuZ19TdHJpbmcpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbn1cblxuY2xhc3Mgc3VuX21pc2NfTmF0aXZlU2lnbmFsSGFuZGxlciB7XG5cbiAgcHVibGljIHN0YXRpYyAnaGFuZGxlMChJSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwgYXJnMDogbnVtYmVyLCBhcmcxOiBMb25nKTogdm9pZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG59XG5cbmNsYXNzIHN1bl9taXNjX1BlcmYge1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2F0dGFjaChMamF2YS9sYW5nL1N0cmluZztJSSlMamF2YS9uaW8vQnl0ZUJ1ZmZlcjsnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfUGVyZiwgYXJnMDogSlZNVHlwZXMuamF2YV9sYW5nX1N0cmluZywgYXJnMTogbnVtYmVyLCBhcmcyOiBudW1iZXIpOiBKVk1UeXBlcy5qYXZhX25pb19CeXRlQnVmZmVyIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2RldGFjaChMamF2YS9uaW8vQnl0ZUJ1ZmZlcjspVicodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19QZXJmLCBhcmcwOiBKVk1UeXBlcy5qYXZhX25pb19CeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2NyZWF0ZUxvbmcoTGphdmEvbGFuZy9TdHJpbmc7SUlKKUxqYXZhL25pby9CeXRlQnVmZmVyOycodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19QZXJmLCBuYW1lOiBKVk1UeXBlcy5qYXZhX2xhbmdfU3RyaW5nLCB2YXJpYWJpbGl0eTogbnVtYmVyLCB1bml0czogbnVtYmVyLCB2YWx1ZTogTG9uZyk6IHZvaWQge1xuICAgIHRocmVhZC5pbXBvcnQoJ0xqYXZhL25pby9EaXJlY3RCeXRlQnVmZmVyOycsIChidWZmQ29uczogSUpWTUNvbnN0cnVjdG9yPEpWTVR5cGVzLmphdmFfbmlvX0RpcmVjdEJ5dGVCdWZmZXI+KSA9PiB7XG4gICAgICB2YXIgYnVmZiA9IG5ldyBidWZmQ29ucyh0aHJlYWQpLFxuICAgICAgICAgIGhlYXAgPSB0aHJlYWQuZ2V0SlZNKCkuZ2V0SGVhcCgpLFxuICAgICAgICAgIGFkZHIgPSBoZWFwLm1hbGxvYyg4KTtcbiAgICAgICAgYnVmZlsnPGluaXQ+KEpJKVYnXSh0aHJlYWQsIFtMb25nLmZyb21OdW1iZXIoYWRkciksIG51bGwsIDhdLCAoZT86IEpWTVR5cGVzLmphdmFfbGFuZ19UaHJvd2FibGUpID0+IHtcbiAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgdGhyZWFkLnRocm93RXhjZXB0aW9uKGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoZWFwLnN0b3JlX3dvcmQoYWRkciwgdmFsdWUuZ2V0TG93Qml0cygpKTtcbiAgICAgICAgICAgIGhlYXAuc3RvcmVfd29yZChhZGRyICsgNCwgdmFsdWUuZ2V0SGlnaEJpdHMoKSk7XG4gICAgICAgICAgICB0aHJlYWQuYXN5bmNSZXR1cm4oYnVmZik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2NyZWF0ZUJ5dGVBcnJheShMamF2YS9sYW5nL1N0cmluZztJSVtCSSlMamF2YS9uaW8vQnl0ZUJ1ZmZlcjsnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfUGVyZiwgYXJnMDogSlZNVHlwZXMuamF2YV9sYW5nX1N0cmluZywgYXJnMTogbnVtYmVyLCBhcmcyOiBudW1iZXIsIGFyZzM6IEpWTVR5cGVzLkpWTUFycmF5PG51bWJlcj4sIGFyZzQ6IG51bWJlcik6IEpWTVR5cGVzLmphdmFfbmlvX0J5dGVCdWZmZXIge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgLy8gU2F0aXNmeSBUeXBlU2NyaXB0IHJldHVybiB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnaGlnaFJlc0NvdW50ZXIoKUonKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfUGVyZik6IExvbmcge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgLy8gU2F0aXNmeSBUeXBlU2NyaXB0IHJldHVybiB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnaGlnaFJlc0ZyZXF1ZW5jeSgpSicodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19QZXJmKTogTG9uZyB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICAvLyBTYXRpc2Z5IFR5cGVTY3JpcHQgcmV0dXJuIHR5cGUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdyZWdpc3Rlck5hdGl2ZXMoKVYnKHRocmVhZDogSlZNVGhyZWFkKTogdm9pZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG59XG5cbmNsYXNzIHN1bl9taXNjX1NpZ25hbCB7XG5cbiAgcHVibGljIHN0YXRpYyAnZmluZFNpZ25hbChMamF2YS9sYW5nL1N0cmluZzspSScodGhyZWFkOiBKVk1UaHJlYWQsIGFyZzA6IEpWTVR5cGVzLmphdmFfbGFuZ19TdHJpbmcpOiBudW1iZXIge1xuICAgIC8vIFNpZ25pZmllcyB0aGF0IHdlIGRvbid0IGtub3cgdGhlIHNpZ25hbC5cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdoYW5kbGUwKElKKUonKHRocmVhZDogSlZNVGhyZWFkLCBhcmcwOiBudW1iZXIsIGFyZzE6IExvbmcpOiBMb25nIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ3JhaXNlMChJKVYnKHRocmVhZDogSlZNVGhyZWFkLCBhcmcwOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbn1cblxuY2xhc3Mgc3VuX21pc2NfVW5zYWZlIHtcblxuICBwdWJsaWMgc3RhdGljICdnZXRJbnQoTGphdmEvbGFuZy9PYmplY3Q7SilJJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZykgPT4gbnVtYmVyID0gZ2V0RnJvbVZNSW5kZXg7XG4gIHB1YmxpYyBzdGF0aWMgJ3B1dEludChMamF2YS9sYW5nL09iamVjdDtKSSlWJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZywgbmV3VmFsdWU6IG51bWJlcikgPT4gdm9pZCA9IHNldEZyb21WTUluZGV4O1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldE9iamVjdChMamF2YS9sYW5nL09iamVjdDtKKUxqYXZhL2xhbmcvT2JqZWN0Oyc6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcpID0+IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QgPSBnZXRGcm9tVk1JbmRleDtcbiAgcHVibGljIHN0YXRpYyAncHV0T2JqZWN0KExqYXZhL2xhbmcvT2JqZWN0O0pMamF2YS9sYW5nL09iamVjdDspVic6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcsIG5ld19vYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QpID0+IHZvaWQgPSBzZXRGcm9tVk1JbmRleDtcblxuICBwdWJsaWMgc3RhdGljICdnZXRCb29sZWFuKExqYXZhL2xhbmcvT2JqZWN0O0opWic6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcpID0+IG51bWJlciA9IGdldEZyb21WTUluZGV4O1xuICBwdWJsaWMgc3RhdGljICdwdXRCb29sZWFuKExqYXZhL2xhbmcvT2JqZWN0O0paKVYnOiAodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIG9iajogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCwgb2Zmc2V0OiBMb25nLCBuZXdWYWx1ZTogbnVtYmVyKSA9PiB2b2lkID0gc2V0RnJvbVZNSW5kZXg7XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0Qnl0ZShMamF2YS9sYW5nL09iamVjdDtKKUInOiAodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIG9iajogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCwgb2Zmc2V0OiBMb25nKSA9PiBudW1iZXIgPSBnZXRGcm9tVk1JbmRleDtcbiAgcHVibGljIHN0YXRpYyAncHV0Qnl0ZShMamF2YS9sYW5nL09iamVjdDtKQilWJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZywgbmV3VmFsdWU6IG51bWJlcikgPT4gdm9pZCA9IHNldEZyb21WTUluZGV4O1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldFNob3J0KExqYXZhL2xhbmcvT2JqZWN0O0opUyc6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcpID0+IG51bWJlciA9IGdldEZyb21WTUluZGV4O1xuICBwdWJsaWMgc3RhdGljICdwdXRTaG9ydChMamF2YS9sYW5nL09iamVjdDtKUylWJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZywgbmV3VmFsdWU6IG51bWJlcikgPT4gdm9pZCA9IHNldEZyb21WTUluZGV4O1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldENoYXIoTGphdmEvbGFuZy9PYmplY3Q7SilDJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZykgPT4gbnVtYmVyID0gZ2V0RnJvbVZNSW5kZXg7XG4gIHB1YmxpYyBzdGF0aWMgJ3B1dENoYXIoTGphdmEvbGFuZy9PYmplY3Q7SkMpVic6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcsIG5ld1ZhbHVlOiBudW1iZXIpID0+IHZvaWQgPSBzZXRGcm9tVk1JbmRleDtcblxuICBwdWJsaWMgc3RhdGljICdnZXRMb25nKExqYXZhL2xhbmcvT2JqZWN0O0opSic6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcpID0+IExvbmcgPSBnZXRGcm9tVk1JbmRleDtcbiAgcHVibGljIHN0YXRpYyAncHV0TG9uZyhMamF2YS9sYW5nL09iamVjdDtKSilWJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZywgeDogTG9uZykgPT4gdm9pZCA9IHNldEZyb21WTUluZGV4O1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldEZsb2F0KExqYXZhL2xhbmcvT2JqZWN0O0opRic6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcpID0+IG51bWJlciA9IGdldEZyb21WTUluZGV4O1xuICBwdWJsaWMgc3RhdGljICdwdXRGbG9hdChMamF2YS9sYW5nL09iamVjdDtKRilWJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZywgbmV3VmFsdWU6IG51bWJlcikgPT4gdm9pZCA9IHNldEZyb21WTUluZGV4O1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldERvdWJsZShMamF2YS9sYW5nL09iamVjdDtKKUQnOiAodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIG9iajogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCwgb2Zmc2V0OiBMb25nKSA9PiBudW1iZXIgPSBnZXRGcm9tVk1JbmRleDtcblxuICBwdWJsaWMgc3RhdGljICdwdXREb3VibGUoTGphdmEvbGFuZy9PYmplY3Q7SkQpVic6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcsIG5ld1ZhbHVlOiBudW1iZXIpID0+IHZvaWQgPSBzZXRGcm9tVk1JbmRleDtcblxuICBwdWJsaWMgc3RhdGljICdnZXRCeXRlKEopQicodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGFkZHJlc3M6IExvbmcpOiBudW1iZXIge1xuICAgIHZhciBoZWFwID0gdGhyZWFkLmdldEpWTSgpLmdldEhlYXAoKTtcbiAgICByZXR1cm4gaGVhcC5nZXRfc2lnbmVkX2J5dGUoYWRkcmVzcy50b051bWJlcigpKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ3B1dEJ5dGUoSkIpVicodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGFkZHJlc3M6IExvbmcsIHZhbDogbnVtYmVyKTogdm9pZCB7XG4gICAgdmFyIGhlYXAgPSB0aHJlYWQuZ2V0SlZNKCkuZ2V0SGVhcCgpO1xuICAgIGhlYXAuc2V0X3NpZ25lZF9ieXRlKGFkZHJlc3MudG9OdW1iZXIoKSwgdmFsKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldFNob3J0KEopUycodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGFyZzA6IExvbmcpOiBudW1iZXIge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgLy8gU2F0aXNmeSBUeXBlU2NyaXB0IHJldHVybiB0eXBlLlxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAncHV0U2hvcnQoSlMpVicodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGFyZzA6IExvbmcsIGFyZzE6IG51bWJlcik6IHZvaWQge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdnZXRDaGFyKEopQycodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGFyZzA6IExvbmcpOiBudW1iZXIge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgLy8gU2F0aXNmeSBUeXBlU2NyaXB0IHJldHVybiB0eXBlLlxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAncHV0Q2hhcihKQylWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYXJnMDogTG9uZywgYXJnMTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldEludChKKUknKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBhcmcwOiBMb25nKTogbnVtYmVyIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ3B1dEludChKSSlWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYXJnMDogTG9uZywgYXJnMTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldExvbmcoSilKJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYWRkcmVzczogTG9uZyk6IExvbmcge1xuICAgIHZhciBoZWFwID0gdGhyZWFkLmdldEpWTSgpLmdldEhlYXAoKSxcbiAgICAgYWRkciA9IGFkZHJlc3MudG9OdW1iZXIoKTtcbiAgICByZXR1cm4gbmV3IExvbmcoaGVhcC5nZXRfd29yZChhZGRyKSwgaGVhcC5nZXRfd29yZChhZGRyICsgNCkpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAncHV0TG9uZyhKSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYWRkcmVzczogTG9uZywgdmFsdWU6IExvbmcpOiB2b2lkIHtcbiAgICB2YXIgaGVhcCA9IHRocmVhZC5nZXRKVk0oKS5nZXRIZWFwKCksXG4gICAgICBhZGRyID0gYWRkcmVzcy50b051bWJlcigpO1xuXG4gICAgLy8gTEVcbiAgICBoZWFwLnN0b3JlX3dvcmQoYWRkciwgdmFsdWUuZ2V0TG93Qml0cygpKTtcbiAgICBoZWFwLnN0b3JlX3dvcmQoYWRkciArIDQsIHZhbHVlLmdldEhpZ2hCaXRzKCkpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0RmxvYXQoSilGJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYXJnMDogTG9uZyk6IG51bWJlciB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICAvLyBTYXRpc2Z5IFR5cGVTY3JpcHQgcmV0dXJuIHR5cGUuXG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdwdXRGbG9hdChKRilWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYXJnMDogTG9uZywgYXJnMTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldERvdWJsZShKKUQnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBhcmcwOiBMb25nKTogbnVtYmVyIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ3B1dERvdWJsZShKRClWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYXJnMDogTG9uZywgYXJnMTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldEFkZHJlc3MoSilKJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYXJnMDogTG9uZyk6IExvbmcge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgLy8gU2F0aXNmeSBUeXBlU2NyaXB0IHJldHVybiB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAncHV0QWRkcmVzcyhKSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYXJnMDogTG9uZywgYXJnMTogTG9uZyk6IHZvaWQge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdhbGxvY2F0ZU1lbW9yeShKKUonKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBzaXplOiBMb25nKTogTG9uZyB7XG4gICAgdmFyIGhlYXAgPSB0aHJlYWQuZ2V0SlZNKCkuZ2V0SGVhcCgpO1xuICAgIHJldHVybiBMb25nLmZyb21OdW1iZXIoaGVhcC5tYWxsb2Moc2l6ZS50b051bWJlcigpKSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdyZWFsbG9jYXRlTWVtb3J5KEpKKUonKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBhcmcwOiBMb25nLCBhcmcxOiBMb25nKTogTG9uZyB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICAvLyBTYXRpc2Z5IFR5cGVTY3JpcHQgcmV0dXJuIHR5cGUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdzZXRNZW1vcnkoTGphdmEvbGFuZy9PYmplY3Q7SkpCKVYnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIGFkZHJlc3M6IExvbmcsIGJ5dGVzOiBMb25nLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgICAgLy8gQWRkcmVzcyBpcyBhYnNvbHV0ZS5cbiAgICAgIHZhciBpOiBudW1iZXIsIGFkZHIgPSBhZGRyZXNzLnRvTnVtYmVyKCksXG4gICAgICAgIGJ5dGVzTnVtOiBudW1iZXIgPSBieXRlcy50b051bWJlcigpLFxuICAgICAgICBoZWFwID0gdGhyZWFkLmdldEpWTSgpLmdldEhlYXAoKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBieXRlc051bTsgaSsrKSB7XG4gICAgICAgIGhlYXAuc2V0X3NpZ25lZF9ieXRlKGFkZHIgKyBpLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEkgaGF2ZSBubyBpZGVhIHdoYXQgdGhlIHNlbWFudGljcyBhcmUgd2hlbiB0aGUgb2JqZWN0IGlzIHNwZWNpZmllZC5cbiAgICAgIC8vIEkgdGhpbmsgaXQgbWVhbnMgdXNlIHRoZSBvYmplY3QgYXMgdGhlIHN0YXJ0aW5nIGFkZHJlc3MuLi4gd2hpY2ggZG9lc24ndFxuICAgICAgLy8gbWFrZSBzZW5zZSBmb3IgdXMuXG4gICAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFsbCBieXRlcyBpbiBhIGdpdmVuIGJsb2NrIG9mIG1lbW9yeSB0byBhIGNvcHkgb2YgYW5vdGhlclxuICAgKiBibG9jay5cbiAgICpcbiAgICogPHA+VGhpcyBtZXRob2QgZGV0ZXJtaW5lcyBlYWNoIGJsb2NrJ3MgYmFzZSBhZGRyZXNzIGJ5IG1lYW5zIG9mIHR3byBwYXJhbWV0ZXJzLFxuICAgKiBhbmQgc28gaXQgcHJvdmlkZXMgKGluIGVmZmVjdCkgYSA8ZW0+ZG91YmxlLXJlZ2lzdGVyPC9lbT4gYWRkcmVzc2luZyBtb2RlLFxuICAgKiBhcyBkaXNjdXNzZWQgaW4ge0BsaW5rICNnZXRJbnQoT2JqZWN0LGxvbmcpfS4gIFdoZW4gdGhlIG9iamVjdCByZWZlcmVuY2UgaXMgbnVsbCxcbiAgICogdGhlIG9mZnNldCBzdXBwbGllcyBhbiBhYnNvbHV0ZSBiYXNlIGFkZHJlc3MuXG4gICAqXG4gICAqIDxwPlRoZSB0cmFuc2ZlcnMgYXJlIGluIGNvaGVyZW50IChhdG9taWMpIHVuaXRzIG9mIGEgc2l6ZSBkZXRlcm1pbmVkXG4gICAqIGJ5IHRoZSBhZGRyZXNzIGFuZCBsZW5ndGggcGFyYW1ldGVycy4gIElmIHRoZSBlZmZlY3RpdmUgYWRkcmVzc2VzIGFuZFxuICAgKiBsZW5ndGggYXJlIGFsbCBldmVuIG1vZHVsbyA4LCB0aGUgdHJhbnNmZXIgdGFrZXMgcGxhY2UgaW4gJ2xvbmcnIHVuaXRzLlxuICAgKiBJZiB0aGUgZWZmZWN0aXZlIGFkZHJlc3NlcyBhbmQgbGVuZ3RoIGFyZSAocmVzcC4pIGV2ZW4gbW9kdWxvIDQgb3IgMixcbiAgICogdGhlIHRyYW5zZmVyIHRha2VzIHBsYWNlIGluIHVuaXRzIG9mICdpbnQnIG9yICdzaG9ydCcuXG4gICAqXG4gICAqIEBzaW5jZSAxLjdcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgJ2NvcHlNZW1vcnkoTGphdmEvbGFuZy9PYmplY3Q7SkxqYXZhL2xhbmcvT2JqZWN0O0pKKVYnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBzcmNCYXNlOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBzcmNPZmZzZXQ6IExvbmcsIGRlc3RCYXNlOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBkZXN0T2Zmc2V0OiBMb25nLCBieXRlczogTG9uZyk6IHZvaWQge1xuICAgIGNvbnN0IGhlYXAgPSB0aHJlYWQuZ2V0SlZNKCkuZ2V0SGVhcCgpLFxuICAgICAgc3JjQWRkciA9IHNyY09mZnNldC50b051bWJlcigpLFxuICAgICAgZGVzdEFkZHIgPSBkZXN0T2Zmc2V0LnRvTnVtYmVyKCksXG4gICAgICBsZW5ndGggPSBieXRlcy50b051bWJlcigpO1xuICAgIGlmIChzcmNCYXNlID09PSBudWxsICYmIGRlc3RCYXNlID09PSBudWxsKSB7XG4gICAgICAvLyBtZW1jb3B5IHNlbWFudGljcyB3LyBzcmNvZmZzZXQvZGVzdG9mZnNldCBhcyBhYnNvbHV0ZSBvZmZzZXRzLlxuICAgICAgaGVhcC5tZW1jcHkoc3JjQWRkciwgZGVzdEFkZHIsIGxlbmd0aCk7XG4gICAgfSBlbHNlIGlmIChzcmNCYXNlID09PSBudWxsICYmIGRlc3RCYXNlICE9PSBudWxsKSB7XG4gICAgICAvLyBPSywgc28uLi4gZGVzdEJhc2UgaXMgYW4gYXJyYXksIGRlc3RPZmZzZXQgaXMgYSBieXRlIG9mZnNldCBmcm9tIHRoZVxuICAgICAgLy8gc3RhcnQgb2YgdGhlIGFycmF5LiBOZWVkIHRvIGNvcHkgZGF0YSBmcm9tIHRoZSBoZWFwIGRpcmVjdGx5IGludG8gdGhlIGFycmF5LlxuICAgICAgaWYgKHV0aWwuaXNfYXJyYXlfdHlwZShkZXN0QmFzZS5nZXRDbGFzcygpLmdldEludGVybmFsTmFtZSgpKSAmJiB1dGlsLmlzX3ByaW1pdGl2ZV90eXBlKCg8QXJyYXlDbGFzc0RhdGE8YW55Pj4gZGVzdEJhc2UuZ2V0Q2xhc3MoKSkuZ2V0Q29tcG9uZW50Q2xhc3MoKS5nZXRJbnRlcm5hbE5hbWUoKSkpIHtcbiAgICAgICAgY29uc3QgZGVzdEFycmF5OiBKVk1UeXBlcy5KVk1BcnJheTxhbnk+ID0gPGFueT4gZGVzdEJhc2U7XG4gICAgICAgIHN3aXRjaCAoZGVzdEFycmF5LmdldENsYXNzKCkuZ2V0Q29tcG9uZW50Q2xhc3MoKS5nZXRJbnRlcm5hbE5hbWUoKSkge1xuICAgICAgICAgIGNhc2UgJ0InOlxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBkZXN0QXJyYXkuYXJyYXlbZGVzdEFkZHIgKyBpXSA9IGhlYXAuZ2V0X3NpZ25lZF9ieXRlKHNyY0FkZHIgKyBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8qY2FzZSAnQyc6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0YnOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnSSc6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdKJzpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ1MnOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnWic6XG4gICAgICAgICAgICBicmVhazsqL1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBJIGhhdmUgbm8gaWRlYSB3aGF0IHRoZSBhcHByb3ByaWF0ZSBzZW1hbnRpY3MgYXJlIGZvciB0aGlzLlxuICAgICAgICAgICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4gZGVzdEFycmF5IHR5cGU6ICcgKyBkZXN0QXJyYXkuZ2V0Q2xhc3MoKS5nZXRDb21wb25lbnRDbGFzcygpLmdldEludGVybmFsTmFtZSgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJIGhhdmUgbm8gaWRlYSB3aGF0IHRoZSBhcHByb3ByaWF0ZSBzZW1hbnRpY3MgYXJlIGZvciB0aGlzLlxuICAgICAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3JjQmFzZSAhPT0gbnVsbCAmJiBkZXN0QmFzZSA9PT0gbnVsbCkge1xuICAgICAgLy8gc3JjQmFzZSBpcyBhbiBhcnJheSwgZGVzdE9mZnNldCBpcyBhbiBhZGRyZXNzIHdoZXJlIHRoZSBjb250ZW50cyBvZiBzcmNCYXNlIHNob3VsZCBiZSBjb3BpZWQuXG4gICAgICBpZiAodXRpbC5pc19hcnJheV90eXBlKHNyY0Jhc2UuZ2V0Q2xhc3MoKS5nZXRJbnRlcm5hbE5hbWUoKSkgJiYgdXRpbC5pc19wcmltaXRpdmVfdHlwZSgoPEFycmF5Q2xhc3NEYXRhPGFueT4+IHNyY0Jhc2UuZ2V0Q2xhc3MoKSkuZ2V0Q29tcG9uZW50Q2xhc3MoKS5nZXRJbnRlcm5hbE5hbWUoKSkpIHtcbiAgICAgICAgY29uc3Qgc3JjQXJyYXk6IEpWTVR5cGVzLkpWTUFycmF5PGFueT4gPSA8YW55PiBzcmNCYXNlO1xuICAgICAgICBzd2l0Y2ggKHNyY0FycmF5LmdldENsYXNzKCkuZ2V0Q29tcG9uZW50Q2xhc3MoKS5nZXRJbnRlcm5hbE5hbWUoKSkge1xuICAgICAgICAgIGNhc2UgJ0InOlxuICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBoZWFwLnNldF9zaWduZWRfYnl0ZShkZXN0QWRkciArIGksIHNyY0FycmF5LmFycmF5W3NyY0FkZHIgKyBpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gSSBoYXZlIG5vIGlkZWEgd2hhdCB0aGUgYXBwcm9wcmlhdGUgc2VtYW50aWNzIGFyZSBmb3IgdGhpcy5cbiAgICAgICAgICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuIHNyY0FycmF5OicgKyBzcmNBcnJheS5nZXRDbGFzcygpLmdldENvbXBvbmVudENsYXNzKCkuZ2V0SW50ZXJuYWxOYW1lKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEkgaGF2ZSBubyBpZGVhIHdoYXQgdGhlIGFwcHJvcHJpYXRlIHNlbWFudGljcyBhcmUgZm9yIHRoaXMuXG4gICAgICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEkgaGF2ZSBubyBpZGVhIHdoYXQgdGhlIGFwcHJvcHJpYXRlIHNlbWFudGljcyBhcmUgZm9yIHRoaXMuXG4gICAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLiBCb3RoIHNyYyBhbmQgZGVzdCBhcmUgYXJyYXlzPycpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2ZyZWVNZW1vcnkoSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYWRkcmVzczogTG9uZyk6IHZvaWQge1xuICAgIHZhciBoZWFwID0gdGhyZWFkLmdldEpWTSgpLmdldEhlYXAoKTtcbiAgICBoZWFwLmZyZWUoYWRkcmVzcy50b051bWJlcigpKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ3N0YXRpY0ZpZWxkT2Zmc2V0KExqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDspSicodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGZpZWxkOiBKVk1UeXBlcy5qYXZhX2xhbmdfcmVmbGVjdF9GaWVsZCk6IExvbmcge1xuICAgIHZhciBjbHMgPSA8UmVmZXJlbmNlQ2xhc3NEYXRhPEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3Q+PiBmaWVsZFsnamF2YS9sYW5nL3JlZmxlY3QvRmllbGQvY2xhenonXS4kY2xzO1xuICAgIHJldHVybiBMb25nLmZyb21OdW1iZXIoY2xzLmdldFZNSW5kZXhGb3JGaWVsZChjbHMuZ2V0RmllbGRGcm9tU2xvdChmaWVsZFsnamF2YS9sYW5nL3JlZmxlY3QvRmllbGQvc2xvdCddKSkpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnb2JqZWN0RmllbGRPZmZzZXQoTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOylKJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgZmllbGQ6IEpWTVR5cGVzLmphdmFfbGFuZ19yZWZsZWN0X0ZpZWxkKTogTG9uZyB7XG4gICAgdmFyIGNscyA9IDxSZWZlcmVuY2VDbGFzc0RhdGE8SlZNVHlwZXMuamF2YV9sYW5nX09iamVjdD4+IGZpZWxkWydqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZC9jbGF6eiddLiRjbHM7XG4gICAgcmV0dXJuIExvbmcuZnJvbU51bWJlcihjbHMuZ2V0Vk1JbmRleEZvckZpZWxkKGNscy5nZXRGaWVsZEZyb21TbG90KGZpZWxkWydqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZC9zbG90J10pKSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdzdGF0aWNGaWVsZEJhc2UoTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOylMamF2YS9sYW5nL09iamVjdDsnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBmaWVsZDogSlZNVHlwZXMuamF2YV9sYW5nX3JlZmxlY3RfRmllbGQpOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0IHtcbiAgICAvLyBSZXR1cm4gYSBzcGVjaWFsIEpWTSBvYmplY3QuXG4gICAgLy8gVE9ETzogQWN0dWFsbHkgY3JlYXRlIGEgc3BlY2lhbCBEb3BwaW9KVk0gY2xhc3MgZm9yIHRoaXMuXG4gICAgdmFyIHJ2ID0gbmV3ICgoPFJlZmVyZW5jZUNsYXNzRGF0YTxKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0Pj4gdGhyZWFkLmdldEJzQ2woKS5nZXRJbml0aWFsaXplZENsYXNzKHRocmVhZCwgJ0xqYXZhL2xhbmcvT2JqZWN0OycpKS5nZXRDb25zdHJ1Y3Rvcih0aHJlYWQpKSh0aHJlYWQpO1xuICAgICg8YW55PiBydikuJHN0YXRpY0ZpZWxkQmFzZSA9IGZpZWxkWydqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZC9jbGF6eiddLiRjbHM7XG4gICAgcmV0dXJuIHJ2O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZW5zdXJlQ2xhc3NJbml0aWFsaXplZChMamF2YS9sYW5nL0NsYXNzOylWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgY2xzOiBKVk1UeXBlcy5qYXZhX2xhbmdfQ2xhc3MpOiB2b2lkIHtcbiAgICBpZiAoY2xzLiRjbHMuaXNJbml0aWFsaXplZCh0aHJlYWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocmVhZC5zZXRTdGF0dXMoVGhyZWFkU3RhdHVzLkFTWU5DX1dBSVRJTkcpO1xuICAgIGNscy4kY2xzLmluaXRpYWxpemUodGhyZWFkLCAoY2RhdGE6IENsYXNzRGF0YSkgPT4ge1xuICAgICAgaWYgKGNkYXRhICE9IG51bGwpIHtcbiAgICAgICAgdGhyZWFkLmFzeW5jUmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSwgdHJ1ZSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdhcnJheUJhc2VPZmZzZXQoTGphdmEvbGFuZy9DbGFzczspSScodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGFyZzA6IEpWTVR5cGVzLmphdmFfbGFuZ19DbGFzcyk6IG51bWJlciB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgc2l6ZSBvZiBlbGVtZW50cyBpbiBhbiBhcnJheS5cbiAgICogZS5nLiBpZiB0aGUgYXJyYXkgaW5kZXggc2NhbGUgb2Ygc29tZXRoaW5nIGlzICo0KiwgdGhlbiBlYWNoIGVsZW1lbnQgaXMgNCptaW5pbWFsIGFkZHJlc3NhYmxlIHVuaXQgbGFyZ2UuXG4gICAqIERvcHBpbyBlbXVsYXRlcyBieXRlLWFkZHJlc3NhYmxlIG1lbW9yeSwgc28gYSByZXR1cm4gdmFsdWUgb2YgNCBpbmRpY2F0ZXMgNCBieXRlcy8zMi1iaXQgbGFyZ2UgZWxlbWVudHMuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljICdhcnJheUluZGV4U2NhbGUoTGphdmEvbGFuZy9DbGFzczspSScodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGFyZzA6IEpWTVR5cGVzLmphdmFfbGFuZ19DbGFzcyk6IG51bWJlciB7XG4gICAgdmFyIGNscyA9IGFyZzAuJGNscztcbiAgICBpZiAoY2xzIGluc3RhbmNlb2YgQXJyYXlDbGFzc0RhdGEpIHtcbiAgICAgIHN3aXRjaChjbHMuZ2V0Q29tcG9uZW50Q2xhc3MoKS5nZXRJbnRlcm5hbE5hbWUoKVswXSkge1xuICAgICAgICBjYXNlICdMJzpcbiAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgIGNhc2UgJ0YnOlxuICAgICAgICBjYXNlICdJJzpcbiAgICAgICAgICAvLyAzMi1iaXRzXG4gICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgIGNhc2UgJ0InOlxuICAgICAgICBjYXNlICdaJzpcbiAgICAgICAgICAvLyA4IGJpdFxuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgY2FzZSAnUyc6XG4gICAgICAgICAgLy8gMTYtYml0XG4gICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICBjYXNlICdKJzpcbiAgICAgICAgICAvLyA2NC1iaXRcbiAgICAgICAgICByZXR1cm4gODtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBFcnJvbmVvdXMgaW5wdXQuXG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBFcnJvbmVvdXMgaW5wdXQuXG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnYWRkcmVzc1NpemUoKUknKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlKTogbnVtYmVyIHtcbiAgICByZXR1cm4gNDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ3BhZ2VTaXplKClJJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSk6IG51bWJlciB7XG4gICAgLy8gTWF0Y2hlcyB0aGUgaGVhcC5cbiAgICByZXR1cm4gNDA5NjtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2RlZmluZUNsYXNzKExqYXZhL2xhbmcvU3RyaW5nO1tCSUlMamF2YS9sYW5nL0NsYXNzTG9hZGVyO0xqYXZhL3NlY3VyaXR5L1Byb3RlY3Rpb25Eb21haW47KUxqYXZhL2xhbmcvQ2xhc3M7Jyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgbmFtZTogSlZNVHlwZXMuamF2YV9sYW5nX1N0cmluZywgYnl0ZXM6IEpWTVR5cGVzLkpWTUFycmF5PG51bWJlcj4sIG9mZnNldDogbnVtYmVyLCBsZW46IG51bWJlciwgbG9hZGVyT2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfQ2xhc3NMb2FkZXIsIHBkOiBKVk1UeXBlcy5qYXZhX3NlY3VyaXR5X1Byb3RlY3Rpb25Eb21haW4pOiB2b2lkIHtcbiAgICB2YXIgbG9hZGVyID0gdXRpbC5nZXRMb2FkZXIodGhyZWFkLCBsb2FkZXJPYmopLFxuICAgICAgY2RhdGE6IENsYXNzRGF0YSA9IGxvYWRlci5kZWZpbmVDbGFzcyh0aHJlYWQsIHV0aWwuaW50X2NsYXNzbmFtZShuYW1lLnRvU3RyaW5nKCkpLCB1dGlsLmJ5dGVBcnJheTJCdWZmZXIoYnl0ZXMuYXJyYXksIG9mZnNldCwgbGVuKSwgcGQpO1xuICAgIGlmIChjZGF0YSAhPT0gbnVsbCkge1xuICAgICAgdGhyZWFkLnNldFN0YXR1cyhUaHJlYWRTdGF0dXMuQVNZTkNfV0FJVElORyk7XG4gICAgICAvLyBSZXNvbHZlIHRoZSBjbGFzcywgc2luY2Ugd2UncmUgaGFuZGluZyBpdCBiYWNrIHRvIHRoZSBhcHBsaWNhdGlvblxuICAgICAgLy8gYW5kIHdlIGV4cGVjdCB0aGVzZSB0aGluZ3MgdG8gYmUgcmVzb2x2ZWQuXG4gICAgICBjZGF0YS5yZXNvbHZlKHRocmVhZCwgKGNkYXRhOiBDbGFzc0RhdGEpID0+IHtcbiAgICAgICAgaWYgKGNkYXRhICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhyZWFkLmFzeW5jUmV0dXJuKGNkYXRhLmdldENsYXNzT2JqZWN0KHRocmVhZCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdhbGxvY2F0ZUluc3RhbmNlKExqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvT2JqZWN0OycodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGpjbzogSlZNVHlwZXMuamF2YV9sYW5nX0NsYXNzKTogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCB7XG4gICAgLy8gVGhpcyBjYW4gdHJpZ2dlciBjbGFzcyBpbml0aWFsaXphdGlvbiwgc28gY2hlY2sgaWYgdGhlIGNsYXNzIGlzXG4gICAgLy8gaW5pdGlhbGl6ZWQuXG4gICAgdmFyIGNscyA9IDxSZWZlcmVuY2VDbGFzc0RhdGE8SlZNVHlwZXMuamF2YV9sYW5nX09iamVjdD4+IGpjby4kY2xzO1xuICAgIGlmIChjbHMuaXNJbml0aWFsaXplZCh0aHJlYWQpKSB7XG4gICAgICByZXR1cm4gbmV3IChjbHMuZ2V0Q29uc3RydWN0b3IodGhyZWFkKSkodGhyZWFkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyZWFkLnNldFN0YXR1cyhUaHJlYWRTdGF0dXMuQVNZTkNfV0FJVElORyk7XG4gICAgICBjbHMuaW5pdGlhbGl6ZSh0aHJlYWQsICgpID0+IHtcbiAgICAgICAgdGhyZWFkLmFzeW5jUmV0dXJuKG5ldyAoY2xzLmdldENvbnN0cnVjdG9yKHRocmVhZCkpKHRocmVhZCkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnbW9uaXRvckVudGVyKExqYXZhL2xhbmcvT2JqZWN0OylWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYXJnMDogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCk6IHZvaWQge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdtb25pdG9yRXhpdChMamF2YS9sYW5nL09iamVjdDspVicodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGFyZzA6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QpOiB2b2lkIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAndHJ5TW9uaXRvckVudGVyKExqYXZhL2xhbmcvT2JqZWN0OylaJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYXJnMDogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCk6IG51bWJlciB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICAvLyBTYXRpc2Z5IFR5cGVTY3JpcHQgcmV0dXJuIHR5cGUuXG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICd0aHJvd0V4Y2VwdGlvbihMamF2YS9sYW5nL1Rocm93YWJsZTspVicodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGV4Y2VwdGlvbjogSlZNVHlwZXMuamF2YV9sYW5nX1Rocm93YWJsZSk6IHZvaWQge1xuICAgIHRocmVhZC50aHJvd0V4Y2VwdGlvbihleGNlcHRpb24pO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnY29tcGFyZUFuZFN3YXBPYmplY3QoTGphdmEvbGFuZy9PYmplY3Q7SkxqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvT2JqZWN0OylaJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBhcmcwOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBhcmcxOiBMb25nLCBhcmcyOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBhcmczOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0KSA9PiBib29sZWFuID0gdW5zYWZlQ29tcGFyZUFuZFN3YXA7XG4gIHB1YmxpYyBzdGF0aWMgJ2NvbXBhcmVBbmRTd2FwSW50KExqYXZhL2xhbmcvT2JqZWN0O0pJSSlaJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBhcmcwOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBhcmcxOiBMb25nLCBhcmcyOiBudW1iZXIsIGFyZzM6IG51bWJlcikgPT4gYm9vbGVhbiA9IHVuc2FmZUNvbXBhcmVBbmRTd2FwO1xuICBwdWJsaWMgc3RhdGljICdjb21wYXJlQW5kU3dhcExvbmcoTGphdmEvbGFuZy9PYmplY3Q7SkpKKVonOiAodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGFyZzA6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIGFyZzE6IExvbmcsIGFyZzI6IExvbmcsIGFyZzM6IExvbmcpID0+IGJvb2xlYW4gPSB1bnNhZmVDb21wYXJlQW5kU3dhcDtcblxuICBwdWJsaWMgc3RhdGljICdnZXRPYmplY3RWb2xhdGlsZShMamF2YS9sYW5nL09iamVjdDtKKUxqYXZhL2xhbmcvT2JqZWN0Oyc6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcpID0+IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QgPSBnZXRGcm9tVk1JbmRleDtcbiAgcHVibGljIHN0YXRpYyAncHV0T2JqZWN0Vm9sYXRpbGUoTGphdmEvbGFuZy9PYmplY3Q7SkxqYXZhL2xhbmcvT2JqZWN0OylWJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZywgbmV3VmFsdWU6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QpID0+IHZvaWQgID0gc2V0RnJvbVZNSW5kZXg7XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0SW50Vm9sYXRpbGUoTGphdmEvbGFuZy9PYmplY3Q7SilJJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZykgPT4gbnVtYmVyID0gZ2V0RnJvbVZNSW5kZXg7XG4gIHB1YmxpYyBzdGF0aWMgJ3B1dEludFZvbGF0aWxlKExqYXZhL2xhbmcvT2JqZWN0O0pJKVYnOiAodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIG9iajogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCwgb2Zmc2V0OiBMb25nLCBuZXdWYWx1ZTogbnVtYmVyKSA9PiB2b2lkID0gc2V0RnJvbVZNSW5kZXg7XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0Qm9vbGVhblZvbGF0aWxlKExqYXZhL2xhbmcvT2JqZWN0O0opWic6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcpID0+IG51bWJlciA9IGdldEZyb21WTUluZGV4O1xuICBwdWJsaWMgc3RhdGljICdwdXRCb29sZWFuVm9sYXRpbGUoTGphdmEvbGFuZy9PYmplY3Q7SlopVic6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcsIG5ld1ZhbHVlOiBudW1iZXIpID0+IHZvaWQgPSBzZXRGcm9tVk1JbmRleDtcblxuICBwdWJsaWMgc3RhdGljICdnZXRCeXRlVm9sYXRpbGUoTGphdmEvbGFuZy9PYmplY3Q7SilCJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZykgPT4gbnVtYmVyID0gZ2V0RnJvbVZNSW5kZXg7XG4gIHB1YmxpYyBzdGF0aWMgJ3B1dEJ5dGVWb2xhdGlsZShMamF2YS9sYW5nL09iamVjdDtKQilWJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZywgbmV3VmFsdWU6IG51bWJlcikgPT4gdm9pZCA9IHNldEZyb21WTUluZGV4O1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldFNob3J0Vm9sYXRpbGUoTGphdmEvbGFuZy9PYmplY3Q7SilTJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZykgPT4gbnVtYmVyID0gZ2V0RnJvbVZNSW5kZXg7XG4gIHB1YmxpYyBzdGF0aWMgJ3B1dFNob3J0Vm9sYXRpbGUoTGphdmEvbGFuZy9PYmplY3Q7SlMpVic6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcsIG5ld1ZhbHVlOiBudW1iZXIpID0+IHZvaWQgPSBzZXRGcm9tVk1JbmRleDtcblxuICBwdWJsaWMgc3RhdGljICdnZXRDaGFyVm9sYXRpbGUoTGphdmEvbGFuZy9PYmplY3Q7SilDJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZykgPT4gbnVtYmVyID0gZ2V0RnJvbVZNSW5kZXg7XG4gIHB1YmxpYyBzdGF0aWMgJ3B1dENoYXJWb2xhdGlsZShMamF2YS9sYW5nL09iamVjdDtKQylWJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZywgbmV3VmFsdWU6IG51bWJlcikgPT4gdm9pZCA9IHNldEZyb21WTUluZGV4O1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldExvbmdWb2xhdGlsZShMamF2YS9sYW5nL09iamVjdDtKKUonOiAodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIG9iajogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCwgb2Zmc2V0OiBMb25nKSA9PiBMb25nID0gZ2V0RnJvbVZNSW5kZXg7XG4gIHB1YmxpYyBzdGF0aWMgJ3B1dExvbmdWb2xhdGlsZShMamF2YS9sYW5nL09iamVjdDtKSilWJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZywgbmV3VmFsdWU6IExvbmcpID0+IHZvaWQgPSBzZXRGcm9tVk1JbmRleDtcblxuICBwdWJsaWMgc3RhdGljICdnZXRGbG9hdFZvbGF0aWxlKExqYXZhL2xhbmcvT2JqZWN0O0opRic6ICh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgb2JqOiBKVk1UeXBlcy5qYXZhX2xhbmdfT2JqZWN0LCBvZmZzZXQ6IExvbmcpID0+IG51bWJlciA9IGdldEZyb21WTUluZGV4O1xuICBwdWJsaWMgc3RhdGljICdwdXRGbG9hdFZvbGF0aWxlKExqYXZhL2xhbmcvT2JqZWN0O0pGKVYnOiAodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIG9iajogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCwgb2Zmc2V0OiBMb25nLCBuZXdWYWx1ZTogbnVtYmVyKSA9PiB2b2lkID0gc2V0RnJvbVZNSW5kZXg7XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0RG91YmxlVm9sYXRpbGUoTGphdmEvbGFuZy9PYmplY3Q7SilEJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZykgPT4gbnVtYmVyID0gZ2V0RnJvbVZNSW5kZXg7XG4gIHB1YmxpYyBzdGF0aWMgJ3B1dERvdWJsZVZvbGF0aWxlKExqYXZhL2xhbmcvT2JqZWN0O0pEKVYnOiAodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIG9iajogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCwgb2Zmc2V0OiBMb25nLCBuZXdWYWx1ZTogbnVtYmVyKSA9PiB2b2lkID0gc2V0RnJvbVZNSW5kZXg7XG5cbiAgcHVibGljIHN0YXRpYyAncHV0T3JkZXJlZE9iamVjdChMamF2YS9sYW5nL09iamVjdDtKTGphdmEvbGFuZy9PYmplY3Q7KVYnOiAodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIG9iajogSlZNVHlwZXMuamF2YV9sYW5nX09iamVjdCwgb2Zmc2V0OiBMb25nLCBuZXdPYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QpID0+IHZvaWQgPSBzZXRGcm9tVk1JbmRleDtcbiAgcHVibGljIHN0YXRpYyAncHV0T3JkZXJlZEludChMamF2YS9sYW5nL09iamVjdDtKSSlWJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZywgbmV3VmFsdWU6IG51bWJlcikgPT4gdm9pZCA9IHNldEZyb21WTUluZGV4O1xuICBwdWJsaWMgc3RhdGljICdwdXRPcmRlcmVkTG9uZyhMamF2YS9sYW5nL09iamVjdDtKSilWJzogKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlLCBvYmo6IEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3QsIG9mZnNldDogTG9uZywgbmV3VmFsdWU6IExvbmcpID0+IHZvaWQgPSBzZXRGcm9tVk1JbmRleDtcblxuICAvKipcbiAgICogVW5ibG9jayB0aGUgZ2l2ZW4gdGhyZWFkIGJsb2NrZWQgb24gcGFyaywgb3IsIGlmIGl0IGlzIG5vdCBibG9ja2VkLCBjYXVzZVxuICAgKiB0aGUgc3Vic2VxdWVudCBjYWxsIHRvIHBhcmsgbm90IHRvIGJsb2NrLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyAndW5wYXJrKExqYXZhL2xhbmcvT2JqZWN0OylWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgdGhlVGhyZWFkOiBKVk1UeXBlcy5qYXZhX2xhbmdfVGhyZWFkKTogdm9pZCB7XG4gICAgdGhyZWFkLmdldEpWTSgpLmdldFBhcmtlcigpLnVucGFyayh0aGVUaHJlYWQuJHRocmVhZCk7XG4gIH1cblxuICAvKipcbiAgICogQmxvY2sgY3VycmVudCB0aHJlYWQsIHJldHVybmluZyB3aGVuIGEgYmFsYW5jaW5nIHVucGFyayBvY2N1cnMsIG9yIGFcbiAgICogYmFsYW5jaW5nIHVucGFyayBoYXMgYWxyZWFkeSBvY2N1cnJlZCwgb3IgdGhlIHRocmVhZCBpcyBpbnRlcnJ1cHRlZCwgb3IsXG4gICAqIGlmIG5vdCBhYnNvbHV0ZSBhbmQgdGltZSBpcyBub3QgemVybywgdGhlIGdpdmVuIHRpbWUgbmFub3NlY29uZHMgaGF2ZVxuICAgKiBlbGFwc2VkLCBvciBpZiBhYnNvbHV0ZSwgdGhlIGdpdmVuIGRlYWRsaW5lIGluIG1pbGxpc2Vjb25kcyBzaW5jZSBFcG9jaFxuICAgKiBoYXMgcGFzc2VkLCBvciBzcHVyaW91c2x5IChpLmUuLCByZXR1cm5pbmcgZm9yIG5vIFwicmVhc29uXCIpLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyAncGFyayhaSilWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYWJzb2x1dGU6IG51bWJlciwgdGltZTogTG9uZyk6IHZvaWQge1xuICAgIHZhciB0aW1lb3V0ID0gSW5maW5pdHksIHBhcmtlciA9IHRocmVhZC5nZXRKVk0oKS5nZXRQYXJrZXIoKTtcbiAgICBpZiAoYWJzb2x1dGUpIHtcbiAgICAgIC8vIFRpbWUgaXMgYW4gYWJzb2x1dGUgdGltZSAobWlsbGlzZWNvbmRzIHNpbmNlIEVwb2NoKS5cbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgdGltZW91dCBmcm9tIHRoZSBjdXJyZW50IHRpbWUuXG4gICAgICB0aW1lb3V0ID0gdGltZS50b051bWJlcigpIC0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgIGlmICh0aW1lb3V0IDwgMCkge1xuICAgICAgICAvLyBGb3JiaWQgbmVnYXRpdmUgdGltZW91dHMuXG4gICAgICAgIHRpbWVvdXQgPSAwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0aW1lIGlzIGluIG5hbm9zZWNvbmRzLCBidXQgd2UgZG9uJ3QgaGF2ZSB0aGF0XG4gICAgICAvLyB0eXBlIG9mIHByZWNpc2lvblxuICAgICAgaWYgKHRpbWUudG9OdW1iZXIoKSA+IDApIHtcbiAgICAgICAgdGltZW91dCA9IHRpbWUudG9OdW1iZXIoKSAvIDEwMDAwMDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVHlwZWQgYXMgYW55IGR1ZSB0byB0eXBlIGRpc2NyZXBlbmN5IGJldHdlZW4gYnJvd3NlciBhbmQgbm9kZS5cbiAgICB2YXIgdGltZXI6IGFueTtcbiAgICBpZiAodGltZW91dCAhPT0gSW5maW5pdHkpIHtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHBhcmtlci5jb21wbGV0ZWx5VW5wYXJrKHRocmVhZCk7XG4gICAgICB9LCB0aW1lb3V0KTtcbiAgICB9XG5cbiAgICBwYXJrZXIucGFyayh0aHJlYWQsICgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aHJlYWQuYXN5bmNSZXR1cm4oKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldExvYWRBdmVyYWdlKFtESSlJJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSwgYXJnMDogSlZNVHlwZXMuSlZNQXJyYXk8bnVtYmVyPiwgYXJnMTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlY3QgaWYgdGhlIGdpdmVuIGNsYXNzIG1heSBuZWVkIHRvIGJlIGluaXRpYWxpemVkLiBUaGlzIGlzIG9mdGVuXG4gICAqIG5lZWRlZCBpbiBjb25qdW5jdGlvbiB3aXRoIG9idGFpbmluZyB0aGUgc3RhdGljIGZpZWxkIGJhc2Ugb2YgYVxuICAgKiBjbGFzcy5cbiAgICogQHJldHVybiBmYWxzZSBvbmx5IGlmIGEgY2FsbCB0byB7QGNvZGUgZW5zdXJlQ2xhc3NJbml0aWFsaXplZH0gd291bGQgaGF2ZSBubyBlZmZlY3RcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgJ3Nob3VsZEJlSW5pdGlhbGl6ZWQoTGphdmEvbGFuZy9DbGFzczspWicodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGNsczogSlZNVHlwZXMuamF2YV9sYW5nX0NsYXNzKTogbnVtYmVyIHtcbiAgICByZXR1cm4gIWNscy4kY2xzLmlzSW5pdGlhbGl6ZWQodGhyZWFkKSA/IDEgOiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZSBhIGNsYXNzIGJ1dCBkbyBub3QgbWFrZSBpdCBrbm93biB0byB0aGUgY2xhc3MgbG9hZGVyIG9yIHN5c3RlbSBkaWN0aW9uYXJ5LlxuICAgKlxuICAgKiBGb3IgZWFjaCBDUCBlbnRyeSwgdGhlIGNvcnJlc3BvbmRpbmcgQ1AgcGF0Y2ggbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBoYXZlXG4gICAqIHRoZSBmb3JtYXQgdGhhdCBtYXRjaGVzIGl0cyB0YWc6XG4gICAqXG4gICAqICogSW50ZWdlciwgTG9uZywgRmxvYXQsIERvdWJsZTogdGhlIGNvcnJlc3BvbmRpbmcgd3JhcHBlciBvYmplY3QgdHlwZSBmcm9tIGphdmEubGFuZ1xuICAgKiAqIFV0Zjg6IGEgc3RyaW5nIChtdXN0IGhhdmUgc3VpdGFibGUgc3ludGF4IGlmIHVzZWQgYXMgc2lnbmF0dXJlIG9yIG5hbWUpXG4gICAqICogQ2xhc3M6IGFueSBqYXZhLmxhbmcuQ2xhc3Mgb2JqZWN0XG4gICAqICogU3RyaW5nOiBhbnkgb2JqZWN0IChub3QganVzdCBhIGphdmEubGFuZy5TdHJpbmcpXG4gICAqICogSW50ZXJmYWNlTWV0aG9kUmVmOiAoTllJKSBhIG1ldGhvZCBoYW5kbGUgdG8gaW52b2tlIG9uIHRoYXQgY2FsbCBzaXRlJ3MgYXJndW1lbnRzXG4gICAqXG4gICAqIEBwYXJhbXMgaG9zdENsYXNzIGNvbnRleHQgZm9yIGxpbmthZ2UsIGFjY2VzcyBjb250cm9sLCBwcm90ZWN0aW9uIGRvbWFpbiwgYW5kIGNsYXNzIGxvYWRlclxuICAgKiBAcGFyYW1zIGRhdGEgICAgICBieXRlcyBvZiBhIGNsYXNzIGZpbGVcbiAgICogQHBhcmFtcyBjcFBhdGNoZXMgd2hlcmUgbm9uLW51bGwgZW50cmllcyBleGlzdCwgdGhleSByZXBsYWNlIGNvcnJlc3BvbmRpbmcgQ1AgZW50cmllcyBpbiBkYXRhXG4gICAqL1xuICBwdWJsaWMgc3RhdGljICdkZWZpbmVBbm9ueW1vdXNDbGFzcyhMamF2YS9sYW5nL0NsYXNzO1tCW0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL0NsYXNzOycodGhyZWFkOiBKVk1UaHJlYWQsIGphdmFUaGlzOiBKVk1UeXBlcy5zdW5fbWlzY19VbnNhZmUsIGhvc3RDbGFzczogSlZNVHlwZXMuamF2YV9sYW5nX0NsYXNzLCBkYXRhOiBKVk1UeXBlcy5KVk1BcnJheTxudW1iZXI+LCBjcFBhdGNoZXM6IEpWTVR5cGVzLkpWTUFycmF5PEpWTVR5cGVzLmphdmFfbGFuZ19PYmplY3Q+KTogSlZNVHlwZXMuamF2YV9sYW5nX0NsYXNzIHtcbiAgICByZXR1cm4gbmV3IFJlZmVyZW5jZUNsYXNzRGF0YShuZXcgQnVmZmVyKGRhdGEuYXJyYXkpLCBudWxsLCBob3N0Q2xhc3MuJGNscy5nZXRMb2FkZXIoKSwgY3BQYXRjaGVzKS5nZXRDbGFzc09iamVjdCh0aHJlYWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuc3VyZXMgbGFjayBvZiByZW9yZGVyaW5nIG9mIGxvYWRzIGJlZm9yZSB0aGUgZmVuY2VcbiAgICogd2l0aCBsb2FkcyBvciBzdG9yZXMgYWZ0ZXIgdGhlIGZlbmNlLlxuICAgKiBAc2luY2UgMS44XG4gICAqL1xuICBwdWJsaWMgc3RhdGljICdsb2FkRmVuY2UoKVYnKHRocmVhZDogSlZNVGhyZWFkLCBqYXZhVGhpczogSlZNVHlwZXMuc3VuX21pc2NfVW5zYWZlKTogdm9pZCB7XG4gICAgLy8gTk9QXG4gIH1cblxuICAvKipcbiAgICogRW5zdXJlcyBsYWNrIG9mIHJlb3JkZXJpbmcgb2Ygc3RvcmVzIGJlZm9yZSB0aGUgZmVuY2VcbiAgICogd2l0aCBsb2FkcyBvciBzdG9yZXMgYWZ0ZXIgdGhlIGZlbmNlLlxuICAgKiBAc2luY2UgMS44XG4gICAqL1xuICBwdWJsaWMgc3RhdGljICdzdG9yZUZlbmNlKClWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSk6IHZvaWQge1xuICAgIC8vIE5PUFxuICB9XG5cbiAgLyoqXG4gICAqIEVuc3VyZXMgbGFjayBvZiByZW9yZGVyaW5nIG9mIGxvYWRzIG9yIHN0b3JlcyBiZWZvcmUgdGhlIGZlbmNlXG4gICAqIHdpdGggbG9hZHMgb3Igc3RvcmVzIGFmdGVyIHRoZSBmZW5jZS5cbiAgICogQHNpbmNlIDEuOFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyAnZnVsbEZlbmNlKClWJyh0aHJlYWQ6IEpWTVRocmVhZCwgamF2YVRoaXM6IEpWTVR5cGVzLnN1bl9taXNjX1Vuc2FmZSk6IHZvaWQge1xuICAgIC8vIE5PUFxuICB9XG59XG5cbmNsYXNzIHN1bl9taXNjX1ZlcnNpb24ge1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldEp2bVNwZWNpYWxWZXJzaW9uKClMamF2YS9sYW5nL1N0cmluZzsnKHRocmVhZDogSlZNVGhyZWFkKTogSlZNVHlwZXMuamF2YV9sYW5nX1N0cmluZyB7XG4gICAgdGhyZWFkLnRocm93TmV3RXhjZXB0aW9uKCdMamF2YS9sYW5nL1Vuc2F0aXNmaWVkTGlua0Vycm9yOycsICdOYXRpdmUgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICAvLyBTYXRpc2Z5IFR5cGVTY3JpcHQgcmV0dXJuIHR5cGUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljICdnZXRKZGtTcGVjaWFsVmVyc2lvbigpTGphdmEvbGFuZy9TdHJpbmc7Jyh0aHJlYWQ6IEpWTVRocmVhZCk6IEpWTVR5cGVzLmphdmFfbGFuZ19TdHJpbmcge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgLy8gU2F0aXNmeSBUeXBlU2NyaXB0IHJldHVybiB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyAnZ2V0SnZtVmVyc2lvbkluZm8oKVonKHRocmVhZDogSlZNVGhyZWFkKTogbnVtYmVyIHtcbiAgICB0aHJlYWQudGhyb3dOZXdFeGNlcHRpb24oJ0xqYXZhL2xhbmcvVW5zYXRpc2ZpZWRMaW5rRXJyb3I7JywgJ05hdGl2ZSBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIC8vIFNhdGlzZnkgVHlwZVNjcmlwdCByZXR1cm4gdHlwZS5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldEpka1ZlcnNpb25JbmZvKClWJyh0aHJlYWQ6IEpWTVRocmVhZCk6IHZvaWQge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxufVxuXG5jbGFzcyBzdW5fbWlzY19WTSB7XG5cbiAgcHVibGljIHN0YXRpYyAnaW5pdGlhbGl6ZSgpVicodGhyZWFkOiBKVk1UaHJlYWQpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3Qgbm9uLW51bGwgY2xhc3MgbG9hZGVyIChub3QgY291bnRpbmcgY2xhc3MgbG9hZGVyc1xuICAgKiBvZiBnZW5lcmF0ZWQgcmVmbGVjdGlvbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzKSB1cCB0aGUgZXhlY3V0aW9uIHN0YWNrLFxuICAgKiBvciBudWxsIGlmIG9ubHkgY29kZSBmcm9tIHRoZSBudWxsIGNsYXNzIGxvYWRlciBpcyBvbiB0aGUgc3RhY2suXG4gICAqL1xuICBwdWJsaWMgc3RhdGljICdsYXRlc3RVc2VyRGVmaW5lZExvYWRlcigpTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsnKHRocmVhZDogSlZNVGhyZWFkKTogSlZNVHlwZXMuamF2YV9sYW5nX0NsYXNzTG9hZGVyIHtcbiAgICB2YXIgc3RhY2tUcmFjZSA9IHRocmVhZC5nZXRTdGFja1RyYWNlKCksIGk6IG51bWJlcixcbiAgICAgIGJzQ2wgPSB0aHJlYWQuZ2V0QnNDbCgpLCBsb2FkZXI6IENsYXNzTG9hZGVyO1xuICAgIGZvciAoaSA9IHN0YWNrVHJhY2UubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGxvYWRlciA9IHN0YWNrVHJhY2VbaV0ubWV0aG9kLmNscy5nZXRMb2FkZXIoKTtcbiAgICAgIGlmIChsb2FkZXIgIT09IGJzQ2wpIHtcbiAgICAgICAgcmV0dXJuICg8Q3VzdG9tQ2xhc3NMb2FkZXI+IGxvYWRlcikuZ2V0TG9hZGVyT2JqZWN0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbn1cblxuY2xhc3Mgc3VuX21pc2NfVk1TdXBwb3J0IHtcblxuICBwdWJsaWMgc3RhdGljICdpbml0QWdlbnRQcm9wZXJ0aWVzKExqYXZhL3V0aWwvUHJvcGVydGllczspTGphdmEvdXRpbC9Qcm9wZXJ0aWVzOycodGhyZWFkOiBKVk1UaHJlYWQsIGFyZzA6IEpWTVR5cGVzLmphdmFfdXRpbF9Qcm9wZXJ0aWVzKTogSlZNVHlwZXMuamF2YV91dGlsX1Byb3BlcnRpZXMge1xuICAgIHRocmVhZC50aHJvd05ld0V4Y2VwdGlvbignTGphdmEvbGFuZy9VbnNhdGlzZmllZExpbmtFcnJvcjsnLCAnTmF0aXZlIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgLy8gU2F0aXNmeSBUeXBlU2NyaXB0IHJldHVybiB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbn1cblxuLyoqXG4gKiBVUkxDbGFzc1BhdGggaGFzIG9wdGlvbmFsIHN1cHBvcnQgZm9yIGEgbG9va3VwY2FjaGUsIHdoaWNoIHdlIGRvIG5vdCBzdXBwb3J0LlxuICovXG5jbGFzcyBzdW5fbWlzY19VUkxDbGFzc1BhdGgge1xuXG4gIHB1YmxpYyBzdGF0aWMgJ2dldExvb2t1cENhY2hlVVJMcyhMamF2YS9sYW5nL0NsYXNzTG9hZGVyOylbTGphdmEvbmV0L1VSTDsnKHRocmVhZDogSlZNVGhyZWFkLCBsb2FkZXI6IEpWTVR5cGVzLmphdmFfbGFuZ19DbGFzc0xvYWRlcik6IEpWTVR5cGVzLkpWTUFycmF5PEpWTVR5cGVzLmphdmFfbmV0X1VSTD4ge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cblxuICBwdWJsaWMgc3RhdGljICdnZXRMb29rdXBDYWNoZUZvckNsYXNzTG9hZGVyKExqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7TGphdmEvbGFuZy9TdHJpbmc7KVtJJyh0aHJlYWQ6IEpWTVRocmVhZCwgbG9hZGVyOiBKVk1UeXBlcy5qYXZhX2xhbmdfQ2xhc3NMb2FkZXIsIG5hbWU6IEpWTVR5cGVzLmphdmFfbGFuZ19TdHJpbmcpOiBKVk1UeXBlcy5KVk1BcnJheTxudW1iZXI+IHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgJ2tub3duVG9Ob3RFeGlzdDAoTGphdmEvbGFuZy9DbGFzc0xvYWRlcjtMamF2YS9sYW5nL1N0cmluZzspWicodGhyZWFkOiBKVk1UaHJlYWQsIGxvYWRlcjogSlZNVHlwZXMuamF2YV9sYW5nX0NsYXNzTG9hZGVyLCBuYW1lOiBKVk1UeXBlcy5qYXZhX2xhbmdfU3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbn1cblxucmVnaXN0ZXJOYXRpdmVzKHtcbiAgJ3N1bi9taXNjL0dDJzogc3VuX21pc2NfR0MsXG4gICdzdW4vbWlzYy9NZXNzYWdlVXRpbHMnOiBzdW5fbWlzY19NZXNzYWdlVXRpbHMsXG4gICdzdW4vbWlzYy9OYXRpdmVTaWduYWxIYW5kbGVyJzogc3VuX21pc2NfTmF0aXZlU2lnbmFsSGFuZGxlcixcbiAgJ3N1bi9taXNjL1BlcmYnOiBzdW5fbWlzY19QZXJmLFxuICAnc3VuL21pc2MvU2lnbmFsJzogc3VuX21pc2NfU2lnbmFsLFxuICAnc3VuL21pc2MvVW5zYWZlJzogc3VuX21pc2NfVW5zYWZlLFxuICAnc3VuL21pc2MvVmVyc2lvbic6IHN1bl9taXNjX1ZlcnNpb24sXG4gICdzdW4vbWlzYy9WTSc6IHN1bl9taXNjX1ZNLFxuICAnc3VuL21pc2MvVk1TdXBwb3J0Jzogc3VuX21pc2NfVk1TdXBwb3J0LFxuICAnc3VuL21pc2MvVVJMQ2xhc3NQYXRoJzogc3VuX21pc2NfVVJMQ2xhc3NQYXRoXG59KTtcbiJdfQ==