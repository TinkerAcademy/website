function throwNodeError(a,b){var c="Ljava/io/IOException;";"ENOENT"===b.code&&(c="Ljava/io/FileNotFoundException;"),a.throwNewException(c,b.message)}function async_input(a,b){var c=function(a){var b=process.stdin.read(a);return null===b&&(b=process.stdin.read()),null!==b&&1===b.length&&0===b.readUInt8(0)&&(b=new Buffer(0)),b},d=c(a);null===d?process.stdin.once("readable",function(d){var e=c(a);null===e&&(e=new Buffer(0)),b(e)}):setImmediate(function(){b(d)})}function statFile(a,b){fs.stat(a,function(a,c){b(null!=a?null:c)})}var fs=require("fs"),path=require("path"),Doppio=require("../doppiojvm"),util=Doppio.VM.Util,ThreadStatus=Doppio.VM.Enums.ThreadStatus,Long=Doppio.VM.Long,java_io_Console=function(){function a(){}return a["encoding()Ljava/lang/String;"]=function(a){return null},a["echo(Z)Z"]=function(a,b){var c=!b;return process.stdin.setRawMode(c),c},a["istty()Z"]=function(a){return process.stdout.isTTY},a}(),java_io_FileDescriptor=function(){function a(){}return a["sync()V"]=function(a,b){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["initIDs()V"]=function(a){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),java_io_FileInputStream=function(){function a(){}return a["open0(Ljava/lang/String;)V"]=function(a,b,c){var d=c.toString();a.setStatus(ThreadStatus.ASYNC_WAITING),fs.open(d,"r",function(c,e){if(null!=c)"ENOENT"===c.code?a.throwNewException("Ljava/io/FileNotFoundException;",""+d+" (No such file or directory)"):a.throwNewException("Ljava/lang/InternalError","Internal JVM error: "+c);else{var f=b["java/io/FileInputStream/fd"];f["java/io/FileDescriptor/fd"]=e,f.$pos=0,a.asyncReturn()}})},a["read0()I"]=function(a,b){var c=b["java/io/FileInputStream/fd"],d=c["java/io/FileDescriptor/fd"];if(-1===d)a.throwNewException("Ljava/io/IOException;","Bad file descriptor");else if(0!==d){a.setStatus(ThreadStatus.ASYNC_WAITING);var e=new Buffer(1);fs.read(d,e,0,1,c.$pos,function(b,d){return b?throwNodeError(a,b):(c.$pos++,void a.asyncReturn(0===d?-1:e.readUInt8(0)))})}else a.setStatus(ThreadStatus.ASYNC_WAITING),async_input(1,function(b){a.asyncReturn(0===b.length?-1:b.readUInt8(0))})},a["readBytes([BII)I"]=function(a,b,c,d,e){var f,g,h=b["java/io/FileInputStream/fd"],i=h["java/io/FileDescriptor/fd"];return d+e>c.array.length?void a.throwNewException("Ljava/lang/IndexOutOfBoundsException;",""):0===e?0:void(-1===i?a.throwNewException("Ljava/io/IOException;","Bad file descriptor"):0!==i?(g=h.$pos,f=new Buffer(e),a.setStatus(ThreadStatus.ASYNC_WAITING),fs.read(i,f,0,e,g,function(b,e){if(null!=b)throwNodeError(a,b);else{h.$pos+=e;for(var g=0;e>g;g++)c.array[d+g]=f.readInt8(g);a.asyncReturn(0===e?-1:e)}})):(a.setStatus(ThreadStatus.ASYNC_WAITING),async_input(e,function(b){var e,f;for(f=0;f<b.length;f++)e=b.readUInt8(f),c.array[d+f]=e;a.asyncReturn(0===b.length?-1:b.length)})))},a["skip(J)J"]=function(a,b,c){var d=b["java/io/FileInputStream/fd"],e=d["java/io/FileDescriptor/fd"];-1===e?a.throwNewException("Ljava/io/IOException;","Bad file descriptor"):0!==e?(a.setStatus(ThreadStatus.ASYNC_WAITING),fs.fstat(e,function(b,e){if(b)return throwNodeError(a,b);var f=e.size-d.$pos,g=Math.min(c.toNumber(),f);d.$pos+=g,a.asyncReturn(Long.fromNumber(g),null)})):(a.setStatus(ThreadStatus.ASYNC_WAITING),async_input(c.toNumber(),function(b){a.asyncReturn(Long.fromNumber(b.length),null)}))},a["available()I"]=function(a,b){var c=b["java/io/FileInputStream/fd"],d=c["java/io/FileDescriptor/fd"];if(-1===d)a.throwNewException("Ljava/io/IOException;","Bad file descriptor");else{if(0===d)return 0;a.setStatus(ThreadStatus.ASYNC_WAITING),fs.fstat(d,function(b,d){return b?throwNodeError(a,b):void a.asyncReturn(d.size-c.$pos)})}},a["initIDs()V"]=function(a){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["close0()V"]=function(a,b){var c=b["java/io/FileInputStream/fd"],d=c["java/io/FileDescriptor/fd"];a.setStatus(ThreadStatus.ASYNC_WAITING),fs.close(d,function(b){b?throwNodeError(a,b):(c["java/io/FileDescriptor/fd"]=-1,a.asyncReturn())})},a}(),java_io_FileOutputStream=function(){function a(){}return a["open0(Ljava/lang/String;Z)V"]=function(a,b,c,d){a.setStatus(ThreadStatus.ASYNC_WAITING),fs.open(c.toString(),d?"a":"w",function(c,d){if(c)return throwNodeError(a,c);var e=b["java/io/FileOutputStream/fd"];e["java/io/FileDescriptor/fd"]=d,fs.fstat(d,function(b,c){e.$pos=c.size,a.asyncReturn()})})},a["write(IZ)V"]=function(b,c,d,e){a["writeBytes([BIIZ)V"](b,c,{array:[d]},0,1,e)},a["writeBytes([BIIZ)V"]=function(a,b,c,d,e,f){var g=new Buffer(c.array),h=b["java/io/FileOutputStream/fd"],i=h["java/io/FileDescriptor/fd"];if(-1===i)a.throwNewException("Ljava/io/IOException;","Bad file descriptor");else if(1!==i&&2!==i)a.setStatus(ThreadStatus.ASYNC_WAITING),fs.write(i,g,d,e,h.$pos,function(b,c){return b?throwNodeError(a,b):(h.$pos+=c,void a.asyncReturn())});else{var j=g.toString("utf8",d,d+e);1===i?process.stdout.write(j):2===i&&process.stderr.write(j),a.setStatus(ThreadStatus.ASYNC_WAITING),setImmediate(function(){a.asyncReturn()})}},a["close0()V"]=function(a,b){var c=b["java/io/FileOutputStream/fd"],d=c["java/io/FileDescriptor/fd"];a.setStatus(ThreadStatus.ASYNC_WAITING),fs.close(d,function(b){return b?throwNodeError(a,b):(c["java/io/FileDescriptor/fd"]=-1,void a.asyncReturn())})},a["initIDs()V"]=function(a){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),java_io_ObjectInputStream=function(){function a(){}return a["bytesToFloats([BI[FII)V"]=function(a,b,c,d,e,f){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["bytesToDoubles([BI[DII)V"]=function(a,b,c,d,e,f){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),java_io_ObjectOutputStream=function(){function a(){}return a["floatsToBytes([FI[BII)V"]=function(a,b,c,d,e,f){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["doublesToBytes([DI[BII)V"]=function(a,b,c,d,e,f){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}(),java_io_ObjectStreamClass=function(){function a(){}return a["initNative()V"]=function(a){},a["hasStaticInitializer(Ljava/lang/Class;)Z"]=function(a,b){return null!==b.$cls.getMethod("<clinit>()V")},a}(),java_io_RandomAccessFile=function(){function a(){}return a["open0(Ljava/lang/String;I)V"]=function(a,b,c,d){var e,f=c.toString(),g=b.getClass().getConstructor(a);switch(d){case g["java/io/RandomAccessFile/O_RDONLY"]:e="r";break;case g["java/io/RandomAccessFile/O_RDWR"]:e="r+";break;case g["java/io/RandomAccessFile/O_SYNC"]:case g["java/io/RandomAccessFile/O_DSYNC"]:e="rs+"}a.setStatus(ThreadStatus.ASYNC_WAITING),fs.open(f,e,function(c,d){if(c)return throwNodeError(a,c);var e=b["java/io/RandomAccessFile/fd"];e["java/io/FileDescriptor/fd"]=d,e.$pos=0,a.asyncReturn()})},a["read0()I"]=function(a,b){var c=b["java/io/RandomAccessFile/fd"],d=c["java/io/FileDescriptor/fd"],e=new Buffer(1);a.setStatus(ThreadStatus.ASYNC_WAITING),fs.read(d,e,0,1,c.$pos,function(b,d){return b?throwNodeError(a,b):(c.$pos+=d,void a.asyncReturn(0===d?-1:e.readUInt8(0)))})},a["readBytes([BII)I"]=function(a,b,c,d,e){var f=b["java/io/RandomAccessFile/fd"],g=f["java/io/FileDescriptor/fd"],h=new Buffer(e);a.setStatus(ThreadStatus.ASYNC_WAITING),fs.read(g,h,0,e,f.$pos,function(b,g){if(b)return throwNodeError(a,b);for(var i=0;g>i;i++)c.array[d+i]=h.readInt8(i);f.$pos+=g,a.asyncReturn(0===g&&0!==e?-1:g)})},a["write0(I)V"]=function(a,b,c){var d=b["java/io/RandomAccessFile/fd"],e=d["java/io/FileDescriptor/fd"],f=new Buffer(1);f.writeInt8(c,0),a.setStatus(ThreadStatus.ASYNC_WAITING),fs.write(e,f,0,1,d.$pos,function(b,c){return b?throwNodeError(a,b):(d.$pos+=c,void a.asyncReturn())})},a["writeBytes([BII)V"]=function(a,b,c,d,e){var f=b["java/io/RandomAccessFile/fd"],g=f["java/io/FileDescriptor/fd"],h=new Buffer(c.array);a.setStatus(ThreadStatus.ASYNC_WAITING),fs.write(g,h,d,e,f.$pos,function(b,c){return b?throwNodeError(a,b):(f.$pos+=c,void a.asyncReturn())})},a["getFilePointer()J"]=function(a,b){return Long.fromNumber(b["java/io/RandomAccessFile/fd"].$pos)},a["seek0(J)V"]=function(a,b,c){b["java/io/RandomAccessFile/fd"].$pos=c.toNumber()},a["length()J"]=function(a,b){var c=b["java/io/RandomAccessFile/fd"],d=c["java/io/FileDescriptor/fd"];a.setStatus(ThreadStatus.ASYNC_WAITING),fs.fstat(d,function(b,c){return b?throwNodeError(a,b):void a.asyncReturn(Long.fromNumber(c.size),null)})},a["setLength(J)V"]=function(a,b,c){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["initIDs()V"]=function(a){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a["close0()V"]=function(a,b){var c=b["java/io/RandomAccessFile/fd"],d=c["java/io/FileDescriptor/fd"];a.setStatus(ThreadStatus.ASYNC_WAITING),fs.close(d,function(b){return b?throwNodeError(a,b):(c["java/io/FileDescriptor/fd"]=-1,void a.asyncReturn())})},a}(),java_io_UnixFileSystem=function(){function a(){}return a["canonicalize0(Ljava/lang/String;)Ljava/lang/String;"]=function(a,b,c){var d=c.toString();return util.initString(a.getBsCl(),path.resolve(path.normalize(d)))},a["getBooleanAttributes0(Ljava/io/File;)I"]=function(a,b,c){var d=c["java/io/File/path"],e=a.getBsCl().getInitializedClass(a,"Ljava/io/FileSystem;").getConstructor(a);a.setStatus(ThreadStatus.ASYNC_WAITING),statFile(d.toString(),function(b){var c=0;null!==b&&(c|=e["java/io/FileSystem/BA_EXISTS"],b.isFile()?c|=e["java/io/FileSystem/BA_REGULAR"]:b.isDirectory()&&(c|=e["java/io/FileSystem/BA_DIRECTORY"])),a.asyncReturn(c)})},a["checkAccess(Ljava/io/File;I)Z"]=function(a,b,c,d){var e=c["java/io/File/path"];a.setStatus(ThreadStatus.ASYNC_WAITING),statFile(e.toString(),function(b){if(null==b)a.asyncReturn(0);else{var c=d|d<<3|d<<6;a.asyncReturn((b.mode&c)>0?1:0)}})},a["getLastModifiedTime(Ljava/io/File;)J"]=function(a,b,c){var d=c["java/io/File/path"];a.setStatus(ThreadStatus.ASYNC_WAITING),statFile(d.toString(),function(b){null==b?a.asyncReturn(Long.ZERO,null):a.asyncReturn(Long.fromNumber(b.mtime.getTime()),null)})},a["getLength(Ljava/io/File;)J"]=function(a,b,c){var d=c["java/io/File/path"];a.setStatus(ThreadStatus.ASYNC_WAITING),fs.stat(d.toString(),function(b,c){a.asyncReturn(null!=b?Long.ZERO:Long.fromNumber(c.size),null)})},a["setPermission(Ljava/io/File;IZZ)Z"]=function(a,b,c,d,e,f){var g=c["java/io/File/path"].toString();f?d<<=6:d|=d<<6|d<<3,e||(d=~d),a.setStatus(ThreadStatus.ASYNC_WAITING),statFile(g,function(b){if(null==b)a.asyncReturn(0);else{var c=b.mode;d=e?c|d:c&d,fs.chmod(g,d,function(b){a.asyncReturn(null!=b?0:1)})}})},a["createFileExclusively(Ljava/lang/String;)Z"]=function(a,b,c){var d=c.toString();a.setStatus(ThreadStatus.ASYNC_WAITING),statFile(d,function(b){null!=b?a.asyncReturn(0):fs.open(d,"w",function(b,c){null!=b?a.throwNewException("Ljava/io/IOException;",b.message):fs.close(c,function(b){null!=b?a.throwNewException("Ljava/io/IOException;",b.message):a.asyncReturn(1)})})})},a["delete0(Ljava/io/File;)Z"]=function(a,b,c){var d=c["java/io/File/path"].toString();a.setStatus(ThreadStatus.ASYNC_WAITING),statFile(d,function(b){null==b?a.asyncReturn(0):b.isDirectory()?fs.readdir(d,function(b,c){c.length>0?a.asyncReturn(0):fs.rmdir(d,function(b){a.asyncReturn(1)})}):fs.unlink(d,function(b){a.asyncReturn(1)})})},a["list(Ljava/io/File;)[Ljava/lang/String;"]=function(a,b,c){var d=c["java/io/File/path"];a.getBsCl();a.setStatus(ThreadStatus.ASYNC_WAITING),fs.readdir(d.toString(),function(b,c){null!=b?a.asyncReturn(null):a.asyncReturn(util.newArrayFromData(a,a.getBsCl(),"[Ljava/lang/String;",c.map(function(b){return util.initString(a.getBsCl(),b)})))})},a["createDirectory(Ljava/io/File;)Z"]=function(a,b,c){var d=c["java/io/File/path"].toString();a.setStatus(ThreadStatus.ASYNC_WAITING),statFile(d,function(b){null!=b?a.asyncReturn(0):fs.mkdir(d,function(b){a.asyncReturn(null!=b?0:1)})})},a["rename0(Ljava/io/File;Ljava/io/File;)Z"]=function(a,b,c,d){var e=c["java/io/File/path"].toString(),f=d["java/io/File/path"].toString();a.setStatus(ThreadStatus.ASYNC_WAITING),fs.rename(e,f,function(b){a.asyncReturn(null!=b?0:1)})},a["setLastModifiedTime(Ljava/io/File;J)Z"]=function(a,b,c,d){var e=d.toNumber(),f=(new Date).getTime(),g=c["java/io/File/path"].toString();a.setStatus(ThreadStatus.ASYNC_WAITING),fs.utimes(g,f,e,function(b){a.asyncReturn(1)})},a["setReadOnly(Ljava/io/File;)Z"]=function(a,b,c){var d=c["java/io/File/path"].toString(),e=-147;a.setStatus(ThreadStatus.ASYNC_WAITING),statFile(d,function(b){null==b?a.asyncReturn(0):fs.chmod(d,b.mode&e,function(b){a.asyncReturn(null!=b?0:1)})})},a["getSpace(Ljava/io/File;I)J"]=function(a,b,c,d){return a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented."),null},a["initIDs()V"]=function(a){a.throwNewException("Ljava/lang/UnsatisfiedLinkError;","Native method not implemented.")},a}();registerNatives({"java/io/Console":java_io_Console,"java/io/FileDescriptor":java_io_FileDescriptor,"java/io/FileInputStream":java_io_FileInputStream,"java/io/FileOutputStream":java_io_FileOutputStream,"java/io/ObjectInputStream":java_io_ObjectInputStream,"java/io/ObjectOutputStream":java_io_ObjectOutputStream,"java/io/ObjectStreamClass":java_io_ObjectStreamClass,"java/io/RandomAccessFile":java_io_RandomAccessFile,"java/io/UnixFileSystem":java_io_UnixFileSystem});
//# sourceMappingURL=data:application/json;base64,